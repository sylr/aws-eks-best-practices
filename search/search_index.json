{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to the EKS Best Practices Guides. The primary goal of this project is to offer a set of best practices for day 2 operations for Amazon EKS. We elected to publish this guidance to GitHub so we could interate quickly, provide timely and effective recommendations for variety of concerns, and easily incorporate suggestions from the broader community. We currently have published guides for the following topics: Best Practices for Security Best Practices for Reliability Best Practices for Cluster Autoscaling In the future we will be publishing best practices guidance for performance, cost optimization, and operational excellence. Contributing \u00b6 We encourage you to contribute to these guides. If you have implemented a practice that has proven to be effective, please share it with us by opening an issue or a pull request. Similarly, if you discover an error or flaw in the guidance we've already published, please submit a PR to correct it.","title":"Introduction"},{"location":"#introduction","text":"Welcome to the EKS Best Practices Guides. The primary goal of this project is to offer a set of best practices for day 2 operations for Amazon EKS. We elected to publish this guidance to GitHub so we could interate quickly, provide timely and effective recommendations for variety of concerns, and easily incorporate suggestions from the broader community. We currently have published guides for the following topics: Best Practices for Security Best Practices for Reliability Best Practices for Cluster Autoscaling In the future we will be publishing best practices guidance for performance, cost optimization, and operational excellence.","title":"Introduction"},{"location":"#contributing","text":"We encourage you to contribute to these guides. If you have implemented a practice that has proven to be effective, please share it with us by opening an issue or a pull request. Similarly, if you discover an error or flaw in the guidance we've already published, please submit a PR to correct it.","title":"Contributing"},{"location":"cluster-autoscaling/cluster-autoscaling/","text":"Kubernetes Cluster Autoscaler \u00b6 Overview \u00b6 The Kubernetes Cluster Autoscaler is a popular Cluster Autoscaling solution maintained by SIG Autoscaling . It is responsible for ensuring that your cluster has enough nodes to schedule your pods without wasting resources. It watches for pods that fail to schedule and for nodes that are underutilized. It then simulates the addition or removal of nodes before applying the change to your cluster. The AWS Cloud Provider implementation within Cluster Autoscaler controls the .DesiredReplicas field of your EC2 Auto Scaling Groups. This guide will provide a mental model for configuring the Cluster Autoscaler and choosing the best set of tradeoffs to meet your organization\u2019s requirements. While there is no single best configuration, there are a set of configuration options that enable you to trade off performance, scalability, cost, and availability. Additionally, this guide will provide tips and best practices for optimizing your configuration for AWS. Glossary \u00b6 The following terminology will be used frequently throughout this document. These terms can have broad meaning, but are limited to the definitions below for the purposes of this document. Scalability refers to how well the Cluster Autoscaler performs as your Kubernetes Cluster increases in number of pods and nodes. As scalability limits are reached, the Cluster Autoscaler\u2019s performance and functionality degrades. As the Cluster Autoscaler exceeds its scalability limits, it may no longer add or remove nodes in your cluster. Performance refers to how quickly the Cluster Autoscaler is able to make and execute scaling decisions. A perfectly performing Cluster Autoscaler would instantly make a decision and trigger a scaling action in response to stimuli, such as a pod becoming unschedulable. Availability means that pods can be scheduled quickly and without disruption. This includes when newly created pods need to be scheduled and when a scaled down node terminates any remaining pods scheduled to it. Cost is determined by the decision behind scale out and scale in events. Resources are wasted if an existing node is underutilized or a new node is added that is too large for incoming pods. Depending on the use case, there can be costs associated with prematurely terminating pods due to an aggressive scale down decision. Node Groups are an abstract Kubernetes concept for a group of nodes within a cluster. It is not a true Kubernetes resource, but exists as an abstraction in the Cluster Autoscaler, Cluster API, and other components. Nodes within a Node Group share properties like labels and taints, but may consist of multiple Availability Zones or Instance Types. EC2 Auto Scaling Groups can be used as an implementation of Node Groups on EC2. EC2 Auto Scaling Groups are configured to launch instances that automatically join their Kubernetes Clusters and apply labels and taints to their corresponding Node resource in the Kubernetes API. EC2 Managed Node Groups are another implementation of Node Groups on EC2. They abstract away the complexity manually configuring EC2 Autoscaling Scaling Groups and provide additional management features like node version upgrade and graceful node termination. Operating the Cluster Autoscaler \u00b6 The Cluster Autoscaler is typically installed as a Deployment in your cluster. It uses leader election to ensure high availability, but work is done by a single replica at a time. It is not horizontally scalable. For basic setups, the default it should work out of the box using the provided installation instructions , but there are a few things to keep in mind. Ensure that: The Cluster Autoscaler\u2019s version matches the Cluster\u2019s Version. Cross version compatibility is not tested or supported . Auto Discovery is enabled, unless you have specific advanced use cases that prevent use of this mode. Configuring your Node Groups \u00b6 Effective autoscaling starts with correctly configuring a set of Node Groups for your cluster. Selecting the right set of Node Groups is key to maximizing availability and reducing cost across your workloads. AWS implements Node Groups using EC2 Auto Scaling Groups, which are flexible to a large number of use cases. However, the Cluster Autoscaler makes some assumptions about your Node Groups. Keeping your EC2 Auto Scaling Group configurations consistent with these assumptions will minimize undesired behavior. Ensure that: Each Node in a Node Group has identical scheduling properties, such as Labels, Taints, and Resources. For MixedInstancePolicies, the Instance Types must be of the same shape for CPU, Memory, and GPU The first Instance Type specified in the policy will be used to simulate scheduling. If your policy has additional Instance Types with more resources, resources may be wasted after scale out. If your policy has additional Instance Types with less resources, pods may fail to schedule on the instances. Node Groups with many nodes are preferred over many Node Groups with fewer nodes. This will have the biggest impact on scalability. Wherever possible, prefer EC2 features when both systems provide support (e.g. Regions, MixedInstancePolicy) Note: If possible, we recommend using EKS Managed Node Groups . Managed Node Groups come with powerful management features, including features for Cluster Autoscaler like automatic EC2 Auto Scaling Group discovery and graceful node termination. Optimizing for Performance and Scalability \u00b6 Understanding the autoscaling algorithm\u2019s runtime complexity will help you tune the Cluster Autoscaler to continue operating smoothly in large clusters with greater than 1,000 nodes . The primary knobs for tuning scalability of the Cluster Autoscaler are the resources provided to the process, the scan interval of the algorithm, and the number of Node Groups in the cluster. There are other factors involved in the true runtime complexity of this algorithm, such as scheduling plugin complexity and number of pods. These are considered to be unconfigurable parameters as they are natural to the cluster\u2019s workload and cannot easily be tuned. The Cluster Autoscaler loads the entire cluster\u2019s state into memory, including Pods, Nodes, and Node Groups. On each scan interval, the algorithm identifies unschedulable pods and simulates scheduling for each Node Group. Tuning these factors come with different tradeoffs which should be carefully considered for your use case. Vertically Autoscaling the Cluster Autoscaler \u00b6 The simplest way to scale the Cluster Autoscaler to larger clusters is to increase the resource requests for its deployment. Both memory and CPU should be increased for large clusters, though this varies significantly with cluster size. The autoscaling algorithm stores all pods and nodes in memory, which can result in a memory footprint larger than a gigabyte in some cases. Increasing resources is typically done manually. If you find that constant resource tuning is creating an operational burden, consider using the Addon Resizer or Vertical Pod Autoscaler . Reducing the number of Node Groups \u00b6 Minimizing the number of node groups is one way to ensure that the Cluster Autoscaler will continue to perform well on large clusters. This may be challenging for some organizations who structure their node groups per team or per application. While this is fully supported by the Kubernetes API, this is considered to be a Cluster Autoscaler anti-pattern with repercussions for scalability. There are many reasons to use multiple node groups (e.g. Spot or GPUs), but in many cases there are alternative designs that achieve the same effect while using a small number of groups. Ensure that: Pod isolation is done using Namespaces rather than Node Groups. This may not be possible in low-trust multi-tenant clusters. Pod ResourceRequests and ResourceLimits are properly set to avoid resource contention. Larger instance types will result in more optimal bin packing and reduced system pod overhead. NodeTaints or NodeSelectors are used to schedule pods as the exception, not as the rule. Regional resources are defined as a single EC2 Auto Scaling Group with multiple Availability Zones. Reducing the Scan Interval \u00b6 A low scan interval (e.g. 10 seconds) will ensure that the Cluster Autoscaler responds as quickly as possible when pods become unschedulable. However, each scan results in many API calls to the Kubernetes API and EC2 Auto Scaling Group or EKS Managed Node Group APIs. These API calls can result in rate limiting or even service unavailability for your Kubernetes Control Plane. The default scan interval is 10 seconds, but on AWS, launching a node takes significantly longer to launch a new instance. This means that it\u2019s possible to increase the interval without significantly increasing overall scale up time. For example, if it takes 2 minutes to launch a node, changing the interval to 1 minute will result a tradeoff of 6x reduced API calls for 38% slower scale ups. Sharding Across Node Groups \u00b6 The Cluster Autoscaler can be configured to operate on a specific set of Node Groups. Using this functionality, it\u2019s possible to deploy multiple instances of the Cluster Autoscaler, each configured to operate on a different set of Node Groups. This strategy enables you use arbitrarily large numbers of Node Groups, trading cost for scalability. We only recommend using this as a last resort for improving performance. The Cluster Autoscaler was not originally designed for this configuration, so there are some side effects. Since the shards do not communicate, it\u2019s possible for multiple autoscalers to attempt to schedule an unschedulable pod. This can result in unnecessary scale out of multiple Node Groups. These extra nodes will scale back in after the scale-down-delay . metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 1 ... -- nodes = 1 : 10 : k8s - worker - asg - 1 -- nodes = 1 : 10 : k8s - worker - asg - 2 --- metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 2 ... -- nodes = 1 : 10 : k8s - worker - asg - 3 -- nodes = 1 : 10 : k8s - worker - asg - 4 Ensure that: Each shard is configured to point to a unique set of EC2 Auto Scaling Groups Each shard is deployed to a separate namespace to avoid leader election conflicts Optimizing for Cost and Availability \u00b6 Spot Instances \u00b6 You can use Spot Instances in your node groups and save up to 90% off the on-demand price, with the trade-off the Spot Instances can be interrupted at any time when EC2 needs the capacity back. Insufficient Capacity Errors will occur when your EC2 Auto Scaling group cannot scale up due to lack of available capacity. Maximizing diversity by selecting many instance families can increase your chance of achieving your desired scale by tapping into many Spot capacity pools, and decrease the impact of Spot Instance interruptions on your cluster availability. Mixed Instance Policies with Spot Instances are a great way to increase diversity without increasing the number of node groups. Keep in mind, if you need guaranteed resources, use On-Demand Instances instead of Spot Instances. It\u2019s critical that all Instance Types have similar resource capacity when configuring Mixed Instance Policies. The autoscaler\u2019s scheduling simulator uses the first InstanceType in the MixedInstancePolicy. If subsequent Instance Types are larger, resources may be wasted after a scale up. If smaller, your pods may fail to schedule on the new instances due to insufficient capacity. For example, M4, M5, M5a, and M5n instances all have similar amounts of CPU and Memory and are great candidates for a MixedInstancePolicy. The EC2 Instance Selector tool can help you identify similar instance types. It's recommended to isolate On-Demand and Spot capacity into separate EC2 Auto Scaling groups. This is preferred over using a base capacity strategy because the scheduling properties are fundamentally different. Since Spot Instances be interrupted at any time (when EC2 needs the capacity back), users will often taint their preemptable nodes, requiring an explicit pod toleration to the preemption behavior. These taints result in different scheduling properties for the nodes, so they should be separated into multiple EC2 Auto Scaling Groups. The Cluster Autoscaler has a concept of Expanders , which provide different strategies for selecting which Node Group to scale. The strategy --expander=least-waste is a good general purpose default, and if you're going to use multiple node groups for Spot Instance diversification (as described in the image above), it could help further cost-optimize the node groups by scaling the group which would be best utilized after the scaling activity. Prioritizing a node group / ASG \u00b6 You may also configure priority based autoscaling by using the Priority expander. --expander=priority enables your cluster to prioritize a node group / ASG, and if it is unable to scale for any reason, it will choose the next node group in the prioritized list. This is useful in situations where, for example, you want to use P3 instance types because their GPU provides optimal performance for your workload, but as a second option you can also use P2 instance types. apiVersion : v1 kind : ConfigMap metadata : name : cluster - autoscaler - priority - expander namespace : kube - system data : priority : |- 10 : - .* p2 - node - group .* 50 : - .* p3 - node - group .* Cluster Autoscaler will try to scale up the EC2 Auto Scaling group matching the name p2-node-group . If this operation does not succeed within --max-node-provision-time , it will attempt to scale an EC2 Auto Scaling group matching the name p3-node-group . This value defaults to 15 minutes and can be reduced for more responsive node group selection, though if the value is too low, it can cause unnecessary scale outs. Overprovisioning \u00b6 The Cluster Autoscaler minimizes costs by ensuring that nodes are only added to the cluster when needed and are removed when unused. This significantly impacts deployment latency because many pods will be forced to wait for a node scale up before they can be scheduled. Nodes can take multiple minutes to become available, which can increase pod scheduling latency by an order of magnitude. This can be mitigated using overprovisioning , which trades cost for scheduling latency. Overprovisioning is implemented using temporary pods with negative priority, which occupy space in the cluster. When newly created pods are unschedulable and have higher priority, the temporary pods will be preempted to make room. The temporary pods then become unschedulable, triggering the Cluster Autoscaler to scale out new overprovisioned nodes. There are other less obvious benefits to overprovisioning. Without overprovisioning, one of the side effects of a highly utilized cluster is that pods will make less optimal scheduling decisions using the preferredDuringSchedulingIgnoredDuringExecution rule of Pod or Node Affinity. A common use case for this is to separate pods for a highly available application across availability zones using AntiAffinity. Overprovisioning can significantly increase the chance that a node of the correct zone is available. The amount of overprovisioned capacity is a careful business decision for your organization. At its core, it\u2019s a tradeoff between performance and cost. One way to make this decision is to determine your average scale up frequency and divide it by the amount of time it takes to scale up a new node. For example, if on average you require a new node every 30 seconds and EC2 takes 30 seconds to provision a new node, a single node of overprovisioning will ensure that there\u2019s always an extra node available, reducing scheduling latency by 30 seconds at the cost of a single additional EC2 Instance. To improve zonal scheduling decisions, overprovision a number of nodes equal to the number of availability zones in your EC2 Auto Scaling Group to ensure that the scheduler can select the best zone for incoming pods. Prevent Scale Down Eviction \u00b6 Some workloads are expensive to evict. Big data analysis, machine learning tasks, and test runners will eventually complete, but must be restarted if interrupted. The Cluster Autoscaler will attempt to scale down any node under the scale-down-utilization-threshold, which will interrupt any remaining pods on the node. This can be prevented by ensuring that pods that are expensive to evict are protected by a label recognized by the Cluster Autoscaler. Ensure that: Expensive to evict pods have the label cluster-autoscaler.kubernetes.io/safe-to-evict=false Advanced Use Cases \u00b6 EBS Volumes \u00b6 Persistent storage is critical for building stateful applications, such as database or distributed caches. EBS Volumes enable this use case on Kubernetes, but are limited to a specific zone. These applications can be highly available if sharded across multiple AZs using a separate EBS Volume for each AZ. The Cluster Autoscaler can then balance the scaling of the EC2 Autoscaling Groups. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=true . Node Groups are configured with identical settings except for different availability zones and EBS Volumes. Co-Scheduling \u00b6 Machine learning distributed training jobs benefit significantly from the minimized latency of same-zone node configurations. These workloads deploy multiple pods to a specific zone. This can be achieved by setting Pod Affinity for all co-scheduled pods or Node Affinity using topologyKey: failure-domain.beta.kubernetes.io/zone . The Cluster Autoscaler will then scale out a specific zone to match demands. You may wish to allocate multiple EC2 Auto Scaling Groups, one per availability zone to enable failover for the entire co-scheduled workload. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=false Node Affinity and/or Pod Preemption is used when clusters include both Regional and Zonal Node Groups. Use Node Affinity to force or encourage regional pods to avoid zonal Node Groups, and vice versa. If zonal pods schedule onto regional node groups, this will result in imbalanced capacity for your regional pods. If your zonal workloads can tolerate disruption and relocation, configure Pod Preemption to enable regionally scaled pods to force preemption and rescheduling on a less contested zone. Accelerators \u00b6 Some clusters take advantage of specialized hardware accelerators such as GPU. When scaling out, the accelerator device plugin can take several minutes to advertise the resource to the cluster. The Cluster Autoscaler has simulated that this node will have the accelerator, but until the accelerator becomes ready and updates the node\u2019s available resources, pending pods can not be scheduled on the node. This can result in repeated unnecessary scale out . Additionally, nodes with accelerators and high CPU or Memory utilization will not be considered for scale down, even if the accelerator is unused. This behavior can be expensive due to the relative cost of accelerators. Instead, the Cluster Autoscaler can apply special rules to consider nodes for scale down if they have unoccupied accelerators. To ensure the correct behavior for these cases, you can configure the kubelet on your accelerator nodes to label the node before it joins the cluster. The Cluster Autoscaler will use this label selector to trigger the accelerator optimized behavior. Ensure that: The Kubelet for GPU nodes is configured with --node-labels k8s.amazonaws.com/accelerator=$ACCELERATOR_TYPE Nodes with Accelerators adhere to the identical scheduling properties rule noted above. Scaling from 0 \u00b6 Cluster Autoscaler is capable of scaling Node Groups to and from zero, which can yield significant cost savings. It detects the CPU, memory, and GPU resources of an Auto Scaling Group by inspecting the InstanceType specified in its LaunchConfiguration or LaunchTemplate. Some pods require additional resources like WindowsENI or PrivateIPv4Address or specific NodeSelectors or Taints which cannot be discovered from the LaunchConfiguration. The Cluster Autoscaler can account for these factors by discovering them from tags on the EC2 Auto Scaling Group. For example: Key : k8s . io /cluster-autoscaler/node-template/resources/ $RESOURCE_NAME Value : 5 Key : k8s . io /cluster-autoscaler/node-template/label/ $LABEL_KEY Value : $LABEL_VALUE Key : k8s . io /cluster-autoscaler/node-template/taint/ $TAINT_KEY Value : NoSchedule Note: Keep in mind, when scaling to zero your capacity is returned to EC2 and may be unavailable in the future. Additional Parameters \u00b6 There are many configuration options that can be used to tune the behavior and performance of the Cluster Autoscaler. A complete list of parameters is available on Github . Parameter Description Default scan-interval How often cluster is reevaluated for scale up or down 10 seconds max-empty-bulk-delete Maximum number of empty nodes that can be deleted at the same time. 10 scale-down-delay-after-add How long after scale up that scale down evaluation resumes 10 minutes scale-down-delay-after-delete How long after node deletion that scale down evaluation resumes, defaults to scan-interval scan-interval scale-down-delay-after-failure How long after scale down failure that scale down evaluation resumes 3 minutes scale-down-unneeded-time How long a node should be unneeded before it is eligible for scale down 10 minutes scale-down-unready-time How long an unready node should be unneeded before it is eligible for scale down 20 minutes scale-down-utilization-threshold Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down 0.5 scale-down-non-empty-candidates-count Maximum number of non empty nodes considered in one iteration as candidates for scale down with drain. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to non positive value to turn this heuristic off - CA will not limit the number of nodes it considers.\u201c 30 scale-down-candidates-pool-ratio A ratio of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to 1.0 to turn this heuristics off - CA will take all nodes as additional candidates. 0.1 scale-down-candidates-pool-min-count Minimum number of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. When calculating the pool size for additional candidates we take max(#nodes * scale-down-candidates-pool-ratio, scale-down-candidates-pool-min-count) 50 Additional Resources \u00b6 This page contains a list of Cluster Autoscaler presentations and demos. If you'd like to add a presentation or demo here, please send a pull request. Presentation/Demo Presenters Autoscaling and Cost Optimization on Kubernetes: From 0 to 100 Guy Templeton, Skyscanner & Jiaxin Shan, Amazon References \u00b6 https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md https://github.com/aws/amazon-ec2-instance-selector https://github.com/aws/aws-node-termination-handler","title":"Home"},{"location":"cluster-autoscaling/cluster-autoscaling/#kubernetes-cluster-autoscaler","text":"","title":"Kubernetes Cluster Autoscaler"},{"location":"cluster-autoscaling/cluster-autoscaling/#overview","text":"The Kubernetes Cluster Autoscaler is a popular Cluster Autoscaling solution maintained by SIG Autoscaling . It is responsible for ensuring that your cluster has enough nodes to schedule your pods without wasting resources. It watches for pods that fail to schedule and for nodes that are underutilized. It then simulates the addition or removal of nodes before applying the change to your cluster. The AWS Cloud Provider implementation within Cluster Autoscaler controls the .DesiredReplicas field of your EC2 Auto Scaling Groups. This guide will provide a mental model for configuring the Cluster Autoscaler and choosing the best set of tradeoffs to meet your organization\u2019s requirements. While there is no single best configuration, there are a set of configuration options that enable you to trade off performance, scalability, cost, and availability. Additionally, this guide will provide tips and best practices for optimizing your configuration for AWS.","title":"Overview"},{"location":"cluster-autoscaling/cluster-autoscaling/#glossary","text":"The following terminology will be used frequently throughout this document. These terms can have broad meaning, but are limited to the definitions below for the purposes of this document. Scalability refers to how well the Cluster Autoscaler performs as your Kubernetes Cluster increases in number of pods and nodes. As scalability limits are reached, the Cluster Autoscaler\u2019s performance and functionality degrades. As the Cluster Autoscaler exceeds its scalability limits, it may no longer add or remove nodes in your cluster. Performance refers to how quickly the Cluster Autoscaler is able to make and execute scaling decisions. A perfectly performing Cluster Autoscaler would instantly make a decision and trigger a scaling action in response to stimuli, such as a pod becoming unschedulable. Availability means that pods can be scheduled quickly and without disruption. This includes when newly created pods need to be scheduled and when a scaled down node terminates any remaining pods scheduled to it. Cost is determined by the decision behind scale out and scale in events. Resources are wasted if an existing node is underutilized or a new node is added that is too large for incoming pods. Depending on the use case, there can be costs associated with prematurely terminating pods due to an aggressive scale down decision. Node Groups are an abstract Kubernetes concept for a group of nodes within a cluster. It is not a true Kubernetes resource, but exists as an abstraction in the Cluster Autoscaler, Cluster API, and other components. Nodes within a Node Group share properties like labels and taints, but may consist of multiple Availability Zones or Instance Types. EC2 Auto Scaling Groups can be used as an implementation of Node Groups on EC2. EC2 Auto Scaling Groups are configured to launch instances that automatically join their Kubernetes Clusters and apply labels and taints to their corresponding Node resource in the Kubernetes API. EC2 Managed Node Groups are another implementation of Node Groups on EC2. They abstract away the complexity manually configuring EC2 Autoscaling Scaling Groups and provide additional management features like node version upgrade and graceful node termination.","title":"Glossary"},{"location":"cluster-autoscaling/cluster-autoscaling/#operating-the-cluster-autoscaler","text":"The Cluster Autoscaler is typically installed as a Deployment in your cluster. It uses leader election to ensure high availability, but work is done by a single replica at a time. It is not horizontally scalable. For basic setups, the default it should work out of the box using the provided installation instructions , but there are a few things to keep in mind. Ensure that: The Cluster Autoscaler\u2019s version matches the Cluster\u2019s Version. Cross version compatibility is not tested or supported . Auto Discovery is enabled, unless you have specific advanced use cases that prevent use of this mode.","title":"Operating the Cluster Autoscaler"},{"location":"cluster-autoscaling/cluster-autoscaling/#configuring-your-node-groups","text":"Effective autoscaling starts with correctly configuring a set of Node Groups for your cluster. Selecting the right set of Node Groups is key to maximizing availability and reducing cost across your workloads. AWS implements Node Groups using EC2 Auto Scaling Groups, which are flexible to a large number of use cases. However, the Cluster Autoscaler makes some assumptions about your Node Groups. Keeping your EC2 Auto Scaling Group configurations consistent with these assumptions will minimize undesired behavior. Ensure that: Each Node in a Node Group has identical scheduling properties, such as Labels, Taints, and Resources. For MixedInstancePolicies, the Instance Types must be of the same shape for CPU, Memory, and GPU The first Instance Type specified in the policy will be used to simulate scheduling. If your policy has additional Instance Types with more resources, resources may be wasted after scale out. If your policy has additional Instance Types with less resources, pods may fail to schedule on the instances. Node Groups with many nodes are preferred over many Node Groups with fewer nodes. This will have the biggest impact on scalability. Wherever possible, prefer EC2 features when both systems provide support (e.g. Regions, MixedInstancePolicy) Note: If possible, we recommend using EKS Managed Node Groups . Managed Node Groups come with powerful management features, including features for Cluster Autoscaler like automatic EC2 Auto Scaling Group discovery and graceful node termination.","title":"Configuring your Node Groups"},{"location":"cluster-autoscaling/cluster-autoscaling/#optimizing-for-performance-and-scalability","text":"Understanding the autoscaling algorithm\u2019s runtime complexity will help you tune the Cluster Autoscaler to continue operating smoothly in large clusters with greater than 1,000 nodes . The primary knobs for tuning scalability of the Cluster Autoscaler are the resources provided to the process, the scan interval of the algorithm, and the number of Node Groups in the cluster. There are other factors involved in the true runtime complexity of this algorithm, such as scheduling plugin complexity and number of pods. These are considered to be unconfigurable parameters as they are natural to the cluster\u2019s workload and cannot easily be tuned. The Cluster Autoscaler loads the entire cluster\u2019s state into memory, including Pods, Nodes, and Node Groups. On each scan interval, the algorithm identifies unschedulable pods and simulates scheduling for each Node Group. Tuning these factors come with different tradeoffs which should be carefully considered for your use case.","title":"Optimizing for Performance and Scalability"},{"location":"cluster-autoscaling/cluster-autoscaling/#vertically-autoscaling-the-cluster-autoscaler","text":"The simplest way to scale the Cluster Autoscaler to larger clusters is to increase the resource requests for its deployment. Both memory and CPU should be increased for large clusters, though this varies significantly with cluster size. The autoscaling algorithm stores all pods and nodes in memory, which can result in a memory footprint larger than a gigabyte in some cases. Increasing resources is typically done manually. If you find that constant resource tuning is creating an operational burden, consider using the Addon Resizer or Vertical Pod Autoscaler .","title":"Vertically Autoscaling the Cluster Autoscaler"},{"location":"cluster-autoscaling/cluster-autoscaling/#reducing-the-number-of-node-groups","text":"Minimizing the number of node groups is one way to ensure that the Cluster Autoscaler will continue to perform well on large clusters. This may be challenging for some organizations who structure their node groups per team or per application. While this is fully supported by the Kubernetes API, this is considered to be a Cluster Autoscaler anti-pattern with repercussions for scalability. There are many reasons to use multiple node groups (e.g. Spot or GPUs), but in many cases there are alternative designs that achieve the same effect while using a small number of groups. Ensure that: Pod isolation is done using Namespaces rather than Node Groups. This may not be possible in low-trust multi-tenant clusters. Pod ResourceRequests and ResourceLimits are properly set to avoid resource contention. Larger instance types will result in more optimal bin packing and reduced system pod overhead. NodeTaints or NodeSelectors are used to schedule pods as the exception, not as the rule. Regional resources are defined as a single EC2 Auto Scaling Group with multiple Availability Zones.","title":"Reducing the number of Node Groups"},{"location":"cluster-autoscaling/cluster-autoscaling/#reducing-the-scan-interval","text":"A low scan interval (e.g. 10 seconds) will ensure that the Cluster Autoscaler responds as quickly as possible when pods become unschedulable. However, each scan results in many API calls to the Kubernetes API and EC2 Auto Scaling Group or EKS Managed Node Group APIs. These API calls can result in rate limiting or even service unavailability for your Kubernetes Control Plane. The default scan interval is 10 seconds, but on AWS, launching a node takes significantly longer to launch a new instance. This means that it\u2019s possible to increase the interval without significantly increasing overall scale up time. For example, if it takes 2 minutes to launch a node, changing the interval to 1 minute will result a tradeoff of 6x reduced API calls for 38% slower scale ups.","title":"Reducing the Scan Interval"},{"location":"cluster-autoscaling/cluster-autoscaling/#sharding-across-node-groups","text":"The Cluster Autoscaler can be configured to operate on a specific set of Node Groups. Using this functionality, it\u2019s possible to deploy multiple instances of the Cluster Autoscaler, each configured to operate on a different set of Node Groups. This strategy enables you use arbitrarily large numbers of Node Groups, trading cost for scalability. We only recommend using this as a last resort for improving performance. The Cluster Autoscaler was not originally designed for this configuration, so there are some side effects. Since the shards do not communicate, it\u2019s possible for multiple autoscalers to attempt to schedule an unschedulable pod. This can result in unnecessary scale out of multiple Node Groups. These extra nodes will scale back in after the scale-down-delay . metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 1 ... -- nodes = 1 : 10 : k8s - worker - asg - 1 -- nodes = 1 : 10 : k8s - worker - asg - 2 --- metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 2 ... -- nodes = 1 : 10 : k8s - worker - asg - 3 -- nodes = 1 : 10 : k8s - worker - asg - 4 Ensure that: Each shard is configured to point to a unique set of EC2 Auto Scaling Groups Each shard is deployed to a separate namespace to avoid leader election conflicts","title":"Sharding Across Node Groups"},{"location":"cluster-autoscaling/cluster-autoscaling/#optimizing-for-cost-and-availability","text":"","title":"Optimizing for Cost and Availability"},{"location":"cluster-autoscaling/cluster-autoscaling/#spot-instances","text":"You can use Spot Instances in your node groups and save up to 90% off the on-demand price, with the trade-off the Spot Instances can be interrupted at any time when EC2 needs the capacity back. Insufficient Capacity Errors will occur when your EC2 Auto Scaling group cannot scale up due to lack of available capacity. Maximizing diversity by selecting many instance families can increase your chance of achieving your desired scale by tapping into many Spot capacity pools, and decrease the impact of Spot Instance interruptions on your cluster availability. Mixed Instance Policies with Spot Instances are a great way to increase diversity without increasing the number of node groups. Keep in mind, if you need guaranteed resources, use On-Demand Instances instead of Spot Instances. It\u2019s critical that all Instance Types have similar resource capacity when configuring Mixed Instance Policies. The autoscaler\u2019s scheduling simulator uses the first InstanceType in the MixedInstancePolicy. If subsequent Instance Types are larger, resources may be wasted after a scale up. If smaller, your pods may fail to schedule on the new instances due to insufficient capacity. For example, M4, M5, M5a, and M5n instances all have similar amounts of CPU and Memory and are great candidates for a MixedInstancePolicy. The EC2 Instance Selector tool can help you identify similar instance types. It's recommended to isolate On-Demand and Spot capacity into separate EC2 Auto Scaling groups. This is preferred over using a base capacity strategy because the scheduling properties are fundamentally different. Since Spot Instances be interrupted at any time (when EC2 needs the capacity back), users will often taint their preemptable nodes, requiring an explicit pod toleration to the preemption behavior. These taints result in different scheduling properties for the nodes, so they should be separated into multiple EC2 Auto Scaling Groups. The Cluster Autoscaler has a concept of Expanders , which provide different strategies for selecting which Node Group to scale. The strategy --expander=least-waste is a good general purpose default, and if you're going to use multiple node groups for Spot Instance diversification (as described in the image above), it could help further cost-optimize the node groups by scaling the group which would be best utilized after the scaling activity.","title":"Spot Instances"},{"location":"cluster-autoscaling/cluster-autoscaling/#prioritizing-a-node-group-asg","text":"You may also configure priority based autoscaling by using the Priority expander. --expander=priority enables your cluster to prioritize a node group / ASG, and if it is unable to scale for any reason, it will choose the next node group in the prioritized list. This is useful in situations where, for example, you want to use P3 instance types because their GPU provides optimal performance for your workload, but as a second option you can also use P2 instance types. apiVersion : v1 kind : ConfigMap metadata : name : cluster - autoscaler - priority - expander namespace : kube - system data : priority : |- 10 : - .* p2 - node - group .* 50 : - .* p3 - node - group .* Cluster Autoscaler will try to scale up the EC2 Auto Scaling group matching the name p2-node-group . If this operation does not succeed within --max-node-provision-time , it will attempt to scale an EC2 Auto Scaling group matching the name p3-node-group . This value defaults to 15 minutes and can be reduced for more responsive node group selection, though if the value is too low, it can cause unnecessary scale outs.","title":"Prioritizing a node group / ASG"},{"location":"cluster-autoscaling/cluster-autoscaling/#overprovisioning","text":"The Cluster Autoscaler minimizes costs by ensuring that nodes are only added to the cluster when needed and are removed when unused. This significantly impacts deployment latency because many pods will be forced to wait for a node scale up before they can be scheduled. Nodes can take multiple minutes to become available, which can increase pod scheduling latency by an order of magnitude. This can be mitigated using overprovisioning , which trades cost for scheduling latency. Overprovisioning is implemented using temporary pods with negative priority, which occupy space in the cluster. When newly created pods are unschedulable and have higher priority, the temporary pods will be preempted to make room. The temporary pods then become unschedulable, triggering the Cluster Autoscaler to scale out new overprovisioned nodes. There are other less obvious benefits to overprovisioning. Without overprovisioning, one of the side effects of a highly utilized cluster is that pods will make less optimal scheduling decisions using the preferredDuringSchedulingIgnoredDuringExecution rule of Pod or Node Affinity. A common use case for this is to separate pods for a highly available application across availability zones using AntiAffinity. Overprovisioning can significantly increase the chance that a node of the correct zone is available. The amount of overprovisioned capacity is a careful business decision for your organization. At its core, it\u2019s a tradeoff between performance and cost. One way to make this decision is to determine your average scale up frequency and divide it by the amount of time it takes to scale up a new node. For example, if on average you require a new node every 30 seconds and EC2 takes 30 seconds to provision a new node, a single node of overprovisioning will ensure that there\u2019s always an extra node available, reducing scheduling latency by 30 seconds at the cost of a single additional EC2 Instance. To improve zonal scheduling decisions, overprovision a number of nodes equal to the number of availability zones in your EC2 Auto Scaling Group to ensure that the scheduler can select the best zone for incoming pods.","title":"Overprovisioning"},{"location":"cluster-autoscaling/cluster-autoscaling/#prevent-scale-down-eviction","text":"Some workloads are expensive to evict. Big data analysis, machine learning tasks, and test runners will eventually complete, but must be restarted if interrupted. The Cluster Autoscaler will attempt to scale down any node under the scale-down-utilization-threshold, which will interrupt any remaining pods on the node. This can be prevented by ensuring that pods that are expensive to evict are protected by a label recognized by the Cluster Autoscaler. Ensure that: Expensive to evict pods have the label cluster-autoscaler.kubernetes.io/safe-to-evict=false","title":"Prevent Scale Down Eviction"},{"location":"cluster-autoscaling/cluster-autoscaling/#advanced-use-cases","text":"","title":"Advanced Use Cases"},{"location":"cluster-autoscaling/cluster-autoscaling/#ebs-volumes","text":"Persistent storage is critical for building stateful applications, such as database or distributed caches. EBS Volumes enable this use case on Kubernetes, but are limited to a specific zone. These applications can be highly available if sharded across multiple AZs using a separate EBS Volume for each AZ. The Cluster Autoscaler can then balance the scaling of the EC2 Autoscaling Groups. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=true . Node Groups are configured with identical settings except for different availability zones and EBS Volumes.","title":"EBS Volumes"},{"location":"cluster-autoscaling/cluster-autoscaling/#co-scheduling","text":"Machine learning distributed training jobs benefit significantly from the minimized latency of same-zone node configurations. These workloads deploy multiple pods to a specific zone. This can be achieved by setting Pod Affinity for all co-scheduled pods or Node Affinity using topologyKey: failure-domain.beta.kubernetes.io/zone . The Cluster Autoscaler will then scale out a specific zone to match demands. You may wish to allocate multiple EC2 Auto Scaling Groups, one per availability zone to enable failover for the entire co-scheduled workload. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=false Node Affinity and/or Pod Preemption is used when clusters include both Regional and Zonal Node Groups. Use Node Affinity to force or encourage regional pods to avoid zonal Node Groups, and vice versa. If zonal pods schedule onto regional node groups, this will result in imbalanced capacity for your regional pods. If your zonal workloads can tolerate disruption and relocation, configure Pod Preemption to enable regionally scaled pods to force preemption and rescheduling on a less contested zone.","title":"Co-Scheduling"},{"location":"cluster-autoscaling/cluster-autoscaling/#accelerators","text":"Some clusters take advantage of specialized hardware accelerators such as GPU. When scaling out, the accelerator device plugin can take several minutes to advertise the resource to the cluster. The Cluster Autoscaler has simulated that this node will have the accelerator, but until the accelerator becomes ready and updates the node\u2019s available resources, pending pods can not be scheduled on the node. This can result in repeated unnecessary scale out . Additionally, nodes with accelerators and high CPU or Memory utilization will not be considered for scale down, even if the accelerator is unused. This behavior can be expensive due to the relative cost of accelerators. Instead, the Cluster Autoscaler can apply special rules to consider nodes for scale down if they have unoccupied accelerators. To ensure the correct behavior for these cases, you can configure the kubelet on your accelerator nodes to label the node before it joins the cluster. The Cluster Autoscaler will use this label selector to trigger the accelerator optimized behavior. Ensure that: The Kubelet for GPU nodes is configured with --node-labels k8s.amazonaws.com/accelerator=$ACCELERATOR_TYPE Nodes with Accelerators adhere to the identical scheduling properties rule noted above.","title":"Accelerators"},{"location":"cluster-autoscaling/cluster-autoscaling/#scaling-from-0","text":"Cluster Autoscaler is capable of scaling Node Groups to and from zero, which can yield significant cost savings. It detects the CPU, memory, and GPU resources of an Auto Scaling Group by inspecting the InstanceType specified in its LaunchConfiguration or LaunchTemplate. Some pods require additional resources like WindowsENI or PrivateIPv4Address or specific NodeSelectors or Taints which cannot be discovered from the LaunchConfiguration. The Cluster Autoscaler can account for these factors by discovering them from tags on the EC2 Auto Scaling Group. For example: Key : k8s . io /cluster-autoscaler/node-template/resources/ $RESOURCE_NAME Value : 5 Key : k8s . io /cluster-autoscaler/node-template/label/ $LABEL_KEY Value : $LABEL_VALUE Key : k8s . io /cluster-autoscaler/node-template/taint/ $TAINT_KEY Value : NoSchedule Note: Keep in mind, when scaling to zero your capacity is returned to EC2 and may be unavailable in the future.","title":"Scaling from 0"},{"location":"cluster-autoscaling/cluster-autoscaling/#additional-parameters","text":"There are many configuration options that can be used to tune the behavior and performance of the Cluster Autoscaler. A complete list of parameters is available on Github . Parameter Description Default scan-interval How often cluster is reevaluated for scale up or down 10 seconds max-empty-bulk-delete Maximum number of empty nodes that can be deleted at the same time. 10 scale-down-delay-after-add How long after scale up that scale down evaluation resumes 10 minutes scale-down-delay-after-delete How long after node deletion that scale down evaluation resumes, defaults to scan-interval scan-interval scale-down-delay-after-failure How long after scale down failure that scale down evaluation resumes 3 minutes scale-down-unneeded-time How long a node should be unneeded before it is eligible for scale down 10 minutes scale-down-unready-time How long an unready node should be unneeded before it is eligible for scale down 20 minutes scale-down-utilization-threshold Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down 0.5 scale-down-non-empty-candidates-count Maximum number of non empty nodes considered in one iteration as candidates for scale down with drain. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to non positive value to turn this heuristic off - CA will not limit the number of nodes it considers.\u201c 30 scale-down-candidates-pool-ratio A ratio of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to 1.0 to turn this heuristics off - CA will take all nodes as additional candidates. 0.1 scale-down-candidates-pool-min-count Minimum number of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. When calculating the pool size for additional candidates we take max(#nodes * scale-down-candidates-pool-ratio, scale-down-candidates-pool-min-count) 50","title":"Additional Parameters"},{"location":"cluster-autoscaling/cluster-autoscaling/#additional-resources","text":"This page contains a list of Cluster Autoscaler presentations and demos. If you'd like to add a presentation or demo here, please send a pull request. Presentation/Demo Presenters Autoscaling and Cost Optimization on Kubernetes: From 0 to 100 Guy Templeton, Skyscanner & Jiaxin Shan, Amazon","title":"Additional Resources"},{"location":"cluster-autoscaling/cluster-autoscaling/#references","text":"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md https://github.com/aws/amazon-ec2-instance-selector https://github.com/aws/aws-node-termination-handler","title":"References"},{"location":"cost_optimization/awareness/","text":"Expenditure awareness \u00b6 Expenditure awareness is understanding who, where and what is causing expenditures in your EKS cluster. Getting an accurate picture of this data will help raise awareness of your spend and highlight areas to remediate. Recommendations \u00b6 Use Cost Explorer \u00b6 AWS Cost Explorer has an easy-to-use interface that lets you visualize, understand, and manage your AWS costs and usage over time. You can analyze cost and usage data, at various levels using the filters available in Cost Explorer. EKS Control Plane and EKS Fargate costs \u00b6 Using the filters, we can query the costs incurred for the EKS costs at the Control Plane and Fargate Pod as shown in the diagram below: Using the filters, we can query the aggregate costs incurred for the Fargate Pods across regions in EKS - which includes both vCPU-Hours per CPU and GB Hrs as shown in the diagram below: Tagging of Resources \u00b6 Amazon EKS supports adding AWS tags to your Amazon EKS clusters. This makes it easy to control access to the EKS API for managing your clusters. Tags added to an EKS cluster are specific to the AWS EKS cluster resource, they do not propagate to other AWS resources used by the cluster such as EC2 instances or load balancers. Today, cluster tagging is supported for all new and existing EKS clusters via the AWS API, Console, and SDKs. AWS Fargate is a technology that provides on-demand, right-sized compute capacity for containers. Before you can schedule pods on Fargate in your cluster, you must define at least one Fargate profile that specifies which pods should use Fargate when they are launched. Adding and Listing tags to an EKS cluster: $ aws eks tag-resource --resource-arn arn:aws:eks:us-west-2:xxx:cluster/ekscluster1 --tags team = devops,env = staging,bu = cio,costcenter = 1234 $ aws eks list-tags-for-resource --resource-arn arn:aws:eks:us-west-2:xxx:cluster/ekscluster1 { \"tags\" : { \"bu\" : \"cio\" , \"env\" : \"staging\" , \"costcenter\" : \"1234\" , \"team\" : \"devops\" } } After you activate cost allocation tags in the AWS Cost Explorer , AWS uses the cost allocation tags to organize your resource costs on your cost allocation report, to make it easier for you to categorize and track your AWS costs. Tags don't have any semantic meaning to Amazon EKS and are interpreted strictly as a string of characters. For example, you can define a set of tags for your Amazon EKS clusters to help you track each cluster's owner and stack level. Use AWS Trusted Advisor \u00b6 AWS Trusted Advisor offers a rich set of best practice checks and recommendations across five categories: cost optimization; security; fault tolerance; performance; and service limits. For Cost Optimization, Trusted Advisor helps eliminate unused and idle resources and recommends making commitments to reserved capacity. The key action items that will help Amazon EKS will be around low utilsed EC2 instances, unassociated Elastic IP addresses, Idle Load Balancers, underutilized EBS volumes among other things. The complete list of checks are provided at https://aws.amazon.com/premiumsupport/technology/trusted-advisor/best-practice-checklist/. The Trusted Advisor also provides Savings Plans and Reserved Instances recommendations for EC2 instances and Fargate which allows you to commit to a consistent usage amount in exchange for discounted rates. Note that the recommendations from Trusted Advisor are generic recommendations and not specific to EKS. Use the Kubernetes dashboard \u00b6 Kubernetes dashboard Kubernetes Dashboard is a general purpose, web-based UI for Kubernetes clusters, which provides information about the Kubernetes cluster including the resource usage at a cluster, node and pod level. The deployment of the Kubernetes dashboard on an Amazon EKS cluster is described in the Amazon EKS documentation . Dashboard provides resource usage breakdowns for each node and pod, as well as detailed metadata about pods, services, Deployments, and other Kubernetes objects. This consolidated information provides visibility into your Kubernetes environment. kubectl top and describe commands Viewing resource usage metrics with kubectl top and kubectl describe commands. kubectl top will show current CPU and memory usage for the pods or nodes across your cluster, or for a specific pod or node. The kubectl describe command will give more detailed information about a specific node or a pod. $ kubectl top pods $ kubectl top nodes $ kubectl top pod pod-name --namespace mynamespace --containers Using the top command, the output will displays the total amount of CPU (in cores) and memory (in MiB) that the node is using, and the percentages of the node\u2019s allocatable capacity those numbers represent. You can then drill-down to the next level, container level within pods by adding a --containers flag. $ kubectl describe node <node> $ kubectl describe pod <pod> kubectl describe returns the percent of total available capacity that each resource request or limit represents. kubectl top and describe, track the utilization and availability of critical resources such as CPU, memory, and storage across kubernetes pods, nodes and containers. This awareness will help in understanding resource usage and help in controlling costs. Use CloudWatch Container Insights \u00b6 Use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices. Container Insights is available for Amazon Elastic Kubernetes Service on EC2, and Kubernetes platforms on Amazon EC2. The metrics include utilization for resources such as CPU, memory, disk, and network. The installation of insights is given in the documentation . CloudWatch creates aggregated metrics at the cluster, node, pod, task, and service level as CloudWatch metrics. The following query shows a list of nodes, sorted by average node CPU utilization STATS avg(node_cpu_utilization) as avg_node_cpu_utilization by NodeName | SORT avg_node_cpu_utilization DESC CPU usage by Container name stats pct(container_cpu_usage_total, 50) as CPUPercMedian by kubernetes.container_name | filter Type=\"Container\" Disk usage by Container name stats floor(avg(container_filesystem_usage/1024)) as container_filesystem_usage_avg_kb by InstanceId, kubernetes.container_name, device | filter Type=\"ContainerFS\" | sort container_filesystem_usage_avg_kb desc More sample queries are given in the Container Insights documention This awareness will help in understanding resource usage and help in controlling costs. Using KubeCost for expenditure awareness and guidance \u00b6 Third party tools like kubecost can also be deployed on Amazon EKS to get visibility into cost of running your Kubernetes cluster. Please refer to this AWS blog for tracking costs using Kubecost Deploying kubecost using Helm 3: $ curl - sSL https: // raw . githubusercontent . com / helm / helm / master / scripts / get-helm-3 | bash $ helm version -- short v3 .2.1 + gfe51cd1 $ helm repo add stable https: // kubernetes-charts . storage . googleapis . com / $ helm repo add stable https: // kubernetes-charts . storage . googleapis . com / c ^ C $ kubectl create namespace kubecost namespace / kubecost created $ helm repo add kubecost https: // kubecost . github . io / cost-analyzer / \"kubecost\" has been added to your repositories $ helm install kubecost kubecost / cost-analyzer -- namespace kubecost -- set kubecostToken = \"aGRoZEBqc2pzLmNvbQ==xm343yadf98\" NAME: kubecost LAST DEPLOYED: Mon May 18 08 : 49 : 05 2020 NAMESPACE: kubecost STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: -------------------------------------------------- Kubecost has been successfully installed . When pods are Ready , you can enable port-forwarding with the following command: kubectl port-forward -- namespace kubecost deployment / kubecost-cost-analyzer 9090 Next , navigate to http: // localhost:9090 in a web browser . $ kubectl port-forward -- namespace kubecost deployment / kubecost-cost-analyzer 9090 Note: If you are using Cloud 9 or have a need to forward it to a different port like 8080 , issue the following command $ kubectl port-forward -- namespace kubecost deployment / kubecost-cost-analyzer 8080 : 9090 Kube Cost Dashboard - Use Kubernetes Cost Allocation and Capacity Planning Analytics Tool \u00b6 Kubernetes Opex Analytics is a tool to help organizations track the resources being consumed by their Kubernetes clusters to prevent overpaying. To do so it generates, short- (7 days), mid- (14 days) and long-term (12 months) usage reports showing relevant insights on what amount of resources each project is spending over time. Magalix Kubeadvisor \u00b6 KubeAdvisor continuously scans your Kubernetes clusters and reports how you can fix issues, apply best practices, and optimize your cluster (with recommendations of resources like CPU/Memory around cost-efficiency). Spot.io, previously called Spotinst \u00b6 Spotinst Ocean is an application scaling service. Similar to Amazon Elastic Compute Cloud (Amazon EC2) Auto Scaling groups, Spotinst Ocean is designed to optimize performance and costs by leveraging Spot Instances combined with On-Demand and Reserved Instances. Using a combination of automated Spot Instance management and the variety of instance sizes, the Ocean cluster autoscaler scales according to the pod resource requirements. Spotinst Ocean also includes a prediction algorithm to predict Spot Instance interruption 15 minutes ahead of time and spin up a new node in a different Spot capacity pool. This is available as an AWS Quickstart developed by Spotinst, Inc. in collaboration with AWS. The EKS workshop also has a module on Optimized Worker Node on Amazon EKS Management with Ocean by Spot.io which includes sections on cost allocation, right sizing and scaling strategies. Yotascale \u00b6 Yotascale helps with accurately allocating Kubernetes costs. Yotascale Kubernetes Cost Allocation feature utilizes actual cost data, which is inclusive of Reserved Instance discounts and spot instance pricing instead of generic market-rate estimations, to inform the total Kubernetes cost footprint More details can be found at their website . Alcide Advisor \u00b6 Alcide is an AWS Partner Network (APN) Advanced Technology Partner. Alcide Advisor helps ensure your Amazon EKS cluster, nodes, and pods configuration are tuned to run according to security best practices and internal guidelines. Alcide Advisor is an agentless service for Kubernetes audit and compliance that\u2019s built to ensure a frictionless and secured DevSecOps flow by hardening the development stage before moving to production. More details can be found in this blog post . Other tools \u00b6 Kubernetes Garbage Collection \u00b6 The role of the Kubernetes garbage collector is to delete certain objects that once had an owner, but no longer have an owner. Fargate count \u00b6 Fargatecount is an useful tool, which allows AWS customers to track, with a custom CloudWatch metric, the total number of EKS pods that have been deployed on Fargate in a specific region of a specific account. This helps in keeping track of all the Fargate pods running across an EKS cluster. Kubernetes Ops View \u00b6 Kube Ops View is an useful tool, which provides a common operational picture visually for multiple Kubernetes clusters. git clone https://github.com/hjacobs/kube-ops-view cd kube-ops-view kubectl apply -k deploy/ Popeye - A Kubernetes Cluster Sanitizer \u00b6 Popeye - A Kubernetes Cluster Sanitizer is a utility that scans live Kubernetes cluster and reports potential issues with deployed resources and configurations. It sanitizes your cluster based on what's deployed and not what's sitting on disk. By scanning your cluster, it detects misconfigurations and helps you to ensure that best practices are in place Resources \u00b6 Refer to the following resources to learn more about best practices for cost optimization. Documentation and Blogs + Amazon EKS supports tagging Tools + What is AWS Billing and Cost Management? + Amazon CloudWatch Container Insights + How to track costs in multi-tenant Amazon EKS clusters using Kubecost + Kube Cost + Kube Opsview + Kube Janitor + Kubernetes Opex Analytics","title":"Expenditure awareness"},{"location":"cost_optimization/awareness/#expenditure-awareness","text":"Expenditure awareness is understanding who, where and what is causing expenditures in your EKS cluster. Getting an accurate picture of this data will help raise awareness of your spend and highlight areas to remediate.","title":"Expenditure awareness"},{"location":"cost_optimization/awareness/#recommendations","text":"","title":"Recommendations"},{"location":"cost_optimization/awareness/#use-cost-explorer","text":"AWS Cost Explorer has an easy-to-use interface that lets you visualize, understand, and manage your AWS costs and usage over time. You can analyze cost and usage data, at various levels using the filters available in Cost Explorer.","title":"Use Cost Explorer"},{"location":"cost_optimization/awareness/#eks-control-plane-and-eks-fargate-costs","text":"Using the filters, we can query the costs incurred for the EKS costs at the Control Plane and Fargate Pod as shown in the diagram below: Using the filters, we can query the aggregate costs incurred for the Fargate Pods across regions in EKS - which includes both vCPU-Hours per CPU and GB Hrs as shown in the diagram below:","title":"EKS Control Plane and EKS Fargate costs"},{"location":"cost_optimization/awareness/#tagging-of-resources","text":"Amazon EKS supports adding AWS tags to your Amazon EKS clusters. This makes it easy to control access to the EKS API for managing your clusters. Tags added to an EKS cluster are specific to the AWS EKS cluster resource, they do not propagate to other AWS resources used by the cluster such as EC2 instances or load balancers. Today, cluster tagging is supported for all new and existing EKS clusters via the AWS API, Console, and SDKs. AWS Fargate is a technology that provides on-demand, right-sized compute capacity for containers. Before you can schedule pods on Fargate in your cluster, you must define at least one Fargate profile that specifies which pods should use Fargate when they are launched. Adding and Listing tags to an EKS cluster: $ aws eks tag-resource --resource-arn arn:aws:eks:us-west-2:xxx:cluster/ekscluster1 --tags team = devops,env = staging,bu = cio,costcenter = 1234 $ aws eks list-tags-for-resource --resource-arn arn:aws:eks:us-west-2:xxx:cluster/ekscluster1 { \"tags\" : { \"bu\" : \"cio\" , \"env\" : \"staging\" , \"costcenter\" : \"1234\" , \"team\" : \"devops\" } } After you activate cost allocation tags in the AWS Cost Explorer , AWS uses the cost allocation tags to organize your resource costs on your cost allocation report, to make it easier for you to categorize and track your AWS costs. Tags don't have any semantic meaning to Amazon EKS and are interpreted strictly as a string of characters. For example, you can define a set of tags for your Amazon EKS clusters to help you track each cluster's owner and stack level.","title":"Tagging of Resources"},{"location":"cost_optimization/awareness/#use-aws-trusted-advisor","text":"AWS Trusted Advisor offers a rich set of best practice checks and recommendations across five categories: cost optimization; security; fault tolerance; performance; and service limits. For Cost Optimization, Trusted Advisor helps eliminate unused and idle resources and recommends making commitments to reserved capacity. The key action items that will help Amazon EKS will be around low utilsed EC2 instances, unassociated Elastic IP addresses, Idle Load Balancers, underutilized EBS volumes among other things. The complete list of checks are provided at https://aws.amazon.com/premiumsupport/technology/trusted-advisor/best-practice-checklist/. The Trusted Advisor also provides Savings Plans and Reserved Instances recommendations for EC2 instances and Fargate which allows you to commit to a consistent usage amount in exchange for discounted rates. Note that the recommendations from Trusted Advisor are generic recommendations and not specific to EKS.","title":"Use AWS Trusted Advisor"},{"location":"cost_optimization/awareness/#use-the-kubernetes-dashboard","text":"Kubernetes dashboard Kubernetes Dashboard is a general purpose, web-based UI for Kubernetes clusters, which provides information about the Kubernetes cluster including the resource usage at a cluster, node and pod level. The deployment of the Kubernetes dashboard on an Amazon EKS cluster is described in the Amazon EKS documentation . Dashboard provides resource usage breakdowns for each node and pod, as well as detailed metadata about pods, services, Deployments, and other Kubernetes objects. This consolidated information provides visibility into your Kubernetes environment. kubectl top and describe commands Viewing resource usage metrics with kubectl top and kubectl describe commands. kubectl top will show current CPU and memory usage for the pods or nodes across your cluster, or for a specific pod or node. The kubectl describe command will give more detailed information about a specific node or a pod. $ kubectl top pods $ kubectl top nodes $ kubectl top pod pod-name --namespace mynamespace --containers Using the top command, the output will displays the total amount of CPU (in cores) and memory (in MiB) that the node is using, and the percentages of the node\u2019s allocatable capacity those numbers represent. You can then drill-down to the next level, container level within pods by adding a --containers flag. $ kubectl describe node <node> $ kubectl describe pod <pod> kubectl describe returns the percent of total available capacity that each resource request or limit represents. kubectl top and describe, track the utilization and availability of critical resources such as CPU, memory, and storage across kubernetes pods, nodes and containers. This awareness will help in understanding resource usage and help in controlling costs.","title":"Use the Kubernetes dashboard"},{"location":"cost_optimization/awareness/#use-cloudwatch-container-insights","text":"Use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices. Container Insights is available for Amazon Elastic Kubernetes Service on EC2, and Kubernetes platforms on Amazon EC2. The metrics include utilization for resources such as CPU, memory, disk, and network. The installation of insights is given in the documentation . CloudWatch creates aggregated metrics at the cluster, node, pod, task, and service level as CloudWatch metrics. The following query shows a list of nodes, sorted by average node CPU utilization STATS avg(node_cpu_utilization) as avg_node_cpu_utilization by NodeName | SORT avg_node_cpu_utilization DESC CPU usage by Container name stats pct(container_cpu_usage_total, 50) as CPUPercMedian by kubernetes.container_name | filter Type=\"Container\" Disk usage by Container name stats floor(avg(container_filesystem_usage/1024)) as container_filesystem_usage_avg_kb by InstanceId, kubernetes.container_name, device | filter Type=\"ContainerFS\" | sort container_filesystem_usage_avg_kb desc More sample queries are given in the Container Insights documention This awareness will help in understanding resource usage and help in controlling costs.","title":"Use CloudWatch Container Insights"},{"location":"cost_optimization/awareness/#using-kubecost-for-expenditure-awareness-and-guidance","text":"Third party tools like kubecost can also be deployed on Amazon EKS to get visibility into cost of running your Kubernetes cluster. Please refer to this AWS blog for tracking costs using Kubecost Deploying kubecost using Helm 3: $ curl - sSL https: // raw . githubusercontent . com / helm / helm / master / scripts / get-helm-3 | bash $ helm version -- short v3 .2.1 + gfe51cd1 $ helm repo add stable https: // kubernetes-charts . storage . googleapis . com / $ helm repo add stable https: // kubernetes-charts . storage . googleapis . com / c ^ C $ kubectl create namespace kubecost namespace / kubecost created $ helm repo add kubecost https: // kubecost . github . io / cost-analyzer / \"kubecost\" has been added to your repositories $ helm install kubecost kubecost / cost-analyzer -- namespace kubecost -- set kubecostToken = \"aGRoZEBqc2pzLmNvbQ==xm343yadf98\" NAME: kubecost LAST DEPLOYED: Mon May 18 08 : 49 : 05 2020 NAMESPACE: kubecost STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: -------------------------------------------------- Kubecost has been successfully installed . When pods are Ready , you can enable port-forwarding with the following command: kubectl port-forward -- namespace kubecost deployment / kubecost-cost-analyzer 9090 Next , navigate to http: // localhost:9090 in a web browser . $ kubectl port-forward -- namespace kubecost deployment / kubecost-cost-analyzer 9090 Note: If you are using Cloud 9 or have a need to forward it to a different port like 8080 , issue the following command $ kubectl port-forward -- namespace kubecost deployment / kubecost-cost-analyzer 8080 : 9090 Kube Cost Dashboard -","title":"Using KubeCost for expenditure awareness and guidance"},{"location":"cost_optimization/awareness/#use-kubernetes-cost-allocation-and-capacity-planning-analytics-tool","text":"Kubernetes Opex Analytics is a tool to help organizations track the resources being consumed by their Kubernetes clusters to prevent overpaying. To do so it generates, short- (7 days), mid- (14 days) and long-term (12 months) usage reports showing relevant insights on what amount of resources each project is spending over time.","title":"Use Kubernetes Cost Allocation and Capacity Planning Analytics Tool"},{"location":"cost_optimization/awareness/#magalix-kubeadvisor","text":"KubeAdvisor continuously scans your Kubernetes clusters and reports how you can fix issues, apply best practices, and optimize your cluster (with recommendations of resources like CPU/Memory around cost-efficiency).","title":"Magalix Kubeadvisor"},{"location":"cost_optimization/awareness/#spotio-previously-called-spotinst","text":"Spotinst Ocean is an application scaling service. Similar to Amazon Elastic Compute Cloud (Amazon EC2) Auto Scaling groups, Spotinst Ocean is designed to optimize performance and costs by leveraging Spot Instances combined with On-Demand and Reserved Instances. Using a combination of automated Spot Instance management and the variety of instance sizes, the Ocean cluster autoscaler scales according to the pod resource requirements. Spotinst Ocean also includes a prediction algorithm to predict Spot Instance interruption 15 minutes ahead of time and spin up a new node in a different Spot capacity pool. This is available as an AWS Quickstart developed by Spotinst, Inc. in collaboration with AWS. The EKS workshop also has a module on Optimized Worker Node on Amazon EKS Management with Ocean by Spot.io which includes sections on cost allocation, right sizing and scaling strategies.","title":"Spot.io, previously called Spotinst"},{"location":"cost_optimization/awareness/#yotascale","text":"Yotascale helps with accurately allocating Kubernetes costs. Yotascale Kubernetes Cost Allocation feature utilizes actual cost data, which is inclusive of Reserved Instance discounts and spot instance pricing instead of generic market-rate estimations, to inform the total Kubernetes cost footprint More details can be found at their website .","title":"Yotascale"},{"location":"cost_optimization/awareness/#alcide-advisor","text":"Alcide is an AWS Partner Network (APN) Advanced Technology Partner. Alcide Advisor helps ensure your Amazon EKS cluster, nodes, and pods configuration are tuned to run according to security best practices and internal guidelines. Alcide Advisor is an agentless service for Kubernetes audit and compliance that\u2019s built to ensure a frictionless and secured DevSecOps flow by hardening the development stage before moving to production. More details can be found in this blog post .","title":"Alcide Advisor"},{"location":"cost_optimization/awareness/#other-tools","text":"","title":"Other tools"},{"location":"cost_optimization/awareness/#kubernetes-garbage-collection","text":"The role of the Kubernetes garbage collector is to delete certain objects that once had an owner, but no longer have an owner.","title":"Kubernetes Garbage Collection"},{"location":"cost_optimization/awareness/#fargate-count","text":"Fargatecount is an useful tool, which allows AWS customers to track, with a custom CloudWatch metric, the total number of EKS pods that have been deployed on Fargate in a specific region of a specific account. This helps in keeping track of all the Fargate pods running across an EKS cluster.","title":"Fargate count"},{"location":"cost_optimization/awareness/#kubernetes-ops-view","text":"Kube Ops View is an useful tool, which provides a common operational picture visually for multiple Kubernetes clusters. git clone https://github.com/hjacobs/kube-ops-view cd kube-ops-view kubectl apply -k deploy/","title":"Kubernetes Ops View"},{"location":"cost_optimization/awareness/#popeye-a-kubernetes-cluster-sanitizer","text":"Popeye - A Kubernetes Cluster Sanitizer is a utility that scans live Kubernetes cluster and reports potential issues with deployed resources and configurations. It sanitizes your cluster based on what's deployed and not what's sitting on disk. By scanning your cluster, it detects misconfigurations and helps you to ensure that best practices are in place","title":"Popeye - A Kubernetes Cluster Sanitizer"},{"location":"cost_optimization/awareness/#resources","text":"Refer to the following resources to learn more about best practices for cost optimization. Documentation and Blogs + Amazon EKS supports tagging Tools + What is AWS Billing and Cost Management? + Amazon CloudWatch Container Insights + How to track costs in multi-tenant Amazon EKS clusters using Kubecost + Kube Cost + Kube Opsview + Kube Janitor + Kubernetes Opex Analytics","title":"Resources"},{"location":"cost_optimization/cost-effective/","text":"Cost-effective resources \u00b6 Cost Effective resources means using the appropriate services, resources, and configurations for your workloads running on a Kubernetes cluster, which will result in cost savings. Recommendations \u00b6 Ensure that the infrastructure used to deploy the containerized service matches the application profile and scaling needs \u00b6 There are several types of Kubernetes autoscaling supported in Amazon EKS - Cluster Autoscaler , Horizontal Pod Autoscaler and Vertical Pod Autoscaler . This section covers two of them, Cluster Auto Scaler and Horizontal Pod Autoscaler. Use Cluster Autoscaler to adjust the size of a Kubernetes cluster to meet the current needs \u00b6 The Kubernetes Cluster Autoscaler automatically adjusts the number of nodes in the EKS cluster when pods fail to launch due to lack of resources or when nodes in the cluster are underutilized and their pods can be rescheduled onto other nodes in the cluster. The Cluster Autoscaler scales worker nodes within any specified Auto Scaling group and runs as a deployment in your EKS cluster. Amazon EKS with EC2 managed node groups automate the provisioning and lifecycle management of nodes (Amazon EC2 instances) for Amazon EKS Kubernetes clusters. All managed nodes are provisioned as part of an Amazon EC2 Auto Scaling group that is managed for you by Amazon EKS and all resources including Amazon EC2 instances and Auto Scaling groups run within your AWS account. Amazon EKS tags managed node group resources so that they can be discovered the Kubernetes Cluster Autoscaler. The documentation at https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html provides detailed guidance on setting up a Managed Node Group and then deploying Kubernetes Cluster Auto Scaler. If you are running a stateful application across multiple Availability Zones that is backed by Amazon EBS volumes and using the Kubernetes Cluster Autoscaler, you should configure multiple node groups, each scoped to a single Availability Zone. Cluster Autoscaler logs for EC2 based Worker Nodes - When a pod cannot be scheduled due to lack of available resources, Cluster Autoscaler determines that the cluster must scale out and increases the size of the node group. When multiple node groups are used, Cluster Autoscaler chooses one based on the Expander configuration. Currently, the following strategies are supported in EKS: + random - default expander, selects the instance group randomly + most-pods - selects the instance group that schedules the most amount of pods. + least-waste - selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources. + priority - selects the node group that has the highest priority assigned by the user You can use the random placement strategy for the Expander in Cluster Autoscaler, if EC2 Spot instances are being used as worker nodes. This is the default expander, and arbitrarily chooses a node-group when the cluster must scale out. The random expander maximizes your ability to leverage multiple Spot capacity pools. Priority based expander selects an expansion option based on priorities assigned by a user to scaling groups. Sample priorities can be to let Autoscaler first try to scale out a spot instance node group and then, if it cannot, falls back to scaling out an on-demand node group. most-pods based expander is useful when you are using nodeSelector to make sure certain pods land on certain nodes. From the documentation to specify least-waste as the expander type for the Cluster Autoscaling configuration: spec: containers: - command: - ./cluster-autoscaler - --v=4 - --stderrthreshold=info - --cloud-provider=aws - --skip-nodes-with-local-storage=false - --expander=least-waste - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/<YOUR CLUSTER NAME> - --balance-similar-node-groups - --skip-nodes-with-system-pods=false Deploy Horizontal Pod Autoscaling to automatically scales the number of pods in a deployment, replication controller, or replica set based on that resource's CPU utilization or other application related metrics \u00b6 The Kubernetes Horizontal Pod Autoscaler automatically scales the number of pods in a deployment, replication controller, or replica set based on resource metrics like CPU utilization or with custom metrics support, on some other application-provided metrics. This can help your applications scale out to meet increased demand or scale in when resources are not needed, thus freeing up your worker nodes for other applications. When you set a target metric utilization percentage, the Horizontal Pod Autoscaler scales your application in or out to try to meet that target. The k8s-cloudwatch-adapter is an implementation of the Kubernetes Custom Metrics API and External Metrics API with integration for CloudWatch metrics. It allows you to scale your Kubernetes deployment using the Horizontal Pod Autoscaler (HPA) with CloudWatch metrics. For an example of scaling using a resource metric like CPU, follow https://eksworkshop.com/beginner/080_scaling/test_hpa/ to deploy a sample app, perform a simple load test to test the autoscaling of pod and simulate pod autoscaling. Refer to this blog for an example of a custom metric for an application to scale according to the number of messages in the Amazon SQS (Simple Queue Service) queue. An example of an external metric from Amazon SQS from the blog: apiVersion : metrics.aws/v1alpha1 kind : ExternalMetric : metadata : name : hello-queue-length spec : name : hello-queue-length resource : resource : \"deployment\" queries : - id : sqs_helloworld metricStat : metric : namespace : \"AWS/SQS\" metricName : \"ApproximateNumberOfMessagesVisible\" dimensions : - name : QueueName value : \"helloworld\" period : 300 stat : Average unit : Count returnData : true An example of an HPA utilizing this external metric: kind : HorizontalPodAutoscaler apiVersion : autoscaling/v2beta1 metadata : name : sqs-consumer-scaler spec : scaleTargetRef : apiVersion : apps/v1beta1 kind : Deployment name : sqs-consumer minReplicas : 1 maxReplicas : 10 metrics : - type : External external : metricName : hello-queue-length targetAverageValue : 30 The combination of Cluster Auto Scaler for the Kubernetes worker nodes and Horizontal Pod Autoscaler for the pods, will ensure that the provisioned resources will be as close to the actual utilization as possible. (Image source: https://aws.amazon.com/blogs/containers/cost-optimization-for-kubernetes-on-aws/) Amazon EKS with Fargate *Horizontal Pod Autoscaling of Pods * Autoscaling EKS on Fargate can be done using the following mechanisms: Using the Kubernetes metrics server and configure auto-scaling based on CPU and/or memory usage. Configure autoscaling based on custom metrics like HTTP traffic using Prometheus and Prometheus metrics adapter Configure autoscaling based on App Mesh traffic The above scenarios are explained in a hands-on blog on \"Autoscaling EKS on Fargate with custom metrics *Vertical Pod Autoscaling * Use the Vertical Pod Autoscaler with pods running on Fargate to optimize the CPU and memory used for your applications. However, because changing the resource allocation for a pod requires the pod to be restarted, you must set the pod update policy to either Auto or Recreate to ensure correct functionality. Recommendations \u00b6 Use Down Scaling to scale down Kubernetes Deployments, StatefulSets, and/or HorizontalPodAutoscalers during non-work hours. \u00b6 As part of controlling costs Down-Scaling resources that are not in-use can also have an huge impact on the overall costs. There are tools like kube-downscaler and Descheduler for Kubernetes . Kube-descaler , can be used to Scale down Kubernetes deployments after work hours or during set periods of time. Descheduler for Kubernetes , based on its policy, can find pods that can be moved and evicts them. In its current implementation, the kubernetes descheduler does not reschedule evicted pods but relies on the default scheduler for that Kube-descaler Installation of kube-downscaler : git clone https://github.com/hjacobs/kube-downscaler cd kube-downscaler kubectl apply -k deploy/ The example configuration uses the --dry-run as a safety flag to prevent downscaling --- remove it to enable the downscaler, e.g. by editing the deployment: $ kubectl edit deploy kube-downscaler Deploy an nginx pod and schedule it to be run in the time zone - Mon-Fri 09:00-17:00 Asia/Kolkata: $ kubectl run nginx1 --image = nginx $ kubectl annotate deploy nginx1 'downscaler/uptime=Mon-Fri 09:00-17:00 Asia/Kolkata' Note The default grace period of 15 minutes applies to the new nginx deployment, i.e. if the current time is not within Mon-Fri 9-17 (Asia/Kolkata timezone), it will downscale not immediately, but after 15 minutes. More advanced downscaling deployment scenarios are available at the kube-down-scaler github project . Kubernetes descheduler The descheduler can be run as a Job or CronJob inside of a k8s cluster. Descheduler's policy is configurable and includes strategies that can be enabled or disabled. Seven strategies RemoveDuplicates , LowNodeUtilization , RemovePodsViolatingInterPodAntiAffinity , RemovePodsViolatingNodeAffinity , RemovePodsViolatingNodeTaints , RemovePodsHavingTooManyRestarts , and PodLifeTime are currently implemented. More details can be found in their documentation . A sample policy, which has the descheduler enabled for lowcpuutilization of nodes (where it covers the scenarios for both underutilized and overutilized), removing pods for too many restarts and others : apiVersion : \"descheduler/v1alpha1\" kind : \"DeschedulerPolicy\" strategies : \"RemoveDuplicates\" : enabled : true \"RemovePodsViolatingInterPodAntiAffinity\" : enabled : true \"LowNodeUtilization\" : enabled : true params : nodeResourceUtilizationThresholds : thresholds : \"cpu\" : 20 \"memory\" : 20 \"pods\" : 20 targetThresholds : \"cpu\" : 50 \"memory\" : 50 \"pods\" : 50 \"RemovePodsHavingTooManyRestarts\" : enabled : true params : podsHavingTooManyRestarts : podRestartThresholds : 100 includingInitContainers : true Cluster Turndown Cluster Turndown is an automated scaledown and scaleup of a Kubernetes cluster's backing nodes based on a custom schedule and turndown criteria. This feature can be used to reduce spend during down hours and/or reduce surface area for security reasons. The most common use case is to scale non-prod environments (e.g. dev clusters) to zero during off hours. Cluster Turndown is currently in ALPHA release. Cluster Turndown uses a Kubernetes Custom Resource Definition to create schedules. The following schedule will create a schedule that starts by turning down at the designated start date-time and turning back up at the designated end date-time (times should be in RFC3339 format, i.e. times based on offsets to UTC). apiVersion : kubecost.k8s.io/v1alpha1 kind : TurndownSchedule metadata : name : example-schedule finalizers : - \"finalizer.kubecost.k8s.io\" spec : start : 2020-03-12T00:00:00Z end : 2020-03-12T12:00:00Z repeat : daily Use LimitRanges and Resource Quotas to help manage costs by constraining the amount of resources allocated at an Namespace level \u00b6 By default, containers run with unbounded compute resources on a Kubernetes cluster. With resource quotas, cluster administrators can restrict resource consumption and creation on a namespace basis. Within a namespace, a Pod or Container can consume as much CPU and memory as defined by the namespace\u2019s resource quota. There is a concern that one Pod or Container could monopolize all available resources. Kubernetes controls the allocation of resources such as CPU, memory, PersistentVolumeClaims and others using Resource Quotas and Limit Ranges. ResourceQuota is at the Namespace level, while a LimitRange applies at an container level. Limit Ranges A LimitRange is a policy to constrain resource allocations (to Pods or Containers) in a namespace. The following is an example of setting an default memory request and a default memory limit using Limit Range. apiVersion : v1 kind : LimitRange metadata : name : mem-limit-range spec : limits : - default : memory : 512Mi defaultRequest : memory : 256Mi type : Container More examples are available in the Kubernetes documentation . Resource Quotas When several users or teams share a cluster with a fixed number of nodes, there is a concern that one team could use more than its fair share of resources. Resource quotas are a tool for administrators to address this concern. The following is an example of how to set quotas for the total amount memory and CPU that can be used by all Containers running in a namespace, by specifying quotas in a ResourceQuota object. This specifies that a Container must have a memory request, memory limit, cpu request, and cpu limit, and should not exceed the threshold set in the ResourceQuota. apiVersion : v1 kind : ResourceQuota metadata : name : mem-cpu-demo spec : hard : requests.cpu : \"1\" requests.memory : 1Gi limits.cpu : \"2\" limits.memory : 2Gi More examples are available in the Kubernetes documentation . Use pricing models for effective utilization \u00b6 The pricing details for Amazon EKS are given in the pricing page . There is a common control plane cost for both Amazon EKS on Fargate and EC2. If you are using AWS Fargate, pricing is calculated based on the vCPU and memory resources used from the time you start to download your container image until the Amazon EKS pod terminates, rounded up to the nearest second. A minimum charge of 1 minute applies. See detailed pricing information on the AWS Fargate pricing page . Amazon EKS on EC2: Amazon EC2 provides a wide selection of instance types optimized to fit different use cases. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity and give you the flexibility to choose the appropriate mix of resources for your applications. Each instance type includes one or more instance sizes, allowing you to scale your resources to the requirements of your target workload. One of the key decision parameters apart from number of CPUs, memory, processor family type related to the instance type is the number of Elastic network interfaces(ENI's) , which in-turn has a bearing on the maximum number of pods you can run on that EC2 Instance. The list of max pods per EC2 Instance type is maintained in a github. *On-Demand EC2 Instances: * With On-Demand instances , you pay for compute capacity by the hour or the second depending on which instances you run. No longer-term commitments or upfront payments are needed. Amazon EC2 A1 instances deliver significant cost savings and are ideally suited for scale-out and ARM-based workloads that are supported by the extensive Arm ecosystem. You can now use Amazon Elastic Container Service for Kubernetes (EKS) to run containers on Amazon EC2 A1 Instances as part of a public developer preview . Amazon ECR now supports multi-architecture container images , which makes it simpler to deploy container images for different architectures and operating systems from the same image repository. You can use the AWS Simple Monthly Calculator or the new pricing calculator to get pricing for the On-Demand EC2 instances for the EKS workder nodes. Use Spot EC2 Instances: \u00b6 Amazon EC2 Spot instances allow you to request spare Amazon EC2 computing capacity for up to 90% off the On-Demand price. Spot Instances are often a great fit for stateless containerized workloads because the approach to containers and Spot Instances are similar; ephemeral and autoscaled capacity. This means they both can be added and removed while adhering to SLAs and without impacting the performance or availability of your applications. You can create multiple nodegroups with a mix of on-demand instance types and EC2 Spot instances to leverage the advantages of pricing between these two instance types. (Image source: https://ec2spotworkshops.com/using_ec2_spot_instances_with_eks/spotworkers/workers_eksctl.html) A sample yaml file for eksctl to create a nodegroup with EC2 spot instances is given below. During the creation of the Node Group, we have configured a node-label so that kubernetes knows what type of nodes we have provisioned. We set the lifecycle for the nodes as Ec2Spot. We are also tainting with PreferNoSchedule to prefer pods not be scheduled on Spot Instances. This is a \u201cpreference\u201d or \u201csoft\u201d version of NoSchedule, i.e. the system will try to avoid placing a pod that does not tolerate the taint on the node, but it is not required. We are using this technique to make sure that only the right type of workloads are scheduled on Spot Instances. apiVersion : eksctl.io/v1alpha5 kind : ClusterConfig metadata : name : my-cluster-testscaling region : us-west-2 nodeGroups : - name : ng-spot labels : lifecycle : Ec2Spot taints : spotInstance : true:PreferNoSchedule minSize : 2 maxSize : 5 instancesDistribution : # At least two instance types should be specified instanceTypes : - m4.large - c4.large - c5.large onDemandBaseCapacity : 0 onDemandPercentageAboveBaseCapacity : 0 # all the instances will be spot instances spotInstancePools : 2 Use the node-labels to identify the lifecycle of the nodes. $ kubectl get nodes --label-columns = lifecycle --selector = lifecycle = Ec2Spot We should also deploy the AWS Node Termination Handler on each Spot Instance. This will monitor the EC2 metadata service on the instance for an interruption notice. The termination handler consists of a ServiceAccount, ClusterRole, ClusterRoleBinding, and a DaemonSet. AWS Node Termination Handler is not only for Spot Instances, it can also catch general EC2 maintenance events, so it can be used across all the worker nodes in the cluster. If a customer is well diversified and uses the capacity-optimized allocation strategy, Spot Instances will be available. You can use Node Affinity in your manifest file to configure this, to prefer Spot Instances, but not require them. This would allow the pods to be scheduled on On-Demand nodes if no spot instances were available or correctly labelled. affinity : nodeAffinity : preferredDuringSchedulingIgnoredDuringExecution : - weight : 1 preference : matchExpressions : - key : lifecycle operator : In values : - Ec2Spot tolerations : - key : \"spotInstance\" operator : \"Equal\" value : \"true\" effect : \"PreferNoSchedule\" You can do a complete workshop with EC2 spot instances at the online EC2 Spot Workshop . Use Compute Savings Plan \u00b6 Compute Savings Plans, a flexible discount model that provides you with the same discounts as Reserved Instances, in exchange for a commitment to use a specific amount (measured in dollars per hour) of compute power over a one or three year period. The details are covered in the Savings Plan launch FAQ .The plans automatically apply to any EC2 worker node regardless of region, instance family, operating system, or tenancy, including those that are part of EKS clusters. For example, you can shift from C4 to C5 instances, move a workload from Dublin to London benefiting from Savings Plan prices along the way, without having to do anything. The AWS Cost Explorer will help you to choose a Savings Plan, and will guide you through the purchase process. Note - The compute savings plans now also applies to AWS Fargate for AWS Elastic Kubernetes Service (EKS) . Note - The above pricing does not include the other AWS services like Data transfer charges, CloudWatch, Elastic Load Balancer and other AWS services that may be used by the Kubernetes applications. Resources \u00b6 Refer to the following resources to learn more about best practices for cost optimization. Videos \u00b6 AWS re:Invent 2019: Save up to 90% and run production workloads on Spot Instances (CMP331-R1) Documentation and Blogs \u00b6 Cost optimization for Kubernetes on AWS Building for Cost optimization and Resilience for EKS with Spot Instances Autoscaling EKS on Fargate with custom metrics AWS Fargate considerations Using Spot Instances with EKS Extending the EKS API: Managed Node Groups Autoscaling with Amazon EKS Amazon EKS pricing AWS Fargate pricing Savings Plan Saving Cloud Costs with Kubernetes on AWS Tools \u00b6 Kube downscaler Kubernetes Descheduler Cluster TurnDown","title":"Cost-effective resources"},{"location":"cost_optimization/cost-effective/#cost-effective-resources","text":"Cost Effective resources means using the appropriate services, resources, and configurations for your workloads running on a Kubernetes cluster, which will result in cost savings.","title":"Cost-effective resources"},{"location":"cost_optimization/cost-effective/#recommendations","text":"","title":"Recommendations"},{"location":"cost_optimization/cost-effective/#ensure-that-the-infrastructure-used-to-deploy-the-containerized-service-matches-the-application-profile-and-scaling-needs","text":"There are several types of Kubernetes autoscaling supported in Amazon EKS - Cluster Autoscaler , Horizontal Pod Autoscaler and Vertical Pod Autoscaler . This section covers two of them, Cluster Auto Scaler and Horizontal Pod Autoscaler.","title":"Ensure that the infrastructure used to deploy the containerized service matches the application profile and scaling needs"},{"location":"cost_optimization/cost-effective/#use-cluster-autoscaler-to-adjust-the-size-of-a-kubernetes-cluster-to-meet-the-current-needs","text":"The Kubernetes Cluster Autoscaler automatically adjusts the number of nodes in the EKS cluster when pods fail to launch due to lack of resources or when nodes in the cluster are underutilized and their pods can be rescheduled onto other nodes in the cluster. The Cluster Autoscaler scales worker nodes within any specified Auto Scaling group and runs as a deployment in your EKS cluster. Amazon EKS with EC2 managed node groups automate the provisioning and lifecycle management of nodes (Amazon EC2 instances) for Amazon EKS Kubernetes clusters. All managed nodes are provisioned as part of an Amazon EC2 Auto Scaling group that is managed for you by Amazon EKS and all resources including Amazon EC2 instances and Auto Scaling groups run within your AWS account. Amazon EKS tags managed node group resources so that they can be discovered the Kubernetes Cluster Autoscaler. The documentation at https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html provides detailed guidance on setting up a Managed Node Group and then deploying Kubernetes Cluster Auto Scaler. If you are running a stateful application across multiple Availability Zones that is backed by Amazon EBS volumes and using the Kubernetes Cluster Autoscaler, you should configure multiple node groups, each scoped to a single Availability Zone. Cluster Autoscaler logs for EC2 based Worker Nodes - When a pod cannot be scheduled due to lack of available resources, Cluster Autoscaler determines that the cluster must scale out and increases the size of the node group. When multiple node groups are used, Cluster Autoscaler chooses one based on the Expander configuration. Currently, the following strategies are supported in EKS: + random - default expander, selects the instance group randomly + most-pods - selects the instance group that schedules the most amount of pods. + least-waste - selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources. + priority - selects the node group that has the highest priority assigned by the user You can use the random placement strategy for the Expander in Cluster Autoscaler, if EC2 Spot instances are being used as worker nodes. This is the default expander, and arbitrarily chooses a node-group when the cluster must scale out. The random expander maximizes your ability to leverage multiple Spot capacity pools. Priority based expander selects an expansion option based on priorities assigned by a user to scaling groups. Sample priorities can be to let Autoscaler first try to scale out a spot instance node group and then, if it cannot, falls back to scaling out an on-demand node group. most-pods based expander is useful when you are using nodeSelector to make sure certain pods land on certain nodes. From the documentation to specify least-waste as the expander type for the Cluster Autoscaling configuration: spec: containers: - command: - ./cluster-autoscaler - --v=4 - --stderrthreshold=info - --cloud-provider=aws - --skip-nodes-with-local-storage=false - --expander=least-waste - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/<YOUR CLUSTER NAME> - --balance-similar-node-groups - --skip-nodes-with-system-pods=false","title":"Use Cluster Autoscaler to adjust the size of a Kubernetes cluster to meet the current needs"},{"location":"cost_optimization/cost-effective/#deploy-horizontal-pod-autoscaling-to-automatically-scales-the-number-of-pods-in-a-deployment-replication-controller-or-replica-set-based-on-that-resources-cpu-utilization-or-other-application-related-metrics","text":"The Kubernetes Horizontal Pod Autoscaler automatically scales the number of pods in a deployment, replication controller, or replica set based on resource metrics like CPU utilization or with custom metrics support, on some other application-provided metrics. This can help your applications scale out to meet increased demand or scale in when resources are not needed, thus freeing up your worker nodes for other applications. When you set a target metric utilization percentage, the Horizontal Pod Autoscaler scales your application in or out to try to meet that target. The k8s-cloudwatch-adapter is an implementation of the Kubernetes Custom Metrics API and External Metrics API with integration for CloudWatch metrics. It allows you to scale your Kubernetes deployment using the Horizontal Pod Autoscaler (HPA) with CloudWatch metrics. For an example of scaling using a resource metric like CPU, follow https://eksworkshop.com/beginner/080_scaling/test_hpa/ to deploy a sample app, perform a simple load test to test the autoscaling of pod and simulate pod autoscaling. Refer to this blog for an example of a custom metric for an application to scale according to the number of messages in the Amazon SQS (Simple Queue Service) queue. An example of an external metric from Amazon SQS from the blog: apiVersion : metrics.aws/v1alpha1 kind : ExternalMetric : metadata : name : hello-queue-length spec : name : hello-queue-length resource : resource : \"deployment\" queries : - id : sqs_helloworld metricStat : metric : namespace : \"AWS/SQS\" metricName : \"ApproximateNumberOfMessagesVisible\" dimensions : - name : QueueName value : \"helloworld\" period : 300 stat : Average unit : Count returnData : true An example of an HPA utilizing this external metric: kind : HorizontalPodAutoscaler apiVersion : autoscaling/v2beta1 metadata : name : sqs-consumer-scaler spec : scaleTargetRef : apiVersion : apps/v1beta1 kind : Deployment name : sqs-consumer minReplicas : 1 maxReplicas : 10 metrics : - type : External external : metricName : hello-queue-length targetAverageValue : 30 The combination of Cluster Auto Scaler for the Kubernetes worker nodes and Horizontal Pod Autoscaler for the pods, will ensure that the provisioned resources will be as close to the actual utilization as possible. (Image source: https://aws.amazon.com/blogs/containers/cost-optimization-for-kubernetes-on-aws/) Amazon EKS with Fargate *Horizontal Pod Autoscaling of Pods * Autoscaling EKS on Fargate can be done using the following mechanisms: Using the Kubernetes metrics server and configure auto-scaling based on CPU and/or memory usage. Configure autoscaling based on custom metrics like HTTP traffic using Prometheus and Prometheus metrics adapter Configure autoscaling based on App Mesh traffic The above scenarios are explained in a hands-on blog on \"Autoscaling EKS on Fargate with custom metrics *Vertical Pod Autoscaling * Use the Vertical Pod Autoscaler with pods running on Fargate to optimize the CPU and memory used for your applications. However, because changing the resource allocation for a pod requires the pod to be restarted, you must set the pod update policy to either Auto or Recreate to ensure correct functionality.","title":"Deploy Horizontal Pod Autoscaling to automatically scales the number of pods in a deployment, replication controller, or replica set based on that resource's CPU utilization or other application related metrics"},{"location":"cost_optimization/cost-effective/#recommendations_1","text":"","title":"Recommendations"},{"location":"cost_optimization/cost-effective/#use-down-scaling-to-scale-down-kubernetes-deployments-statefulsets-andor-horizontalpodautoscalers-during-non-work-hours","text":"As part of controlling costs Down-Scaling resources that are not in-use can also have an huge impact on the overall costs. There are tools like kube-downscaler and Descheduler for Kubernetes . Kube-descaler , can be used to Scale down Kubernetes deployments after work hours or during set periods of time. Descheduler for Kubernetes , based on its policy, can find pods that can be moved and evicts them. In its current implementation, the kubernetes descheduler does not reschedule evicted pods but relies on the default scheduler for that Kube-descaler Installation of kube-downscaler : git clone https://github.com/hjacobs/kube-downscaler cd kube-downscaler kubectl apply -k deploy/ The example configuration uses the --dry-run as a safety flag to prevent downscaling --- remove it to enable the downscaler, e.g. by editing the deployment: $ kubectl edit deploy kube-downscaler Deploy an nginx pod and schedule it to be run in the time zone - Mon-Fri 09:00-17:00 Asia/Kolkata: $ kubectl run nginx1 --image = nginx $ kubectl annotate deploy nginx1 'downscaler/uptime=Mon-Fri 09:00-17:00 Asia/Kolkata' Note The default grace period of 15 minutes applies to the new nginx deployment, i.e. if the current time is not within Mon-Fri 9-17 (Asia/Kolkata timezone), it will downscale not immediately, but after 15 minutes. More advanced downscaling deployment scenarios are available at the kube-down-scaler github project . Kubernetes descheduler The descheduler can be run as a Job or CronJob inside of a k8s cluster. Descheduler's policy is configurable and includes strategies that can be enabled or disabled. Seven strategies RemoveDuplicates , LowNodeUtilization , RemovePodsViolatingInterPodAntiAffinity , RemovePodsViolatingNodeAffinity , RemovePodsViolatingNodeTaints , RemovePodsHavingTooManyRestarts , and PodLifeTime are currently implemented. More details can be found in their documentation . A sample policy, which has the descheduler enabled for lowcpuutilization of nodes (where it covers the scenarios for both underutilized and overutilized), removing pods for too many restarts and others : apiVersion : \"descheduler/v1alpha1\" kind : \"DeschedulerPolicy\" strategies : \"RemoveDuplicates\" : enabled : true \"RemovePodsViolatingInterPodAntiAffinity\" : enabled : true \"LowNodeUtilization\" : enabled : true params : nodeResourceUtilizationThresholds : thresholds : \"cpu\" : 20 \"memory\" : 20 \"pods\" : 20 targetThresholds : \"cpu\" : 50 \"memory\" : 50 \"pods\" : 50 \"RemovePodsHavingTooManyRestarts\" : enabled : true params : podsHavingTooManyRestarts : podRestartThresholds : 100 includingInitContainers : true Cluster Turndown Cluster Turndown is an automated scaledown and scaleup of a Kubernetes cluster's backing nodes based on a custom schedule and turndown criteria. This feature can be used to reduce spend during down hours and/or reduce surface area for security reasons. The most common use case is to scale non-prod environments (e.g. dev clusters) to zero during off hours. Cluster Turndown is currently in ALPHA release. Cluster Turndown uses a Kubernetes Custom Resource Definition to create schedules. The following schedule will create a schedule that starts by turning down at the designated start date-time and turning back up at the designated end date-time (times should be in RFC3339 format, i.e. times based on offsets to UTC). apiVersion : kubecost.k8s.io/v1alpha1 kind : TurndownSchedule metadata : name : example-schedule finalizers : - \"finalizer.kubecost.k8s.io\" spec : start : 2020-03-12T00:00:00Z end : 2020-03-12T12:00:00Z repeat : daily","title":"Use Down Scaling to scale down Kubernetes Deployments, StatefulSets, and/or HorizontalPodAutoscalers during non-work hours."},{"location":"cost_optimization/cost-effective/#use-limitranges-and-resource-quotas-to-help-manage-costs-by-constraining-the-amount-of-resources-allocated-at-an-namespace-level","text":"By default, containers run with unbounded compute resources on a Kubernetes cluster. With resource quotas, cluster administrators can restrict resource consumption and creation on a namespace basis. Within a namespace, a Pod or Container can consume as much CPU and memory as defined by the namespace\u2019s resource quota. There is a concern that one Pod or Container could monopolize all available resources. Kubernetes controls the allocation of resources such as CPU, memory, PersistentVolumeClaims and others using Resource Quotas and Limit Ranges. ResourceQuota is at the Namespace level, while a LimitRange applies at an container level. Limit Ranges A LimitRange is a policy to constrain resource allocations (to Pods or Containers) in a namespace. The following is an example of setting an default memory request and a default memory limit using Limit Range. apiVersion : v1 kind : LimitRange metadata : name : mem-limit-range spec : limits : - default : memory : 512Mi defaultRequest : memory : 256Mi type : Container More examples are available in the Kubernetes documentation . Resource Quotas When several users or teams share a cluster with a fixed number of nodes, there is a concern that one team could use more than its fair share of resources. Resource quotas are a tool for administrators to address this concern. The following is an example of how to set quotas for the total amount memory and CPU that can be used by all Containers running in a namespace, by specifying quotas in a ResourceQuota object. This specifies that a Container must have a memory request, memory limit, cpu request, and cpu limit, and should not exceed the threshold set in the ResourceQuota. apiVersion : v1 kind : ResourceQuota metadata : name : mem-cpu-demo spec : hard : requests.cpu : \"1\" requests.memory : 1Gi limits.cpu : \"2\" limits.memory : 2Gi More examples are available in the Kubernetes documentation .","title":"Use LimitRanges and Resource Quotas to help manage costs by constraining the amount of resources allocated at an Namespace level"},{"location":"cost_optimization/cost-effective/#use-pricing-models-for-effective-utilization","text":"The pricing details for Amazon EKS are given in the pricing page . There is a common control plane cost for both Amazon EKS on Fargate and EC2. If you are using AWS Fargate, pricing is calculated based on the vCPU and memory resources used from the time you start to download your container image until the Amazon EKS pod terminates, rounded up to the nearest second. A minimum charge of 1 minute applies. See detailed pricing information on the AWS Fargate pricing page . Amazon EKS on EC2: Amazon EC2 provides a wide selection of instance types optimized to fit different use cases. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity and give you the flexibility to choose the appropriate mix of resources for your applications. Each instance type includes one or more instance sizes, allowing you to scale your resources to the requirements of your target workload. One of the key decision parameters apart from number of CPUs, memory, processor family type related to the instance type is the number of Elastic network interfaces(ENI's) , which in-turn has a bearing on the maximum number of pods you can run on that EC2 Instance. The list of max pods per EC2 Instance type is maintained in a github. *On-Demand EC2 Instances: * With On-Demand instances , you pay for compute capacity by the hour or the second depending on which instances you run. No longer-term commitments or upfront payments are needed. Amazon EC2 A1 instances deliver significant cost savings and are ideally suited for scale-out and ARM-based workloads that are supported by the extensive Arm ecosystem. You can now use Amazon Elastic Container Service for Kubernetes (EKS) to run containers on Amazon EC2 A1 Instances as part of a public developer preview . Amazon ECR now supports multi-architecture container images , which makes it simpler to deploy container images for different architectures and operating systems from the same image repository. You can use the AWS Simple Monthly Calculator or the new pricing calculator to get pricing for the On-Demand EC2 instances for the EKS workder nodes.","title":"Use pricing models for effective utilization"},{"location":"cost_optimization/cost-effective/#use-spot-ec2-instances","text":"Amazon EC2 Spot instances allow you to request spare Amazon EC2 computing capacity for up to 90% off the On-Demand price. Spot Instances are often a great fit for stateless containerized workloads because the approach to containers and Spot Instances are similar; ephemeral and autoscaled capacity. This means they both can be added and removed while adhering to SLAs and without impacting the performance or availability of your applications. You can create multiple nodegroups with a mix of on-demand instance types and EC2 Spot instances to leverage the advantages of pricing between these two instance types. (Image source: https://ec2spotworkshops.com/using_ec2_spot_instances_with_eks/spotworkers/workers_eksctl.html) A sample yaml file for eksctl to create a nodegroup with EC2 spot instances is given below. During the creation of the Node Group, we have configured a node-label so that kubernetes knows what type of nodes we have provisioned. We set the lifecycle for the nodes as Ec2Spot. We are also tainting with PreferNoSchedule to prefer pods not be scheduled on Spot Instances. This is a \u201cpreference\u201d or \u201csoft\u201d version of NoSchedule, i.e. the system will try to avoid placing a pod that does not tolerate the taint on the node, but it is not required. We are using this technique to make sure that only the right type of workloads are scheduled on Spot Instances. apiVersion : eksctl.io/v1alpha5 kind : ClusterConfig metadata : name : my-cluster-testscaling region : us-west-2 nodeGroups : - name : ng-spot labels : lifecycle : Ec2Spot taints : spotInstance : true:PreferNoSchedule minSize : 2 maxSize : 5 instancesDistribution : # At least two instance types should be specified instanceTypes : - m4.large - c4.large - c5.large onDemandBaseCapacity : 0 onDemandPercentageAboveBaseCapacity : 0 # all the instances will be spot instances spotInstancePools : 2 Use the node-labels to identify the lifecycle of the nodes. $ kubectl get nodes --label-columns = lifecycle --selector = lifecycle = Ec2Spot We should also deploy the AWS Node Termination Handler on each Spot Instance. This will monitor the EC2 metadata service on the instance for an interruption notice. The termination handler consists of a ServiceAccount, ClusterRole, ClusterRoleBinding, and a DaemonSet. AWS Node Termination Handler is not only for Spot Instances, it can also catch general EC2 maintenance events, so it can be used across all the worker nodes in the cluster. If a customer is well diversified and uses the capacity-optimized allocation strategy, Spot Instances will be available. You can use Node Affinity in your manifest file to configure this, to prefer Spot Instances, but not require them. This would allow the pods to be scheduled on On-Demand nodes if no spot instances were available or correctly labelled. affinity : nodeAffinity : preferredDuringSchedulingIgnoredDuringExecution : - weight : 1 preference : matchExpressions : - key : lifecycle operator : In values : - Ec2Spot tolerations : - key : \"spotInstance\" operator : \"Equal\" value : \"true\" effect : \"PreferNoSchedule\" You can do a complete workshop with EC2 spot instances at the online EC2 Spot Workshop .","title":"Use Spot EC2 Instances:"},{"location":"cost_optimization/cost-effective/#use-compute-savings-plan","text":"Compute Savings Plans, a flexible discount model that provides you with the same discounts as Reserved Instances, in exchange for a commitment to use a specific amount (measured in dollars per hour) of compute power over a one or three year period. The details are covered in the Savings Plan launch FAQ .The plans automatically apply to any EC2 worker node regardless of region, instance family, operating system, or tenancy, including those that are part of EKS clusters. For example, you can shift from C4 to C5 instances, move a workload from Dublin to London benefiting from Savings Plan prices along the way, without having to do anything. The AWS Cost Explorer will help you to choose a Savings Plan, and will guide you through the purchase process. Note - The compute savings plans now also applies to AWS Fargate for AWS Elastic Kubernetes Service (EKS) . Note - The above pricing does not include the other AWS services like Data transfer charges, CloudWatch, Elastic Load Balancer and other AWS services that may be used by the Kubernetes applications.","title":"Use Compute Savings Plan"},{"location":"cost_optimization/cost-effective/#resources","text":"Refer to the following resources to learn more about best practices for cost optimization.","title":"Resources"},{"location":"cost_optimization/cost-effective/#videos","text":"AWS re:Invent 2019: Save up to 90% and run production workloads on Spot Instances (CMP331-R1)","title":"Videos"},{"location":"cost_optimization/cost-effective/#documentation-and-blogs","text":"Cost optimization for Kubernetes on AWS Building for Cost optimization and Resilience for EKS with Spot Instances Autoscaling EKS on Fargate with custom metrics AWS Fargate considerations Using Spot Instances with EKS Extending the EKS API: Managed Node Groups Autoscaling with Amazon EKS Amazon EKS pricing AWS Fargate pricing Savings Plan Saving Cloud Costs with Kubernetes on AWS","title":"Documentation and Blogs"},{"location":"cost_optimization/cost-effective/#tools","text":"Kube downscaler Kubernetes Descheduler Cluster TurnDown","title":"Tools"},{"location":"cost_optimization/cost_optimization_index/","text":"Amazon EKS Best Practices Guide for Cost Optimization \u00b6 Cost Optimization is achieving your business outcomes at the lowest price point. By following the documentation in this guide you will optimize your Amazon EKS workloads. General Guidelines \u00b6 In the cloud, there are a number of general guidelines that can help you achieve cost optimization of your microservices: + Ensure that workloads running on Amazon EKS are independent of specific infrastructure types for running your containers, this will give greater flexibility with regards to running them on the least expensive types of infrastructure. While using Amazon EKS with EC2, there can be exceptions when we have workloads that require specific type of EC2 Instance types like requiring a GPU or other instance types, due to the nature of the workload. + Select optimally profiled container instances \u2014 profile your production or pre-production environments and monitor critical metrics like CPU and memory, using services like Amazon CloudWatch Container Insights for Amazon EKS or third party tools that are available in the Kubernetes ecosystem. This will ensure that we can allocate the right amount of resources and avoid wastage of resources. + Take advantage of the different purchasing options that are available in AWS for running EKS with EC2, e.g. On-Demand, Spot and Savings Plan. EKS Cost Optimization Best Practices \u00b6 There are three general best practice areas for cost optimization in the cloud: Cost-effective resources (Auto Scaling, Down Scaling, Policies and Purchasing Options) Expenditure awareness (Using AWS and third party tools) Optimizing over time (Right Sizing) As with any guidance there are trade-offs. Ensure you work with your organization to understand the priorities for this workload and which best practices are most important. How to use this guide \u00b6 This guide is meant for devops teams who are responsible for implementing and managing the EKS clusters and the workloads they support. The guide is organized into different best practice areas for easier consumption. Each topic has a list of recommendations, tools to use and best practices for cost optimization of your EKS clusters. The topics do not need to read in a particular order. Key AWS Services and Kubernetes features \u00b6 Cost optimization is supported by the following AWS services and features: + EC2 Instance types, Savings Plan (and Reserved Instances) and Spot Instances, at different prices. + Auto Scaling along with Kubernetes native Auto Scaling policies. Consider Savings Plan (Previously Reserved Instances) for predictable workloads. Use managed data stores like EBS and EFS, for elasticity and durability of the application data. + The Billing and Cost Management console dashboard along with AWS Cost Explorer provides an overview of your AWS usage. Use AWS Organizations for granular billing details. Details of several third party tools have also been shared. + Amazon CloudWatch Container Metrics provides metrics around usage of resources by the EKS cluster. In addition to the Kubernetes dashboard, there are several tools in the Kubernetes ecosystem that can be used to reduce wastage. This guide includes a set of recommendations that you can use to improve the cost optimization of your Amazon EKS cluster. Feedback \u00b6 This guide is being released on GitHub so as to collect direct feedback and suggestions from the broader EKS/Kubernetes community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. Our intention is to update the guide periodically as new features are added to the service or when a new best practice evolves.","title":"Amazon EKS Best Practices Guide for Cost Optimization"},{"location":"cost_optimization/cost_optimization_index/#amazon-eks-best-practices-guide-for-cost-optimization","text":"Cost Optimization is achieving your business outcomes at the lowest price point. By following the documentation in this guide you will optimize your Amazon EKS workloads.","title":"Amazon EKS Best Practices Guide for Cost Optimization"},{"location":"cost_optimization/cost_optimization_index/#general-guidelines","text":"In the cloud, there are a number of general guidelines that can help you achieve cost optimization of your microservices: + Ensure that workloads running on Amazon EKS are independent of specific infrastructure types for running your containers, this will give greater flexibility with regards to running them on the least expensive types of infrastructure. While using Amazon EKS with EC2, there can be exceptions when we have workloads that require specific type of EC2 Instance types like requiring a GPU or other instance types, due to the nature of the workload. + Select optimally profiled container instances \u2014 profile your production or pre-production environments and monitor critical metrics like CPU and memory, using services like Amazon CloudWatch Container Insights for Amazon EKS or third party tools that are available in the Kubernetes ecosystem. This will ensure that we can allocate the right amount of resources and avoid wastage of resources. + Take advantage of the different purchasing options that are available in AWS for running EKS with EC2, e.g. On-Demand, Spot and Savings Plan.","title":"General Guidelines"},{"location":"cost_optimization/cost_optimization_index/#eks-cost-optimization-best-practices","text":"There are three general best practice areas for cost optimization in the cloud: Cost-effective resources (Auto Scaling, Down Scaling, Policies and Purchasing Options) Expenditure awareness (Using AWS and third party tools) Optimizing over time (Right Sizing) As with any guidance there are trade-offs. Ensure you work with your organization to understand the priorities for this workload and which best practices are most important.","title":"EKS Cost Optimization Best Practices"},{"location":"cost_optimization/cost_optimization_index/#how-to-use-this-guide","text":"This guide is meant for devops teams who are responsible for implementing and managing the EKS clusters and the workloads they support. The guide is organized into different best practice areas for easier consumption. Each topic has a list of recommendations, tools to use and best practices for cost optimization of your EKS clusters. The topics do not need to read in a particular order.","title":"How to use this guide"},{"location":"cost_optimization/cost_optimization_index/#key-aws-services-and-kubernetes-features","text":"Cost optimization is supported by the following AWS services and features: + EC2 Instance types, Savings Plan (and Reserved Instances) and Spot Instances, at different prices. + Auto Scaling along with Kubernetes native Auto Scaling policies. Consider Savings Plan (Previously Reserved Instances) for predictable workloads. Use managed data stores like EBS and EFS, for elasticity and durability of the application data. + The Billing and Cost Management console dashboard along with AWS Cost Explorer provides an overview of your AWS usage. Use AWS Organizations for granular billing details. Details of several third party tools have also been shared. + Amazon CloudWatch Container Metrics provides metrics around usage of resources by the EKS cluster. In addition to the Kubernetes dashboard, there are several tools in the Kubernetes ecosystem that can be used to reduce wastage. This guide includes a set of recommendations that you can use to improve the cost optimization of your Amazon EKS cluster.","title":"Key AWS Services and Kubernetes features"},{"location":"cost_optimization/cost_optimization_index/#feedback","text":"This guide is being released on GitHub so as to collect direct feedback and suggestions from the broader EKS/Kubernetes community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. Our intention is to update the guide periodically as new features are added to the service or when a new best practice evolves.","title":"Feedback"},{"location":"cost_optimization/optimizing/","text":"Optimizing over time (Right Sizing) \u00b6 Right Sizing as per the AWS Well-Architected Framework, is \u201c\u2026 using the lowest cost resource that still meets the technical specifications of a specific workload\u201d. When you specify the resource requests for the Containers in a Pod, the scheduler uses this information to decide which node to place the Pod on. When you specify a resource limits for a Container, the kubelet enforces those limits so that the running container is not allowed to use more of that resource than the limit you set. The details of how Kubernetes manages resources for containers are given in the documentation . In Kubernetes, this means setting the right compute resources ( CPU and memory are collectively referred to as compute resources ) - setting the resource requests that align as close as possible to the actual utilization. The tools for getting the actual resource usags of Pods are given in the section on Rexommendations below. Amazon EKS on AWS Fargate : When pods are scheduled on Fargate, the vCPU and memory reservations within the pod specification determine how much CPU and memory to provision for the pod. If you do not specify a vCPU and memory combination, then the smallest available combination is used (.25 vCPU and 0.5 GB memory). The list of vCPU and memory combinations that are available for pods running on Fargate are listed in the Amazon EKS User Guide . Amazon EKS on EC2 : When you create a Pod, you can specify how much of each resource like CPU and Memory, a Container needs. It is important we do not over-provision (which will lead to wastage) or under-provision (will lead to throttling) the resources allocated to the containers. Recommendations \u00b6 Use tools to help you allocate resources based on observed data \u00b6 There are tools like kube resource report which can help with right sizing of pods deployed on Amazon EKS with EC2 nodes. Deployment steps for kube resource report: $ git clone https://github.com/hjacobs/kube-resource-report $ cd kube-resource-report $ helm install kube-resource-report ./unsupported/chart/kube-resource-report $ helm status kube-resource-report $ export POD_NAME = $( kubectl get pods --namespace default -l \"app.kubernetes.io/name=kube-resource-report,app.kubernetes.io/instance=kube-resource-report\" -o jsonpath = \"{.items[0].metadata.name}\" ) $ echo \"Visit http://127.0.0.1:8080 to use your application\" $ kubectl port-forward $POD_NAME 8080 :8080 Screenshots from a sample reports from this tool: FairwindsOps Goldilocks : The FairwindsOps Goldilocks is a tool that creates a Vertical Pod Autoscaler (VPA) for each deployment in a namespace and then queries them for information. Once the VPAs are in place, we see recommendations appear in the Goldilocks dashboard. Deploy the Vertical Pod Autoscaler as per the documentation . Enable Namespace - Pick an application namespace and label it like so in order to see some data, in the following example we are specifying the default namespace: $ kubectl label ns default goldilocks.fairwinds.com/enabled = true Viewing the Dashboard - The default installation creates a ClusterIP service for the dashboard. You can access via port forward: $ kubectl -n goldilocks port-forward svc/goldilocks-dashboard 8080 :80 Then open your browser to http://localhost:8080 Use Application Profiling tools like CloudWatch Container Insights and Prometheus Metrics in Amazon CloudWatch \u00b6 Use CloudWatch Container Insights to see how you can use native CloudWatch features to monitor your EKS Cluster performance. You can use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices running on Amazon Elastic Kubernetes Service. The metrics include utilization for resources such as CPU, memory, disk, and network - which can help with right-sizing Pods and save costs. Container Insights Prometheus Metrics Monitoring At present, support for Prometheus metrics is still in beta. CloudWatch Container Insights monitoring for Prometheus automates the discovery of Prometheus metrics from containerized systems and workloads. Prometheus is an open-source systems monitoring and alerting toolkit. All Prometheus metrics are collected in the ContainerInsights/Prometheus namespace. The Metrics provided by cAdvisor and kube-state-metrics can be used for monitoring pods on Amazon EKS on AWS Fargate using Prometheus and Grafana, which can then be used to implement requests in your containers. Please refer to this blog for more details. Right Size Guide : The right size guide (rsg) is a simple CLI tool that provides you with memory and CPU recommendations for your application. This tool works across container orchestrators, including Kubernetes and easy to deploy. By using tools like CloudWatch Container Insights, Kube Resource Report, Goldilocks and others, applications running in the Kubernetes cluster can be right sized and potentially lower your costs. Resources \u00b6 Refer to the following resources to learn more about best practices for cost optimization. Documentation and Blogs \u00b6 Amazon EKS Workshop - Setting up EKS CloudWatch Container Insights Using Prometheus Metrics in Amazon CloudWatch Monitoring Amazon EKS on AWS Fargate using Prometheus and Grafana Tools \u00b6 Kube resource report Right size guide Fargate count FairwindsOps Goldilocks","title":"Optimizing over time (Right Sizing)"},{"location":"cost_optimization/optimizing/#optimizing-over-time-right-sizing","text":"Right Sizing as per the AWS Well-Architected Framework, is \u201c\u2026 using the lowest cost resource that still meets the technical specifications of a specific workload\u201d. When you specify the resource requests for the Containers in a Pod, the scheduler uses this information to decide which node to place the Pod on. When you specify a resource limits for a Container, the kubelet enforces those limits so that the running container is not allowed to use more of that resource than the limit you set. The details of how Kubernetes manages resources for containers are given in the documentation . In Kubernetes, this means setting the right compute resources ( CPU and memory are collectively referred to as compute resources ) - setting the resource requests that align as close as possible to the actual utilization. The tools for getting the actual resource usags of Pods are given in the section on Rexommendations below. Amazon EKS on AWS Fargate : When pods are scheduled on Fargate, the vCPU and memory reservations within the pod specification determine how much CPU and memory to provision for the pod. If you do not specify a vCPU and memory combination, then the smallest available combination is used (.25 vCPU and 0.5 GB memory). The list of vCPU and memory combinations that are available for pods running on Fargate are listed in the Amazon EKS User Guide . Amazon EKS on EC2 : When you create a Pod, you can specify how much of each resource like CPU and Memory, a Container needs. It is important we do not over-provision (which will lead to wastage) or under-provision (will lead to throttling) the resources allocated to the containers.","title":"Optimizing over time (Right Sizing)"},{"location":"cost_optimization/optimizing/#recommendations","text":"","title":"Recommendations"},{"location":"cost_optimization/optimizing/#use-tools-to-help-you-allocate-resources-based-on-observed-data","text":"There are tools like kube resource report which can help with right sizing of pods deployed on Amazon EKS with EC2 nodes. Deployment steps for kube resource report: $ git clone https://github.com/hjacobs/kube-resource-report $ cd kube-resource-report $ helm install kube-resource-report ./unsupported/chart/kube-resource-report $ helm status kube-resource-report $ export POD_NAME = $( kubectl get pods --namespace default -l \"app.kubernetes.io/name=kube-resource-report,app.kubernetes.io/instance=kube-resource-report\" -o jsonpath = \"{.items[0].metadata.name}\" ) $ echo \"Visit http://127.0.0.1:8080 to use your application\" $ kubectl port-forward $POD_NAME 8080 :8080 Screenshots from a sample reports from this tool: FairwindsOps Goldilocks : The FairwindsOps Goldilocks is a tool that creates a Vertical Pod Autoscaler (VPA) for each deployment in a namespace and then queries them for information. Once the VPAs are in place, we see recommendations appear in the Goldilocks dashboard. Deploy the Vertical Pod Autoscaler as per the documentation . Enable Namespace - Pick an application namespace and label it like so in order to see some data, in the following example we are specifying the default namespace: $ kubectl label ns default goldilocks.fairwinds.com/enabled = true Viewing the Dashboard - The default installation creates a ClusterIP service for the dashboard. You can access via port forward: $ kubectl -n goldilocks port-forward svc/goldilocks-dashboard 8080 :80 Then open your browser to http://localhost:8080","title":"Use tools to help you allocate resources based on observed data"},{"location":"cost_optimization/optimizing/#use-application-profiling-tools-like-cloudwatch-container-insights-and-prometheus-metrics-in-amazon-cloudwatch","text":"Use CloudWatch Container Insights to see how you can use native CloudWatch features to monitor your EKS Cluster performance. You can use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices running on Amazon Elastic Kubernetes Service. The metrics include utilization for resources such as CPU, memory, disk, and network - which can help with right-sizing Pods and save costs. Container Insights Prometheus Metrics Monitoring At present, support for Prometheus metrics is still in beta. CloudWatch Container Insights monitoring for Prometheus automates the discovery of Prometheus metrics from containerized systems and workloads. Prometheus is an open-source systems monitoring and alerting toolkit. All Prometheus metrics are collected in the ContainerInsights/Prometheus namespace. The Metrics provided by cAdvisor and kube-state-metrics can be used for monitoring pods on Amazon EKS on AWS Fargate using Prometheus and Grafana, which can then be used to implement requests in your containers. Please refer to this blog for more details. Right Size Guide : The right size guide (rsg) is a simple CLI tool that provides you with memory and CPU recommendations for your application. This tool works across container orchestrators, including Kubernetes and easy to deploy. By using tools like CloudWatch Container Insights, Kube Resource Report, Goldilocks and others, applications running in the Kubernetes cluster can be right sized and potentially lower your costs.","title":"Use Application Profiling tools like CloudWatch Container Insights and Prometheus Metrics in Amazon CloudWatch"},{"location":"cost_optimization/optimizing/#resources","text":"Refer to the following resources to learn more about best practices for cost optimization.","title":"Resources"},{"location":"cost_optimization/optimizing/#documentation-and-blogs","text":"Amazon EKS Workshop - Setting up EKS CloudWatch Container Insights Using Prometheus Metrics in Amazon CloudWatch Monitoring Amazon EKS on AWS Fargate using Prometheus and Grafana","title":"Documentation and Blogs"},{"location":"cost_optimization/optimizing/#tools","text":"Kube resource report Right size guide Fargate count FairwindsOps Goldilocks","title":"Tools"},{"location":"operational_excellence/operational_excellence/","text":"","title":"Operational excellence"},{"location":"performance/performance/","text":"Performance Efficiency Pillar \u00b6 The performance efficiency pillar focuses on the efficient use of computing resources to meet requirements and how to maintain that efficiency as demand changes and technologies evolve. This section provides in-depth, best practices guidance for architecting for performance efficiency on AWS. Definition \u00b6 To ensure the efficient use of EKS container services, you should gather data on all aspects of the architecture, from the high-level design to the selection of EKS resource types. By reviewing your choices on a regular basis, you ensure that you are taking advantage of the continually evolving Amazon EKS and Container services. Monitoring will ensure that you are aware of any deviance from expected performance so you can take action on it. Performance efficiency for EKS containers is composed of three areas: Optimize your container Resource Management Scalability Management Best Practices \u00b6 Optimize your container \u00b6 You can run most applications in a Docker container without too much hassle. There are a number of things that you need to do to ensure it's running effectively in a production environment, including streamlining the build process. The following best practices will help you to achieve that. Recommendations \u00b6 Make your container images stateless: A container created with a Docker image should be ephemeral and immutable. In other words, the container should be disposable and independent, i.e. a new one can be built and put in place with absolutely no configuration changes. Design your containers to be stateless. If you would like to use persistent data, use volumes instead. If you would like to store secrets or sensitive application data used by services, you can use solutions like AWS Systems Manager Parameter Store or third-party offerings or open source solutions, such as HashiCorp Valut and Consul , for runtime configurations. Minimal base image : Start with a small base image. Every other instruction in the Dockerfile builds on top of this image. The smaller the base image, the smaller the resulting image is, and the more quickly it can be downloaded. For example, the alpine:3.7 image is 71 MB smaller than the centos:7 image. You can even use the scratch base image, which is an empty image on which you can build your own runtime environment. Avoid unnecessary packages: When building a container image, include only the dependencies what your application needs and avoid installing unnecessary packages. For example if your application does not need an SSH server, don't include one. This will reduce complexity, dependencies, file sizes, and build times. To exclude files not relevant to the build use a .dockerignore file. Use multi-stage build :Multi-stage builds allow you to build your application in a first \"build\" container and use the result in another container, while using the same Dockerfile. To expand a bit on that, in multi-stage builds, you use multiple FROM statements in your Dockerfile. Each FROM instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don't want in the final image. This method drastically reduces the size of your final image, without struggling to reduce the number of intermediate layers and files. Minimize number of layers: Each instruction in the Dockerfile adds an extra layer to the Docker image. The number of instructions and layers should be kept to a minimum as this affects build performance and time. For example, the first instruction below will create multiple layers, whereas the second instruction by using &&(chaining) we reduced the number of layers, which will help provide better performance. The is the best way to reduce the number of layers that will be created in your Dockerfile. RUN apt-get -y update RUN apt-get install -y python RUN apt-get -y update && apt-get install -y python Properly tag your images: When building images, always tag them with useful and meaningful tags. This is a good way to organize and document metadata describing an image, for example, by including a unique counter like build id from a CI server (e.g. CodeBuild or Jenkins) to help with identifying the correct image. The tag latest is used by default if you do not provide one in your Docker commands. We recommend not to use the automatically created latest tag, because by using this tag you'll automatically be running future major releases, which could include breaking changes for your application. The best practice is to avoid the latest tag and instead use the unique digest created by your CI server. Use Build Cache to improve build speed : The cache allows you to take advantage of existing cached images, rather than building each image from scratch. For example, you should add the source code of your application as late as possible in your Dockerfile so that the base image and your application's dependencies get cached and aren't rebuilt on every build. To reuse already cached images, By default in Amazon EKS, the kubelet will try to pull each image from the specified registry. However, if the imagePullPolicy property of the container is set to IfNotPresent or Never, then a local image is used (preferentially or exclusively, respectively). Image Security : Using public images may be a great way to start working on containers and deploying it to Kubernetes. However, using them in production can come with a set of challenges. Especially when it comes to security. Ensure to follow the best practices for packaging and distributing the containers/applications. For example, don't build your containers with passwords baked in also you might need to control what's inside them. Recommend to use private repository such as Amazon ECR and leverage the in-built image scanning feature to identify software vulnerabilities in your container images. Right size your containers: As you develop and run applications in containers, there are a few key areas to consider. How you size containers and manage your application deployments can negatively impact the end-user experience of services that you provide. To help you succeed, the following best practices will help you right size your containers. After you determine the number of resources required for your application, you should set requests and limits Kubernetes to ensure that your applications are running correctly. (a) Perform testing of the application : to gather vital statistics and other performance Based upon this data you can work out the optimal configuration, in terms of memory and CPU, for your container. Vital statistics such as : CPU, Latency, I/O, Memory usage, Network . Determine expected, mean, and peak container memory and CPU usage by doing a separate load test if necessary. Also consider all the processes that might potentially run in parallel in the container. Recommend to use CloudWatch Container insights or partner products, which will give you the right information to size containers and the Worker nodes. (b)Test services independently: As many applications depend on each other in a true microservice architecture, you need to test them with a high degree of independence meaning that the services are both able to properly function by themselves, as well as function as part of a cohesive system. Resource Management \u00b6 One of the most common questions that asked in the adoption of Kubernetes is \" What should I put in a Pod? \". For example, a three tier LAMP application container. Should we keep this application in the same pod? Well, this works effectively as a single pod but this is an example of an anti-pattern for Pod creation. There are two reasons for that (a) If you have both the containers in the same Pod, you are forced to use the same scaling strategy which is not ideal for production environment also you can't effectively manage or constraint resources based on the usage. E.g: you might need to scale just the frontend not frontend and backend (MySQL) as a unit also if you would like to increase the resources dedicated just to the backend, you cant just do that. (b) If you have two separate pods, one for frontend and other for backend. Scaling would be very easy and you get a better reliability. The above might not work in all the use-cases. In the above example frontend and backend may land in different machines and they will communicate with each other via network, So you need to ask the question \" Will my application work correctly, If they are placed and run on different machines? \" If the answer is a \" no \" may be because of the application design or for some other technical reasons, then grouping of containers in a single pod makes sense. If the answer is \" Yes \" then multiple Pods is the correct approach. Recommendations \u00b6 Package a single application per container: A container works best when a single application runs inside it. This application should have a single parent process. For example, do not run PHP and MySQL in the same container: it's harder to debug, and you can't horizontally scale the PHP container alone. This separation allows you to better tie the lifecycle of the application to that of the container. Your containers should be both stateless and immutable. Stateless means that any state (persistent data of any kind) is stored outside of the container, for example, you can use different kinds of external storage like Persistent disk, Amazon EBS, and Amazon EFS if needed, or managed database like Amazon RDS. Immutable means that a container will not be modified during its life: no updates, no patches, and no configuration changes. To update the application code or apply a patch, you build a new image and deploy it. Use Labels to Kubernetes Objects: Labels allow Kubernetes objects to be queried and operated upon in bulk. They can also be used to identify and organize Kubernetes objects into groups. As such defining labels should figure right at the top of any Kubernetes best practices list. Setting resource request limits: Setting request limits is the mechanism used to control the amount of system resources that a container can consume such as CPU and memory. These settings are what the container is guaranteed to get when the container initially starts. If a container requests a resource, container orchestrators such as Kubernetes will only schedule it on a node that can provide that resource. Limits, on the other hand, make sure that a container never goes above a certain value. The container is only allowed to go up to the limit, and then it is restricted. In the below example Pod manifest, we add a limit of 1.0 CPU and 256 MB of memory apiVersion: v1 kind: Pod metadata: name: nginx-pod-webserver labels: name: nginx-pod spec: containers: - name: nginx image: nginx:latest resources: limits: memory: \"256Mi\" cpu: \"1000m\" requests: memory: \"128Mi\" cpu: \"500m\" ports: - containerPort: 80 It's a best practice to define these requests and limits in your pod definitions. If you don't include these values, the scheduler doesn't understand what resources are needed. Without this information, the scheduler might schedule the pod on a node without sufficient resources to provide acceptable application performance. Limit the number of concurrent disruptions: Use PodDisruptionBudget , This settings allows you to set a policy on the minimum available and maximum unavailable pods during voluntary eviction events. An example of an eviction would be when perform maintenance on the node or draining a node. Example: A web frontend might want to ensure that 8 Pods to be available at any given time. In this scenario, an eviction can evict as many pods as it wants, as long as eight are available. apiVersion : policy / v1beta1 kind : PodDisruptionBudget metadata : name : frontend - demo spec : minAvailable : 8 selector : matchLabels : app : frontend N.B: You can also specify pod disruption budget as a percentage by using maxAvailable or maxUnavailable parameter. Use Namespaces: Namespaces allows a physical cluster to be shared by multiple teams. A namespace allows to partition created resources into a logically named group. This allows you to set resource quotas per namespace, Role-Based Access Control (RBAC) per namespace, and also network policies per namespace. It gives you soft multitenancy features. For example, If you have three applications running on a single Amazon EKS cluster accessed by three different teams which requires multiple resource constraints and different levels of QoS each group you could create a namespace per team and give each team a quota on the number of resources that it can utilize, such as CPU and memory. You can also specify default limits in Kubernetes namespaces level by enabling LimitRange admission controller. These default limits will constrain the amount of CPU or memory a given Pod can use unless the defaults are explicitly overridden by the Pod's configuration. Manage Resource Quota: Each namespace can be assigned resource quota. Specifying quota allows to restrict how much of cluster resources can be consumed across all resources in a namespace. Resource quota can be defined by a ResourceQuota object. A presence of ResourceQuota object in a namespace ensures that resource quotas are enforced. Configure Health Checks for Pods: Health checks are a simple way to let the system know if an instance of your app is working or not. If an instance of your app is not working, then other services should not access it or send requests to it. Instead, requests should be sent to another instance of the app that is working. The system also should bring your app back to a healthy state. By default, all the running pods have the restart policy set to always which means the kubelet running within a node will automatically restart a pod when the container encounters an error. Health checks extend this capability of kubelet through the concept of container probes . Kubernetes provides two types of health checks : readiness and liveness probes. For example, consider if one of your applications, which typically runs for long periods of time, transitions to a non-running state and can only recover by being restarted. You can use liveness probes to detect and remedy such situations. Using health checks gives your applications better reliability, and higher uptime. Advanced Scheduling Techniques: Generally, schedulers ensure that pods are placed only on nodes that have sufficient free resources, and across nodes, they try to balance out the resource utilization across nodes, deployments, replicas, and so on. But sometimes you want to control how your pods are scheduled. For example, perhaps you want to ensure that certain pods are only scheduled on nodes with specialized hardware, such as requiring a GPU machine for an ML workload. Or you want to collocate services that communicate frequently. Kubernetes offers many advanced scheduling features and multiple filters/constraints to schedule the pods on the right node. For example, when using Amazon EKS, you can use taints and tolerations to restrict what workloads can run on specific nodes. You can also control pod scheduling using node selectors and affinity and anti-affinity constructs and even have your own custom scheduler built for this purpose. Scalability Management \u00b6 Containers are stateless. They are born and when they die, they are not resurrected. There are many techniques that you can leverage on Amazon EKS, not only to scale out your containerized applications but also the Kubernetes worker node. Recommendations \u00b6 On Amazon EKS, you can configure Horizontal pod autoscaler ,which automatically scales the number of pods in a replication controller, deployment, or replica set based on observed CPU utilization (or use custom metrics based on application-provided metrics). You can use Vertical Pod Autoscaler which automatically adjusts the CPU and memory reservations for your pods to help \"right size\" your applications. This adjustment can improve cluster resource utilization and free up CPU and memory for other pods. This is useful in scenarios like your production database \"MongoDB\" does not scale the same way as a stateless application frontend, In this scenario you could use VPA to scale up the MongoDB Pod. To enable VPA you need to use Kubernetes metrics server, which is an aggregator of resource usage data in your cluster. It is not deployed by default in Amazon EKS clusters. You need to configure it before configure VPA alternatively you can also use Prometheus to provide metrics for the Vertical Pod Autoscaler. While HPA and VPA scale the deployments and pods, Cluster Autoscaler will scale-out and scale-in the size of the pool of worker nodes. It adjusts the size of a Kubernetes cluster based on the current utilization. Cluster Autoscaler increases the size of the cluster when there are pods that failed to schedule on any of the current nodes due to insufficient resources or when adding a new node would increase the overall availability of cluster resources. Please follow this step by step guide to setup Cluster Autoscaler. If you are using Amazon EKS on AWS Fargate, AWS Manages the control plane for you. Please have a look at the reliability pillar for detailed information. Monitoring \u00b6 Deployment Best Practices \u00b6 Trade-Offs \u00b6","title":"Performance Efficiency Pillar"},{"location":"performance/performance/#performance-efficiency-pillar","text":"The performance efficiency pillar focuses on the efficient use of computing resources to meet requirements and how to maintain that efficiency as demand changes and technologies evolve. This section provides in-depth, best practices guidance for architecting for performance efficiency on AWS.","title":"Performance Efficiency Pillar"},{"location":"performance/performance/#definition","text":"To ensure the efficient use of EKS container services, you should gather data on all aspects of the architecture, from the high-level design to the selection of EKS resource types. By reviewing your choices on a regular basis, you ensure that you are taking advantage of the continually evolving Amazon EKS and Container services. Monitoring will ensure that you are aware of any deviance from expected performance so you can take action on it. Performance efficiency for EKS containers is composed of three areas: Optimize your container Resource Management Scalability Management","title":"Definition"},{"location":"performance/performance/#best-practices","text":"","title":"Best Practices"},{"location":"performance/performance/#optimize-your-container","text":"You can run most applications in a Docker container without too much hassle. There are a number of things that you need to do to ensure it's running effectively in a production environment, including streamlining the build process. The following best practices will help you to achieve that.","title":"Optimize your container"},{"location":"performance/performance/#recommendations","text":"Make your container images stateless: A container created with a Docker image should be ephemeral and immutable. In other words, the container should be disposable and independent, i.e. a new one can be built and put in place with absolutely no configuration changes. Design your containers to be stateless. If you would like to use persistent data, use volumes instead. If you would like to store secrets or sensitive application data used by services, you can use solutions like AWS Systems Manager Parameter Store or third-party offerings or open source solutions, such as HashiCorp Valut and Consul , for runtime configurations. Minimal base image : Start with a small base image. Every other instruction in the Dockerfile builds on top of this image. The smaller the base image, the smaller the resulting image is, and the more quickly it can be downloaded. For example, the alpine:3.7 image is 71 MB smaller than the centos:7 image. You can even use the scratch base image, which is an empty image on which you can build your own runtime environment. Avoid unnecessary packages: When building a container image, include only the dependencies what your application needs and avoid installing unnecessary packages. For example if your application does not need an SSH server, don't include one. This will reduce complexity, dependencies, file sizes, and build times. To exclude files not relevant to the build use a .dockerignore file. Use multi-stage build :Multi-stage builds allow you to build your application in a first \"build\" container and use the result in another container, while using the same Dockerfile. To expand a bit on that, in multi-stage builds, you use multiple FROM statements in your Dockerfile. Each FROM instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don't want in the final image. This method drastically reduces the size of your final image, without struggling to reduce the number of intermediate layers and files. Minimize number of layers: Each instruction in the Dockerfile adds an extra layer to the Docker image. The number of instructions and layers should be kept to a minimum as this affects build performance and time. For example, the first instruction below will create multiple layers, whereas the second instruction by using &&(chaining) we reduced the number of layers, which will help provide better performance. The is the best way to reduce the number of layers that will be created in your Dockerfile. RUN apt-get -y update RUN apt-get install -y python RUN apt-get -y update && apt-get install -y python Properly tag your images: When building images, always tag them with useful and meaningful tags. This is a good way to organize and document metadata describing an image, for example, by including a unique counter like build id from a CI server (e.g. CodeBuild or Jenkins) to help with identifying the correct image. The tag latest is used by default if you do not provide one in your Docker commands. We recommend not to use the automatically created latest tag, because by using this tag you'll automatically be running future major releases, which could include breaking changes for your application. The best practice is to avoid the latest tag and instead use the unique digest created by your CI server. Use Build Cache to improve build speed : The cache allows you to take advantage of existing cached images, rather than building each image from scratch. For example, you should add the source code of your application as late as possible in your Dockerfile so that the base image and your application's dependencies get cached and aren't rebuilt on every build. To reuse already cached images, By default in Amazon EKS, the kubelet will try to pull each image from the specified registry. However, if the imagePullPolicy property of the container is set to IfNotPresent or Never, then a local image is used (preferentially or exclusively, respectively). Image Security : Using public images may be a great way to start working on containers and deploying it to Kubernetes. However, using them in production can come with a set of challenges. Especially when it comes to security. Ensure to follow the best practices for packaging and distributing the containers/applications. For example, don't build your containers with passwords baked in also you might need to control what's inside them. Recommend to use private repository such as Amazon ECR and leverage the in-built image scanning feature to identify software vulnerabilities in your container images. Right size your containers: As you develop and run applications in containers, there are a few key areas to consider. How you size containers and manage your application deployments can negatively impact the end-user experience of services that you provide. To help you succeed, the following best practices will help you right size your containers. After you determine the number of resources required for your application, you should set requests and limits Kubernetes to ensure that your applications are running correctly. (a) Perform testing of the application : to gather vital statistics and other performance Based upon this data you can work out the optimal configuration, in terms of memory and CPU, for your container. Vital statistics such as : CPU, Latency, I/O, Memory usage, Network . Determine expected, mean, and peak container memory and CPU usage by doing a separate load test if necessary. Also consider all the processes that might potentially run in parallel in the container. Recommend to use CloudWatch Container insights or partner products, which will give you the right information to size containers and the Worker nodes. (b)Test services independently: As many applications depend on each other in a true microservice architecture, you need to test them with a high degree of independence meaning that the services are both able to properly function by themselves, as well as function as part of a cohesive system.","title":"Recommendations"},{"location":"performance/performance/#resource-management","text":"One of the most common questions that asked in the adoption of Kubernetes is \" What should I put in a Pod? \". For example, a three tier LAMP application container. Should we keep this application in the same pod? Well, this works effectively as a single pod but this is an example of an anti-pattern for Pod creation. There are two reasons for that (a) If you have both the containers in the same Pod, you are forced to use the same scaling strategy which is not ideal for production environment also you can't effectively manage or constraint resources based on the usage. E.g: you might need to scale just the frontend not frontend and backend (MySQL) as a unit also if you would like to increase the resources dedicated just to the backend, you cant just do that. (b) If you have two separate pods, one for frontend and other for backend. Scaling would be very easy and you get a better reliability. The above might not work in all the use-cases. In the above example frontend and backend may land in different machines and they will communicate with each other via network, So you need to ask the question \" Will my application work correctly, If they are placed and run on different machines? \" If the answer is a \" no \" may be because of the application design or for some other technical reasons, then grouping of containers in a single pod makes sense. If the answer is \" Yes \" then multiple Pods is the correct approach.","title":"Resource Management"},{"location":"performance/performance/#recommendations_1","text":"Package a single application per container: A container works best when a single application runs inside it. This application should have a single parent process. For example, do not run PHP and MySQL in the same container: it's harder to debug, and you can't horizontally scale the PHP container alone. This separation allows you to better tie the lifecycle of the application to that of the container. Your containers should be both stateless and immutable. Stateless means that any state (persistent data of any kind) is stored outside of the container, for example, you can use different kinds of external storage like Persistent disk, Amazon EBS, and Amazon EFS if needed, or managed database like Amazon RDS. Immutable means that a container will not be modified during its life: no updates, no patches, and no configuration changes. To update the application code or apply a patch, you build a new image and deploy it. Use Labels to Kubernetes Objects: Labels allow Kubernetes objects to be queried and operated upon in bulk. They can also be used to identify and organize Kubernetes objects into groups. As such defining labels should figure right at the top of any Kubernetes best practices list. Setting resource request limits: Setting request limits is the mechanism used to control the amount of system resources that a container can consume such as CPU and memory. These settings are what the container is guaranteed to get when the container initially starts. If a container requests a resource, container orchestrators such as Kubernetes will only schedule it on a node that can provide that resource. Limits, on the other hand, make sure that a container never goes above a certain value. The container is only allowed to go up to the limit, and then it is restricted. In the below example Pod manifest, we add a limit of 1.0 CPU and 256 MB of memory apiVersion: v1 kind: Pod metadata: name: nginx-pod-webserver labels: name: nginx-pod spec: containers: - name: nginx image: nginx:latest resources: limits: memory: \"256Mi\" cpu: \"1000m\" requests: memory: \"128Mi\" cpu: \"500m\" ports: - containerPort: 80 It's a best practice to define these requests and limits in your pod definitions. If you don't include these values, the scheduler doesn't understand what resources are needed. Without this information, the scheduler might schedule the pod on a node without sufficient resources to provide acceptable application performance. Limit the number of concurrent disruptions: Use PodDisruptionBudget , This settings allows you to set a policy on the minimum available and maximum unavailable pods during voluntary eviction events. An example of an eviction would be when perform maintenance on the node or draining a node. Example: A web frontend might want to ensure that 8 Pods to be available at any given time. In this scenario, an eviction can evict as many pods as it wants, as long as eight are available. apiVersion : policy / v1beta1 kind : PodDisruptionBudget metadata : name : frontend - demo spec : minAvailable : 8 selector : matchLabels : app : frontend N.B: You can also specify pod disruption budget as a percentage by using maxAvailable or maxUnavailable parameter. Use Namespaces: Namespaces allows a physical cluster to be shared by multiple teams. A namespace allows to partition created resources into a logically named group. This allows you to set resource quotas per namespace, Role-Based Access Control (RBAC) per namespace, and also network policies per namespace. It gives you soft multitenancy features. For example, If you have three applications running on a single Amazon EKS cluster accessed by three different teams which requires multiple resource constraints and different levels of QoS each group you could create a namespace per team and give each team a quota on the number of resources that it can utilize, such as CPU and memory. You can also specify default limits in Kubernetes namespaces level by enabling LimitRange admission controller. These default limits will constrain the amount of CPU or memory a given Pod can use unless the defaults are explicitly overridden by the Pod's configuration. Manage Resource Quota: Each namespace can be assigned resource quota. Specifying quota allows to restrict how much of cluster resources can be consumed across all resources in a namespace. Resource quota can be defined by a ResourceQuota object. A presence of ResourceQuota object in a namespace ensures that resource quotas are enforced. Configure Health Checks for Pods: Health checks are a simple way to let the system know if an instance of your app is working or not. If an instance of your app is not working, then other services should not access it or send requests to it. Instead, requests should be sent to another instance of the app that is working. The system also should bring your app back to a healthy state. By default, all the running pods have the restart policy set to always which means the kubelet running within a node will automatically restart a pod when the container encounters an error. Health checks extend this capability of kubelet through the concept of container probes . Kubernetes provides two types of health checks : readiness and liveness probes. For example, consider if one of your applications, which typically runs for long periods of time, transitions to a non-running state and can only recover by being restarted. You can use liveness probes to detect and remedy such situations. Using health checks gives your applications better reliability, and higher uptime. Advanced Scheduling Techniques: Generally, schedulers ensure that pods are placed only on nodes that have sufficient free resources, and across nodes, they try to balance out the resource utilization across nodes, deployments, replicas, and so on. But sometimes you want to control how your pods are scheduled. For example, perhaps you want to ensure that certain pods are only scheduled on nodes with specialized hardware, such as requiring a GPU machine for an ML workload. Or you want to collocate services that communicate frequently. Kubernetes offers many advanced scheduling features and multiple filters/constraints to schedule the pods on the right node. For example, when using Amazon EKS, you can use taints and tolerations to restrict what workloads can run on specific nodes. You can also control pod scheduling using node selectors and affinity and anti-affinity constructs and even have your own custom scheduler built for this purpose.","title":"Recommendations"},{"location":"performance/performance/#scalability-management","text":"Containers are stateless. They are born and when they die, they are not resurrected. There are many techniques that you can leverage on Amazon EKS, not only to scale out your containerized applications but also the Kubernetes worker node.","title":"Scalability Management"},{"location":"performance/performance/#recommendations_2","text":"On Amazon EKS, you can configure Horizontal pod autoscaler ,which automatically scales the number of pods in a replication controller, deployment, or replica set based on observed CPU utilization (or use custom metrics based on application-provided metrics). You can use Vertical Pod Autoscaler which automatically adjusts the CPU and memory reservations for your pods to help \"right size\" your applications. This adjustment can improve cluster resource utilization and free up CPU and memory for other pods. This is useful in scenarios like your production database \"MongoDB\" does not scale the same way as a stateless application frontend, In this scenario you could use VPA to scale up the MongoDB Pod. To enable VPA you need to use Kubernetes metrics server, which is an aggregator of resource usage data in your cluster. It is not deployed by default in Amazon EKS clusters. You need to configure it before configure VPA alternatively you can also use Prometheus to provide metrics for the Vertical Pod Autoscaler. While HPA and VPA scale the deployments and pods, Cluster Autoscaler will scale-out and scale-in the size of the pool of worker nodes. It adjusts the size of a Kubernetes cluster based on the current utilization. Cluster Autoscaler increases the size of the cluster when there are pods that failed to schedule on any of the current nodes due to insufficient resources or when adding a new node would increase the overall availability of cluster resources. Please follow this step by step guide to setup Cluster Autoscaler. If you are using Amazon EKS on AWS Fargate, AWS Manages the control plane for you. Please have a look at the reliability pillar for detailed information.","title":"Recommendations"},{"location":"performance/performance/#monitoring","text":"","title":"Monitoring"},{"location":"performance/performance/#deployment-best-practices","text":"","title":"Deployment Best Practices"},{"location":"performance/performance/#trade-offs","text":"","title":"Trade-Offs"},{"location":"reliability/docs/","text":"Amazon EKS Best Practices Guide for Reliability \u00b6 This section provides guidance about making workloads running on EKS resilient and highly-available How to use this guide \u00b6 This guide is meant for developers and architects who want to develop and operate highly-available and fault-tolerant services in EKS. The guide is organized into different topic areas for easier consumption. Each topic starts with a brief overview, followed by a list of recommendations and best practices for the reliability of your EKS clusters. Introduction \u00b6 The reliability best practices for EKS have been grouped under the following topics: Applications Control Plane Data Plane Network What makes a system reliable? If a system can function consistently and meet demands in spite of changes in its environment over a period of time, it can be called reliable. To achieve this, the system has to detect failures, automatically heal itself, and have the ability to scale based on demand. Customers can use Kubernetes as a foundation to operate mission-critical applications and services reliably. But aside from incorporating container-based application design principles, running workloads reliably also requires a reliable infrastructure. In Kubernetes, infrastructure comprises the control plane and data plane. EKS provides a production-grade Kubernetes control plane that is designed to be highly-available and fault-tolerant. In EKS, AWS is responsible for the reliability of the Kubernetes control plane. EKS runs Kubernetes control plane across three availability zones in an AWS Region. It automatically manages the availability and scalability of the Kubernetes API servers and the etcd cluster. The responsibility for the data plane\u2019s reliability is shared between you, the customer, and AWS. EKS offers three options for Kubernetes data plane. Fargate, which is the most managed option, handles provisioning and scaling of the data plane. The second option, managed nodes groups, handles provisioning, and updates of the data plane. And finally, self-managed nodes is the least managed option for the data plane. The more AWS-managed data plane you use, the less responsibility you have Managed node groups automate the provisioning and lifecycle management of EC2 nodes. You can use the EKS API (using EKS console, AWS API, AWS CLI, CloudFormation, Terraform, or eksctl ), to create, scale, and upgrade managed nodes. Managed nodes run EKS-optimized Amazon Linux 2 EC2 instances in your account, and you can install custom software packages by enabling SSH access. When you provision managed nodes, they run as part of an EKS-managed Auto Scaling Group that can span multiple Availability Zones; you control this through the subnets you provide when creating managed nodes. EKS also automatically tags managed nodes so they can be used with Cluster Autoscaler. Amazon EKS follows the shared responsibility model for CVEs and security patches on managed node groups. Because managed nodes run the Amazon EKS-optimized AMIs, Amazon EKS is responsible for building patched versions of these AMIs when bug fixes. However, you are responsible for deploying these patched AMI versions to your managed node groups. EKS also manages updating the nodes although you have to initiate the update process. The process of updating managed node is explained in the EKS documentation. If you run self-managed nodes, you can use Amazon EKS-optimized Linux AMI to create worker nodes. You are responsible for patching and upgrading the AMI and the nodes. It is a best practice to use eksctl , CloudFormation, or infrastructure as code tools to provision self-managed nodes because this will make it easy for you to upgrade self-managed nodes . Consider migrating to new nodes when updating worker nodes because the migration process taints the old node group as NoSchedule and drains the nodes after a new stack is ready to accept the existing pod workload. However, you can also perform an in-place upgrade of self-managed nodes . This guide includes a set of recommendations that you can use to improve the reliability of your EKS data plane, Kubernetes core components, and your applications. Feedback \u00b6 This guide is being released on GitHub to collect direct feedback and suggestions from the broader EKS/Kubernetes community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. We intend to update the guide periodically as new features are added to the service or when a new best practice evolves.","title":"Home"},{"location":"reliability/docs/#amazon-eks-best-practices-guide-for-reliability","text":"This section provides guidance about making workloads running on EKS resilient and highly-available","title":"Amazon EKS Best Practices Guide for Reliability"},{"location":"reliability/docs/#how-to-use-this-guide","text":"This guide is meant for developers and architects who want to develop and operate highly-available and fault-tolerant services in EKS. The guide is organized into different topic areas for easier consumption. Each topic starts with a brief overview, followed by a list of recommendations and best practices for the reliability of your EKS clusters.","title":"How to use this guide"},{"location":"reliability/docs/#introduction","text":"The reliability best practices for EKS have been grouped under the following topics: Applications Control Plane Data Plane Network What makes a system reliable? If a system can function consistently and meet demands in spite of changes in its environment over a period of time, it can be called reliable. To achieve this, the system has to detect failures, automatically heal itself, and have the ability to scale based on demand. Customers can use Kubernetes as a foundation to operate mission-critical applications and services reliably. But aside from incorporating container-based application design principles, running workloads reliably also requires a reliable infrastructure. In Kubernetes, infrastructure comprises the control plane and data plane. EKS provides a production-grade Kubernetes control plane that is designed to be highly-available and fault-tolerant. In EKS, AWS is responsible for the reliability of the Kubernetes control plane. EKS runs Kubernetes control plane across three availability zones in an AWS Region. It automatically manages the availability and scalability of the Kubernetes API servers and the etcd cluster. The responsibility for the data plane\u2019s reliability is shared between you, the customer, and AWS. EKS offers three options for Kubernetes data plane. Fargate, which is the most managed option, handles provisioning and scaling of the data plane. The second option, managed nodes groups, handles provisioning, and updates of the data plane. And finally, self-managed nodes is the least managed option for the data plane. The more AWS-managed data plane you use, the less responsibility you have Managed node groups automate the provisioning and lifecycle management of EC2 nodes. You can use the EKS API (using EKS console, AWS API, AWS CLI, CloudFormation, Terraform, or eksctl ), to create, scale, and upgrade managed nodes. Managed nodes run EKS-optimized Amazon Linux 2 EC2 instances in your account, and you can install custom software packages by enabling SSH access. When you provision managed nodes, they run as part of an EKS-managed Auto Scaling Group that can span multiple Availability Zones; you control this through the subnets you provide when creating managed nodes. EKS also automatically tags managed nodes so they can be used with Cluster Autoscaler. Amazon EKS follows the shared responsibility model for CVEs and security patches on managed node groups. Because managed nodes run the Amazon EKS-optimized AMIs, Amazon EKS is responsible for building patched versions of these AMIs when bug fixes. However, you are responsible for deploying these patched AMI versions to your managed node groups. EKS also manages updating the nodes although you have to initiate the update process. The process of updating managed node is explained in the EKS documentation. If you run self-managed nodes, you can use Amazon EKS-optimized Linux AMI to create worker nodes. You are responsible for patching and upgrading the AMI and the nodes. It is a best practice to use eksctl , CloudFormation, or infrastructure as code tools to provision self-managed nodes because this will make it easy for you to upgrade self-managed nodes . Consider migrating to new nodes when updating worker nodes because the migration process taints the old node group as NoSchedule and drains the nodes after a new stack is ready to accept the existing pod workload. However, you can also perform an in-place upgrade of self-managed nodes . This guide includes a set of recommendations that you can use to improve the reliability of your EKS data plane, Kubernetes core components, and your applications.","title":"Introduction"},{"location":"reliability/docs/#feedback","text":"This guide is being released on GitHub to collect direct feedback and suggestions from the broader EKS/Kubernetes community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. We intend to update the guide periodically as new features are added to the service or when a new best practice evolves.","title":"Feedback"},{"location":"reliability/docs/application/","text":"Running highly-available applications \u00b6 Your customers expect your application to be always available, including when you're making changes and especially during spikes in traffic. A scalable and resilient architecture keeps your applications and services running without disruptions, which keeps your users happy. A scalable infrastructure grows and shrinks based on the needs of the business. Eliminating single points of failure is a critical step towards improving an application\u2019s availability and making it resilient. With Kubernetes, you can operate your applications and run them in a highly-available and resilient fashion. Its declarative management ensures that once you\u2019ve set up the application, Kubernetes will continuously try to match the current state with the desired state . Recommendations \u00b6 Avoid running singleton Pods \u00b6 If your entire application runs in a single Pod, then your application will be unavailable if that Pod gets terminated. Instead of deploying applications using individual pods, create Deployments . If a Pod that is created by a Deployment fails or gets terminated, the Deployment controller will start a new pod to ensure the specified number of replica Pods are always running. Run multiple replicas \u00b6 Running multiple replicas Pods of an app using a Deployment helps it run in a highly-available manner. If one replica fails, the remaining replicas will still function, albeit at reduced capacity until Kubernetes creates another Pod to make up for the loss. Furthermore, you can use the Horizontal Pod Autoscaler to scale replicas automatically based on workload demand. Schedule replicas across nodes \u00b6 Running multiple replicas won\u2019t be very useful if all the replicas are running on the same node, and the node becomes unavailable. Consider using pod anti-affinity to spread replicas of a Deployment across multiple worker nodes. You can further improve a typical application\u2019s reliability by running it across multiple AZs. The manifest below tells Kubernetes scheduler to prefer to place pods on separate nodes and AZs. It doesn\u2019t require distinct nodes or AZ because if it did, then Kubernetes will not be able to schedule any pods once there is a pod running in each AZ. If your application requires just three replicas, you can use requiredDuringSchedulingIgnoredDuringExecution for topologyKey: topology.kubernetes.io/zone , and Kubernetes scheduler will not schedule two pods in the same AZ. piVersion : apps / v1 kind : Deployment metadata : name : spread - host - az labels : app : web - server spec : replicas : 4 selector : matchLabels : app : web - server template : metadata : labels : app : web - server spec : affinity : podAntiAffinity : preferredDuringSchedulingIgnoredDuringExecution : - podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - web - server topologyKey : topology . kubernetes . io / zone weight : 100 - podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - web - server topologyKey : kubernetes . io / hostname weight : 99 containers : - name : web - app image : nginx : 1.16 - alpine In version 1.18, Kubernetes introduced pod topology spread constraints , which allows you to spread Pods across AZs automatically. Run Kubernetes Metrics Server \u00b6 Install the Kubernetes metrics server to help scale your applications. Kubernetes autoscaler add-ons like HPA and VPA need to track metrics of applications to scale them. The metrics-server collects resource metrics that can be used to make scaling decisions. The metrics are collected from kubelets and served in Metrics API format . The metrics server doesn\u2019t retain any data, and it\u2019s not a monitoring solution. Its purpose is to expose CPU and memory usage metrics to other systems. If you want to track your application's state over time, you need a monitoring tool like Prometheus or Amazon CloudWatch. Follow the EKS documentation to install metrics-server in your EKS cluster. Horizontal Pod Autoscaler (HPA) \u00b6 HPA can automatically scale your application in response to demand and help you avoid impacting your customers during peak traffic. It is implemented as a control loop in Kubernetes that periodically queries metrics from APIs that provide resource metrics. HPA can retrieve metrics from the following APIs: 1. metrics.k8s.io also known as Resource Metrics API \u2014 Provides CPU and memory usage for pods 2. custom.metrics.k8s.io \u2014 Provides metrics from other metric collectors like Prometheus; these metrics are internal to your Kubernetes cluster. 3. external.metrics.k8s.io \u2014 Provides metrics that are external to your Kubernetes cluster (E.g., SQS Queue Depth, ELB latency). You must use one of these three APIs to provide the metric to scale your application. Scaling applications based on custom or external metrics \u00b6 You can use custom or external metrics to scale your application on metrics other than CPU or memory utilization. Custom Metrics API servers provide the custom-metrics.k8s.io API that HPA can use to autoscale applications. You can use the Prometheus Adapter for Kubernetes Metrics APIs to collect metrics from Prometheus and use with the HPA. In this case, Prometheus adapter will expose Prometheus metrics in Metrics API format . A list of all custom metrics implementation can be found in Kubernetes Documentation . Once you deploy the Prometheus Adapter, you can query custom metrics using kubectl. kubectl get \u2014raw /apis/custom.metrics.k8s.io/v1beta1/ External metrics , as the name suggests, provide the Horizontal Pod Autoscaler the ability to scale deployments using metrics that are external to the Kubernetes cluster. For example, in batch processing workloads, it is common to scale the number of replicas based on the number of jobs in flight in an SQS queue. To autoscale a Deployment using a CloudWatch metric, for example, scaling a batch-processor application based on SQS queue depth , you can use k8s-cloudwatch-adapter . k8s-cloudwatch-adapter is a community project and not maintained by AWS. Vertical Pod Autoscaler (VPA) \u00b6 VPA automatically adjusts the CPU and memory reservation for your Pods to help you \u201cright-size\u201d your applications. For applications that need to be scaled vertically - which is done by increasing resource allocation - you can use VPA to automatically scale Pod replicas or provide scaling recommendations. Your application may become temporarily unavailable if VPA needs to scale it because VPA\u2019s current implementation does not perform in-place adjustments to Pods; instead, it will recreate the Pod that needs to be scaled. EKS Documentation includes a walkthrough for setting up VPA. Fairwinds Goldilocks project provides a dashboard to visualize VPA recommendations for CPU and memory requests and limits. Its VPA update mode allows you to auto-scale Pods based on VPA recommendations. Updating applications \u00b6 Modern applications require rapid innovation with a high degree of stability and availability. Kubernetes gives you the tools to update your applications continuously without disrupting your customers. Let\u2019s look at some of the best practices that make it possible to quickly deploy changes without sacrificing availability. Have a mechanism to perform rollbacks \u00b6 Having an undo button can evade disasters. It is a best practice to test deployments in a separate lower environment (test or development environment) before updating the production cluster. Using a CI/CD pipeline can help you automate and test deployments. With a continuous deployment pipeline, you can quickly revert to the older version if the upgrade happens to be defective. You can use Deployments to update a running application. This is typically done by updating the container image. You can use kubectl to update a Deployment like this: kubectl --record deployment.apps/nginx-deployment set image nginx-deployment nginx = nginx:1.16.1 The --record argument record the changes to the Deployment and helps you if you need to perform a rollback. kubectl rollout history deployment shows you the recorded changes to Deployments in your cluster. You can rollback a change using kubectl rollout undo deployment <DEPLOYMENT_NAME> . By default, when you update a Deployment that requires a recreation of pods, Deployment will perform a rolling update . In other words, Kubernetes will only update a portion of the running pods in a Deployment and not all the Pods at once. You can control how Kubernetes performs rolling updates through RollingUpdateStrategy property. When performing a rolling update of a Deployment, you can use the Max Unavailable property to specify the maximum number of Pods that can be unavailable during the update. The Max Surge property of Deployment allows you to set the maximum number of Pods that can be created over the desired number of Pods. Consider adjusting max unavailable to ensure that a rollout doesn\u2019t disrupt your customers. For example, Kubernetes sets 25% max unavailable by default, which means if you have 100 Pods, you may have only 75 Pods actively working during a rollout. If your application needs a minimum of 80 Pods, this rollout can be disruptive. Instead, you can set max unavailable to 20% to ensure that there are at least 80 functional Pods throughout the rollout. Use blue/green deployments \u00b6 Changes are inherently risky, but changes that cannot be undone can be potentially catastrophic. Change procedures that allow you to effectively turn back time through a rollback make enhancements and experimentation safer. Blue/green deployments give you a method to quickly retract the changes if things go wrong. In this deployment strategy, you create an environment for the new version. This environment is identical to the current version of the application being updated. Once the new environment is provisioned, traffic is routed to the new environment. If the new version produces the desired results without generating errors, the old environment is terminated. Otherwise, traffic is restored to the old version. You can perform blue/green deployments in Kubernetes by creating a new Deployment that is identical to the existing version\u2019s Deployment. Once you verify that the Pods in the new Deployment are running without errors, you can start sending traffic to the new Deployment by changing the selector spec in the Service that routes traffic to your application\u2019s Pods. Many continuous integration tools such as Flux , Jenkins , and Spinnaker let you automate blue/green deployments. Kubernetes blog includes a walkthrough using Jenkins: Zero-downtime Deployment in Kubernetes with Jenkins Use Canary deployments \u00b6 Canary deployments are a variant of blue/green deployments that can significantly remove risk from changes. In this deployment strategy, you create a new Deployment with fewer Pods alongside your old Deployment, and divert a small percentage of traffic to the new Deployment. If metrics indicate that the new version is performing as well or better than the existing version, you progressively increase traffic to the new Deployment while scaling it up until all traffic is diverted to the new Deployment. If there's an issue, you can route all traffic to the old Deployment and stop sending traffic to the new Deployment. Although Kubernetes offers no native way to perform canary deployments, you can use tools such as Flagger with Istio or App Mesh . Health checks and self-healing \u00b6 No software is bug-free, but Kubernetes can help you to minimize the impact of software failures. In the past, if an application crashed, someone had to remediate the situation by restarting the application manually. Kubernetes gives you the ability to detect software failures in your Pods and automatically replace them with new replicas. With Kubernetes you can monitor the health of your applications and automatically replace unhealthy instances. Kubernetes supports three types of health-checks : Liveness probe Startup probe (supported in Kubernetes version 1.16+) Readiness probe Kubelet , the Kubernetes agent, is responsible for running all the above-mentioned checks. Kubelet can check a Pods' health in three ways: kubelet can either run a shell command inside a Pod's container, send an HTTP GET request to its container, or open a TCP socket on a specified port. If you choose an exec -based probe, which runs a shell script inside a container, ensure that the shell command exits before the timeoutSeconds value expires. Otherwise, your node will have <defunct> processes, leading to node failure. Recommendations \u00b6 Use Liveness Probe to remove unhealthy pods \u00b6 The Liveness probe can detect deadlock conditions where the process continues to run, but the application becomes unresponsive. For example, if you are running a web service that listens on port 80, you can configure a Liveness probe to send an HTTP GET request on Pod\u2019s port 80. Kubelet will periodically send a GET request to the Pod and expect a response; if the Pod responds between 200-399 then the kubelet considers that Pod is healthy; otherwise, the Pod will be marked as unhealthy. If a Pod fails health-checks continuously, the kubelet will terminate it. You can use initialDelaySeconds to delay the first probe. When using the Liveness Probe, ensure that your application doesn\u2019t run into a situation in which all Pods simultaneously fail the Liveness Probe because Kubernetes will try to replace all your Pods, which will render your application offline. Furthermore, Kubernetes will continue to create new Pods that will also fail Liveness Probes, putting unnecessary strain on the control plane. Avoid configuring the Liveness Probe to depend on an a factor that is external to your Pod, for example, a external database. In other words, a non-responsive external-to-your-Pod database shouldn\u2019t make your Pods fail their Liveness Probes. Sandor Sz\u00fccs\u2019s post LIVENESS PROBES ARE DANGEROUS describes problems that can be caused by misconfigured probes. Use Startup Probe for applications that take longer to start \u00b6 When your app needs additional time to startup, you can use the Startup Probe to delay the Liveness and Readiness Probe. For example, a Java app that needs to hydrate cache from a database may need up to two minutes before it is fully functional. Any Liveness or Readiness Probe until it becomes fully functional might fail. Configuring a Startup Probe will allow the Java app to become healthy before Liveness or Readiness Probe are executed. Until the Startup Probe succeeds, all the other Probes are disabled. You can define the maximum time Kubernetes should wait for application startup. If, after the maximum configured time, the Pod still fails Startup Probes, it will be terminated, and a new Pod will be created. The Startup Probe is similar to the Liveness Probe -- if they fail, the Pod is recreated. As Ricardo A. explains in his post Fantastic Probes And How To Configure Them , Startup Probes should be used when the startup time of an application is unpredictable. If you know your application needs ten seconds to start, use should use Liveness/Readiness Probe with initialDelaySeconds instead. Use Readiness Probe to detect partial unavailability \u00b6 While the Liveness probe detects failures in an app that are resolved by terminating the Pod (hence, restarting the app), Readiness Probe detects conditions where the app may be temporarily unavailable. In these situations, the app may become temporarily unresponsive; however, it is expected to be healthy again once this operation completes. For example, during intense disk I/O operations, applications may be temporarily unavailable to handle requests. Here, terminating the application\u2019s Pod is not a remedy; at the same time, additional requests sent to the Pod can fail. You can use the Readiness Probe to detect temporary unavailability in your app and stop sending requests to its Pod until it becomes functional again. Unlike Liveness Probe, where a failure would result in a recreation of Pod, a failed Readiness Probe would mean that Pod will not receive any traffic from Kubernetes Service . When the Readiness Probe succeeds, Pod will resume receiving traffic from Service. Just like the Liveness Probe, avoid configuring Readiness Probes that depend on a resource that\u2019s external to the Pod (such as a database). Here\u2019s a scenario where a poorly configured Readiness can render the application nonfunctional - if a Pod\u2019s Readiness Probe fails when the app\u2019s database is unreachable, other Pod replicas will also fail simultaneously since they share the same health-check criteria. Setting the probe in this way will ensure that whenever the database is unavailable, the Pod\u2019s Readiness Probes will fail, and Kubernetes will stop sending traffic all Pods. A side-effect of using Readiness Probes is that they can increase the time it takes to update Deployments. New replicas will not receive traffic unless Readiness Probes are successful; until then, old replicas will continue to receive traffic. Dealing with disruptions \u00b6 Pods have a finite lifetime - even if you have long-running Pods, it\u2019s prudent to ensure Pods terminate correctly when the time comes. Depending on your upgrade strategy, Kubernetes cluster upgrades may require you to create new worker nodes, which requires all Pods to be recreated on newer nodes. Proper termination handling and Pod Disruption Budgets can help you avoid service disruptions as Pods are removed from older nodes and recreated on newer nodes. The preferred way to upgrade worker nodes is by creating new worker nodes and terminating old ones. Before terminating worker nodes, you should drain it. When a worker node is drained, all its pods are safely evicted. Safely is a key word here; when pods on a worker are evicted, they are not simply sent a SIGKILL signal. Instead, a SIGTERM signal is sent to the main process (PID 1) of each container in the Pods being evicted. After the SIGTERM signal is sent, Kubernetes will give the process some time (grace period) before a SIGKILL signal is sent. This grace period is 30 seconds by default; you can override the default by using grace-period flag in kubectl or declare terminationGracePeriodSeconds in your Podspec. kubectl delete pod <pod name> \u2014grace-period=<seconds> It is common to have containers in which the main process doesn\u2019t have PID 1. Consider this Python-based sample container: $ kubectl exec python-app -it ps PID USER TIME COMMAND 1 root 0 :00 { script.sh } /bin/sh ./script.sh 5 root 0 :00 python app.py In this example, the shell script receives SIGTERM , the main process, which happens to be a Python application in this example, doesn\u2019t get a SIGTERM signal. When the Pod is terminated, the Python application will be killed abruptly. This can be remediated by changing the ENTRYPOINT of the container to launch the Python application. Alternatively, you can use a tool like dumb-init to ensure that your application can handle signals. You can also use Container hooks to execute a script or an HTTP request at container start or stop. The PreStop hook action runs when the container receives a SIGTERM signal and is killed after terminationGracePeriodSeconds . Recommendations \u00b6 Protect critical workload with Pod Disruption Budgets \u00b6 Pod Disruption Budget or PDB can temporarily halt the eviction process if the number of replicas of an application falls below the declared threshold. The eviction process will continue once the number of available replicas is over the threshold. You can use PDB to declare the minAvailable and maxUnavailable number of replicas. For example, if you want at least three copies of your app to be available, you can create a PDB. apiVersion : policy / v1beta1 kind : PodDisruptionBudget metadata : name : my - svc - pdb spec : minAvailable : 3 selector : matchLabels : app : my - svc The above PDB policy tells Kubernetes to halt the eviction process until three or more replicas are available. Node draining respects PodDisruptionBudgets . During an EKS managed node group upgrade, nodes are drained with a fifteen-minute timeout . After fifteen minutes, if the update is not forced (the option is called Rolling update in the EKS console), the update fails. If the update is forced, the pods are deleted. For self-managed nodes, you can also use tools like AWS Node Termination Handler , which ensures that the Kubernetes control plane responds appropriately to events that can cause your EC2 instance to become unavailable, such as EC2 maintenance events and EC2 Spot interruptions . It uses the Kubernetes API to cordon the node to ensure no new Pods are scheduled, then drains it, terminating any running Pods. You can use Pod anti-affinity to schedule a Deployment\u2018s Pods on different nodes and avoid PDB related delays during node upgrades. Practice chaos engineering \u00b6 Chaos Engineering is the discipline of experimenting on a distributed system in order to build confidence in the system\u2019s capability to withstand turbulent conditions in production. In his blog, Dominik Tornow explains that Kubernetes is a declarative system where \u201c the user supplies a representation of the desired state of the system to the system. The system then considers the current state and the desired state to determine the sequence of commands to transition from the current state to the desired state. \u201d This means Kubernetes always stores the desired state and if the system deviates, Kubernetes will take action to restore the state. For example, if a worker node becomes unavailable, Kubernetes will reschedule the Pods onto another worker node. Similarly, if a replica crashes, the Deployment Contoller will create a new replica . In this way, Kubernetes controllers automatically fix failures. Chaos engineering tools like Gremlin help you test the resiliency of your Kubernetes cluster and identify single points of failure. Tools that introduce artificial chaos in your cluster (and beyond) can uncover systemic weaknesses, present an opportunity to identify bottlenecks and misconfigurations, and rectify problems in a controlled environment. The Chaos Engineering philosophy advocates breaking things on purpose and stress testing infrastructure to minimize unanticipated downtime. Use a Service Mesh \u00b6 You can use a service mesh to improve your application\u2019s resiliency. Service meshes enable service-to-service communication and increase the observability of your microservices network. Most service mesh products work by having a small network proxy run alongside each service that intercepts and inspects the application\u2019s network traffic. You can place your application in a mesh without modifying your application. Using service proxy\u2019s built-in features, you can have it generate network statistics, create access logs, and add HTTP headers to outbound requests for distributed tracing. A service mesh can help you make your microservices more resilient with features like automatic request retries, timeouts, circuit-breaking, and rate-limiting. If you operate multiple clusters, you can use a service mesh to enable cross-cluster service-to-service communication. Service Meshes \u00b6 AWS App Mesh Istio LinkerD Consul Observability \u00b6 Observability is an umbrella term that includes monitoring, logging, and tracing. Microservices based applications are distributed by nature. Unlike monolithic applications where monitoring a single system is sufficient, in a distributed application architecture, you need to monitor each component\u2019s performance. You can use cluster-level monitoring, logging, and distributed tracing systems to identify issues in your cluster before they disrupt your customers. Kubernetes built-in tools for troubleshooting and monitoring are limited. The metrics-server collects resource metrics and stores them in memory but doesn\u2019t persist them. You can view the logs of a Pod using kubectl, but Kubernetes doesn't automatically retain logs. And the implementation of distributed tracing is done either at the application code level or using services meshes. Kubernetes' extensibility shines here. Kubernetes allows you to bring your preferred centralized monitoring, logging, and tracing solution. Recommendations \u00b6 Monitor your applications \u00b6 The number of metrics you need to monitor in modern applications is growing continuously. It helps if you have an automated way to track your applications so you can focus on solving your customer\u2019s challenges. Cluster-wide monitoring tools like Prometheus or CloudWatch Container Insights can monitor your cluster and workload and provide you signals when, or preferably, before things go wrong. Monitoring tools allow you to create alerts that your operations team can subscribe to. Consider rules to activate alarms for events that can, when exacerbated, lead to an outage or impact application performance. If you\u2019re unclear on which metrics you should monitor, you can take inspiration from these methods: RED method . Stands for requests, errors, and duration. USE method . Stands for utilization, saturation, and errors. Sysdig\u2019s post Best practices for alerting on Kubernetes includes a comprehensive list of components that can impact the availability of your applications. Use Prometheus client library to expose application metrics \u00b6 In addition to monitoring the state of the application and aggregating standard metrics, you can also use the Prometheus client library to expose application-specific custom metrics to improve the application's observability. Use centralized logging tools to collect and persist logs \u00b6 Logging in EKS falls under two categories: control plane logs and application logs. EKS control plane logging provides audit and diagnostic logs directly from the control plane to CloudWatch Logs in your account. Application logs are logs produced by Pods running inside your cluster. Application logs include logs produced by Pods that run the business logic applications and Kubernetes system components such as CoreDNS, Cluster Autoscaler, Prometheus, etc. EKS provide five types of control plane logs : Kubernetes API server component logs Audit Authenticator Controller manager Scheduler The controller manager and scheduler logs can help diagnose control plane problems such as bottlenecks and errors. By default, EKS control plane logs aren\u2019t sent to CloudWatch Logs. You can enable control plane logging and select the types of EKS control plane logs you\u2019d like to capture for each cluster in your account Collecting application logs requires installing a log aggregator tool like Fluent Bit , Fluentd , or CloudWatch Container Insights in your cluster. Kubernetes log aggregator tools run as DaemonSets and scrape container logs from nodes. Application logs are then sent to a centralized destination for storage. For example, CloudWatch Container Insights can use either Fluent Bit or Fluentd to collect logs and ship them to CloudWatch Logs for storage. Fluent Bit and Fluentd support many popular log analytics systems such as Elasticsearch and InfluxDB giving you the ability to change the storage backend for your logs by modifying Fluent bit or Fluentd\u2019s log configuration. Use a distributed tracing system to identify bottlenecks \u00b6 A typical modern application has components distributed over the network, and its reliability depends on the proper functioning of each of the components that make up the application. You can use a distributed tracing solution to understand how requests flow and how systems communicate. Traces can show you where bottlenecks exist in your application network and prevent problems that can cause cascading failures. You have two options to implement tracing in your applications: you can either implement distributed tracing at the code level using shared libraries or use a service mesh. Implementing tracing at the code level can be disadvantageous. In this method, you have to make changes to your code. This is further complicated if you have polyglot applications. You\u2019re also responsible for maintaining yet another library, across your services. Service Meshes like LinkerD , Istio , and AWS App Mesh can be used to implement distributed tracing in your application with minimal changes to the application code. You can use service mesh to standardize metrics generation, logging, and tracing. Tracing tools like AWS X-Ray , Jaeger support both shared library and service mesh implementations. Consider using a tracing tool like AWS X-Ray or Jaeger that supports both (shared library and service mesh) implementations so you will not have to switch tools if you later adopt service mesh.","title":"Applications"},{"location":"reliability/docs/application/#running-highly-available-applications","text":"Your customers expect your application to be always available, including when you're making changes and especially during spikes in traffic. A scalable and resilient architecture keeps your applications and services running without disruptions, which keeps your users happy. A scalable infrastructure grows and shrinks based on the needs of the business. Eliminating single points of failure is a critical step towards improving an application\u2019s availability and making it resilient. With Kubernetes, you can operate your applications and run them in a highly-available and resilient fashion. Its declarative management ensures that once you\u2019ve set up the application, Kubernetes will continuously try to match the current state with the desired state .","title":"Running highly-available applications"},{"location":"reliability/docs/application/#recommendations","text":"","title":"Recommendations"},{"location":"reliability/docs/application/#avoid-running-singleton-pods","text":"If your entire application runs in a single Pod, then your application will be unavailable if that Pod gets terminated. Instead of deploying applications using individual pods, create Deployments . If a Pod that is created by a Deployment fails or gets terminated, the Deployment controller will start a new pod to ensure the specified number of replica Pods are always running.","title":"Avoid running singleton Pods"},{"location":"reliability/docs/application/#run-multiple-replicas","text":"Running multiple replicas Pods of an app using a Deployment helps it run in a highly-available manner. If one replica fails, the remaining replicas will still function, albeit at reduced capacity until Kubernetes creates another Pod to make up for the loss. Furthermore, you can use the Horizontal Pod Autoscaler to scale replicas automatically based on workload demand.","title":"Run multiple replicas"},{"location":"reliability/docs/application/#schedule-replicas-across-nodes","text":"Running multiple replicas won\u2019t be very useful if all the replicas are running on the same node, and the node becomes unavailable. Consider using pod anti-affinity to spread replicas of a Deployment across multiple worker nodes. You can further improve a typical application\u2019s reliability by running it across multiple AZs. The manifest below tells Kubernetes scheduler to prefer to place pods on separate nodes and AZs. It doesn\u2019t require distinct nodes or AZ because if it did, then Kubernetes will not be able to schedule any pods once there is a pod running in each AZ. If your application requires just three replicas, you can use requiredDuringSchedulingIgnoredDuringExecution for topologyKey: topology.kubernetes.io/zone , and Kubernetes scheduler will not schedule two pods in the same AZ. piVersion : apps / v1 kind : Deployment metadata : name : spread - host - az labels : app : web - server spec : replicas : 4 selector : matchLabels : app : web - server template : metadata : labels : app : web - server spec : affinity : podAntiAffinity : preferredDuringSchedulingIgnoredDuringExecution : - podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - web - server topologyKey : topology . kubernetes . io / zone weight : 100 - podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - web - server topologyKey : kubernetes . io / hostname weight : 99 containers : - name : web - app image : nginx : 1.16 - alpine In version 1.18, Kubernetes introduced pod topology spread constraints , which allows you to spread Pods across AZs automatically.","title":"Schedule replicas across nodes"},{"location":"reliability/docs/application/#run-kubernetes-metrics-server","text":"Install the Kubernetes metrics server to help scale your applications. Kubernetes autoscaler add-ons like HPA and VPA need to track metrics of applications to scale them. The metrics-server collects resource metrics that can be used to make scaling decisions. The metrics are collected from kubelets and served in Metrics API format . The metrics server doesn\u2019t retain any data, and it\u2019s not a monitoring solution. Its purpose is to expose CPU and memory usage metrics to other systems. If you want to track your application's state over time, you need a monitoring tool like Prometheus or Amazon CloudWatch. Follow the EKS documentation to install metrics-server in your EKS cluster.","title":"Run Kubernetes Metrics Server"},{"location":"reliability/docs/application/#horizontal-pod-autoscaler-hpa","text":"HPA can automatically scale your application in response to demand and help you avoid impacting your customers during peak traffic. It is implemented as a control loop in Kubernetes that periodically queries metrics from APIs that provide resource metrics. HPA can retrieve metrics from the following APIs: 1. metrics.k8s.io also known as Resource Metrics API \u2014 Provides CPU and memory usage for pods 2. custom.metrics.k8s.io \u2014 Provides metrics from other metric collectors like Prometheus; these metrics are internal to your Kubernetes cluster. 3. external.metrics.k8s.io \u2014 Provides metrics that are external to your Kubernetes cluster (E.g., SQS Queue Depth, ELB latency). You must use one of these three APIs to provide the metric to scale your application.","title":"Horizontal Pod Autoscaler (HPA)"},{"location":"reliability/docs/application/#scaling-applications-based-on-custom-or-external-metrics","text":"You can use custom or external metrics to scale your application on metrics other than CPU or memory utilization. Custom Metrics API servers provide the custom-metrics.k8s.io API that HPA can use to autoscale applications. You can use the Prometheus Adapter for Kubernetes Metrics APIs to collect metrics from Prometheus and use with the HPA. In this case, Prometheus adapter will expose Prometheus metrics in Metrics API format . A list of all custom metrics implementation can be found in Kubernetes Documentation . Once you deploy the Prometheus Adapter, you can query custom metrics using kubectl. kubectl get \u2014raw /apis/custom.metrics.k8s.io/v1beta1/ External metrics , as the name suggests, provide the Horizontal Pod Autoscaler the ability to scale deployments using metrics that are external to the Kubernetes cluster. For example, in batch processing workloads, it is common to scale the number of replicas based on the number of jobs in flight in an SQS queue. To autoscale a Deployment using a CloudWatch metric, for example, scaling a batch-processor application based on SQS queue depth , you can use k8s-cloudwatch-adapter . k8s-cloudwatch-adapter is a community project and not maintained by AWS.","title":"Scaling applications based on custom or external metrics"},{"location":"reliability/docs/application/#vertical-pod-autoscaler-vpa","text":"VPA automatically adjusts the CPU and memory reservation for your Pods to help you \u201cright-size\u201d your applications. For applications that need to be scaled vertically - which is done by increasing resource allocation - you can use VPA to automatically scale Pod replicas or provide scaling recommendations. Your application may become temporarily unavailable if VPA needs to scale it because VPA\u2019s current implementation does not perform in-place adjustments to Pods; instead, it will recreate the Pod that needs to be scaled. EKS Documentation includes a walkthrough for setting up VPA. Fairwinds Goldilocks project provides a dashboard to visualize VPA recommendations for CPU and memory requests and limits. Its VPA update mode allows you to auto-scale Pods based on VPA recommendations.","title":"Vertical Pod Autoscaler (VPA)"},{"location":"reliability/docs/application/#updating-applications","text":"Modern applications require rapid innovation with a high degree of stability and availability. Kubernetes gives you the tools to update your applications continuously without disrupting your customers. Let\u2019s look at some of the best practices that make it possible to quickly deploy changes without sacrificing availability.","title":"Updating applications"},{"location":"reliability/docs/application/#have-a-mechanism-to-perform-rollbacks","text":"Having an undo button can evade disasters. It is a best practice to test deployments in a separate lower environment (test or development environment) before updating the production cluster. Using a CI/CD pipeline can help you automate and test deployments. With a continuous deployment pipeline, you can quickly revert to the older version if the upgrade happens to be defective. You can use Deployments to update a running application. This is typically done by updating the container image. You can use kubectl to update a Deployment like this: kubectl --record deployment.apps/nginx-deployment set image nginx-deployment nginx = nginx:1.16.1 The --record argument record the changes to the Deployment and helps you if you need to perform a rollback. kubectl rollout history deployment shows you the recorded changes to Deployments in your cluster. You can rollback a change using kubectl rollout undo deployment <DEPLOYMENT_NAME> . By default, when you update a Deployment that requires a recreation of pods, Deployment will perform a rolling update . In other words, Kubernetes will only update a portion of the running pods in a Deployment and not all the Pods at once. You can control how Kubernetes performs rolling updates through RollingUpdateStrategy property. When performing a rolling update of a Deployment, you can use the Max Unavailable property to specify the maximum number of Pods that can be unavailable during the update. The Max Surge property of Deployment allows you to set the maximum number of Pods that can be created over the desired number of Pods. Consider adjusting max unavailable to ensure that a rollout doesn\u2019t disrupt your customers. For example, Kubernetes sets 25% max unavailable by default, which means if you have 100 Pods, you may have only 75 Pods actively working during a rollout. If your application needs a minimum of 80 Pods, this rollout can be disruptive. Instead, you can set max unavailable to 20% to ensure that there are at least 80 functional Pods throughout the rollout.","title":"Have a mechanism to perform rollbacks"},{"location":"reliability/docs/application/#use-bluegreen-deployments","text":"Changes are inherently risky, but changes that cannot be undone can be potentially catastrophic. Change procedures that allow you to effectively turn back time through a rollback make enhancements and experimentation safer. Blue/green deployments give you a method to quickly retract the changes if things go wrong. In this deployment strategy, you create an environment for the new version. This environment is identical to the current version of the application being updated. Once the new environment is provisioned, traffic is routed to the new environment. If the new version produces the desired results without generating errors, the old environment is terminated. Otherwise, traffic is restored to the old version. You can perform blue/green deployments in Kubernetes by creating a new Deployment that is identical to the existing version\u2019s Deployment. Once you verify that the Pods in the new Deployment are running without errors, you can start sending traffic to the new Deployment by changing the selector spec in the Service that routes traffic to your application\u2019s Pods. Many continuous integration tools such as Flux , Jenkins , and Spinnaker let you automate blue/green deployments. Kubernetes blog includes a walkthrough using Jenkins: Zero-downtime Deployment in Kubernetes with Jenkins","title":"Use blue/green deployments"},{"location":"reliability/docs/application/#use-canary-deployments","text":"Canary deployments are a variant of blue/green deployments that can significantly remove risk from changes. In this deployment strategy, you create a new Deployment with fewer Pods alongside your old Deployment, and divert a small percentage of traffic to the new Deployment. If metrics indicate that the new version is performing as well or better than the existing version, you progressively increase traffic to the new Deployment while scaling it up until all traffic is diverted to the new Deployment. If there's an issue, you can route all traffic to the old Deployment and stop sending traffic to the new Deployment. Although Kubernetes offers no native way to perform canary deployments, you can use tools such as Flagger with Istio or App Mesh .","title":"Use Canary deployments"},{"location":"reliability/docs/application/#health-checks-and-self-healing","text":"No software is bug-free, but Kubernetes can help you to minimize the impact of software failures. In the past, if an application crashed, someone had to remediate the situation by restarting the application manually. Kubernetes gives you the ability to detect software failures in your Pods and automatically replace them with new replicas. With Kubernetes you can monitor the health of your applications and automatically replace unhealthy instances. Kubernetes supports three types of health-checks : Liveness probe Startup probe (supported in Kubernetes version 1.16+) Readiness probe Kubelet , the Kubernetes agent, is responsible for running all the above-mentioned checks. Kubelet can check a Pods' health in three ways: kubelet can either run a shell command inside a Pod's container, send an HTTP GET request to its container, or open a TCP socket on a specified port. If you choose an exec -based probe, which runs a shell script inside a container, ensure that the shell command exits before the timeoutSeconds value expires. Otherwise, your node will have <defunct> processes, leading to node failure.","title":"Health checks and self-healing"},{"location":"reliability/docs/application/#recommendations_1","text":"","title":"Recommendations"},{"location":"reliability/docs/application/#use-liveness-probe-to-remove-unhealthy-pods","text":"The Liveness probe can detect deadlock conditions where the process continues to run, but the application becomes unresponsive. For example, if you are running a web service that listens on port 80, you can configure a Liveness probe to send an HTTP GET request on Pod\u2019s port 80. Kubelet will periodically send a GET request to the Pod and expect a response; if the Pod responds between 200-399 then the kubelet considers that Pod is healthy; otherwise, the Pod will be marked as unhealthy. If a Pod fails health-checks continuously, the kubelet will terminate it. You can use initialDelaySeconds to delay the first probe. When using the Liveness Probe, ensure that your application doesn\u2019t run into a situation in which all Pods simultaneously fail the Liveness Probe because Kubernetes will try to replace all your Pods, which will render your application offline. Furthermore, Kubernetes will continue to create new Pods that will also fail Liveness Probes, putting unnecessary strain on the control plane. Avoid configuring the Liveness Probe to depend on an a factor that is external to your Pod, for example, a external database. In other words, a non-responsive external-to-your-Pod database shouldn\u2019t make your Pods fail their Liveness Probes. Sandor Sz\u00fccs\u2019s post LIVENESS PROBES ARE DANGEROUS describes problems that can be caused by misconfigured probes.","title":"Use Liveness Probe to remove unhealthy pods"},{"location":"reliability/docs/application/#use-startup-probe-for-applications-that-take-longer-to-start","text":"When your app needs additional time to startup, you can use the Startup Probe to delay the Liveness and Readiness Probe. For example, a Java app that needs to hydrate cache from a database may need up to two minutes before it is fully functional. Any Liveness or Readiness Probe until it becomes fully functional might fail. Configuring a Startup Probe will allow the Java app to become healthy before Liveness or Readiness Probe are executed. Until the Startup Probe succeeds, all the other Probes are disabled. You can define the maximum time Kubernetes should wait for application startup. If, after the maximum configured time, the Pod still fails Startup Probes, it will be terminated, and a new Pod will be created. The Startup Probe is similar to the Liveness Probe -- if they fail, the Pod is recreated. As Ricardo A. explains in his post Fantastic Probes And How To Configure Them , Startup Probes should be used when the startup time of an application is unpredictable. If you know your application needs ten seconds to start, use should use Liveness/Readiness Probe with initialDelaySeconds instead.","title":"Use Startup Probe for applications that take longer to start"},{"location":"reliability/docs/application/#use-readiness-probe-to-detect-partial-unavailability","text":"While the Liveness probe detects failures in an app that are resolved by terminating the Pod (hence, restarting the app), Readiness Probe detects conditions where the app may be temporarily unavailable. In these situations, the app may become temporarily unresponsive; however, it is expected to be healthy again once this operation completes. For example, during intense disk I/O operations, applications may be temporarily unavailable to handle requests. Here, terminating the application\u2019s Pod is not a remedy; at the same time, additional requests sent to the Pod can fail. You can use the Readiness Probe to detect temporary unavailability in your app and stop sending requests to its Pod until it becomes functional again. Unlike Liveness Probe, where a failure would result in a recreation of Pod, a failed Readiness Probe would mean that Pod will not receive any traffic from Kubernetes Service . When the Readiness Probe succeeds, Pod will resume receiving traffic from Service. Just like the Liveness Probe, avoid configuring Readiness Probes that depend on a resource that\u2019s external to the Pod (such as a database). Here\u2019s a scenario where a poorly configured Readiness can render the application nonfunctional - if a Pod\u2019s Readiness Probe fails when the app\u2019s database is unreachable, other Pod replicas will also fail simultaneously since they share the same health-check criteria. Setting the probe in this way will ensure that whenever the database is unavailable, the Pod\u2019s Readiness Probes will fail, and Kubernetes will stop sending traffic all Pods. A side-effect of using Readiness Probes is that they can increase the time it takes to update Deployments. New replicas will not receive traffic unless Readiness Probes are successful; until then, old replicas will continue to receive traffic.","title":"Use Readiness Probe to detect partial unavailability"},{"location":"reliability/docs/application/#dealing-with-disruptions","text":"Pods have a finite lifetime - even if you have long-running Pods, it\u2019s prudent to ensure Pods terminate correctly when the time comes. Depending on your upgrade strategy, Kubernetes cluster upgrades may require you to create new worker nodes, which requires all Pods to be recreated on newer nodes. Proper termination handling and Pod Disruption Budgets can help you avoid service disruptions as Pods are removed from older nodes and recreated on newer nodes. The preferred way to upgrade worker nodes is by creating new worker nodes and terminating old ones. Before terminating worker nodes, you should drain it. When a worker node is drained, all its pods are safely evicted. Safely is a key word here; when pods on a worker are evicted, they are not simply sent a SIGKILL signal. Instead, a SIGTERM signal is sent to the main process (PID 1) of each container in the Pods being evicted. After the SIGTERM signal is sent, Kubernetes will give the process some time (grace period) before a SIGKILL signal is sent. This grace period is 30 seconds by default; you can override the default by using grace-period flag in kubectl or declare terminationGracePeriodSeconds in your Podspec. kubectl delete pod <pod name> \u2014grace-period=<seconds> It is common to have containers in which the main process doesn\u2019t have PID 1. Consider this Python-based sample container: $ kubectl exec python-app -it ps PID USER TIME COMMAND 1 root 0 :00 { script.sh } /bin/sh ./script.sh 5 root 0 :00 python app.py In this example, the shell script receives SIGTERM , the main process, which happens to be a Python application in this example, doesn\u2019t get a SIGTERM signal. When the Pod is terminated, the Python application will be killed abruptly. This can be remediated by changing the ENTRYPOINT of the container to launch the Python application. Alternatively, you can use a tool like dumb-init to ensure that your application can handle signals. You can also use Container hooks to execute a script or an HTTP request at container start or stop. The PreStop hook action runs when the container receives a SIGTERM signal and is killed after terminationGracePeriodSeconds .","title":"Dealing with disruptions"},{"location":"reliability/docs/application/#recommendations_2","text":"","title":"Recommendations"},{"location":"reliability/docs/application/#protect-critical-workload-with-pod-disruption-budgets","text":"Pod Disruption Budget or PDB can temporarily halt the eviction process if the number of replicas of an application falls below the declared threshold. The eviction process will continue once the number of available replicas is over the threshold. You can use PDB to declare the minAvailable and maxUnavailable number of replicas. For example, if you want at least three copies of your app to be available, you can create a PDB. apiVersion : policy / v1beta1 kind : PodDisruptionBudget metadata : name : my - svc - pdb spec : minAvailable : 3 selector : matchLabels : app : my - svc The above PDB policy tells Kubernetes to halt the eviction process until three or more replicas are available. Node draining respects PodDisruptionBudgets . During an EKS managed node group upgrade, nodes are drained with a fifteen-minute timeout . After fifteen minutes, if the update is not forced (the option is called Rolling update in the EKS console), the update fails. If the update is forced, the pods are deleted. For self-managed nodes, you can also use tools like AWS Node Termination Handler , which ensures that the Kubernetes control plane responds appropriately to events that can cause your EC2 instance to become unavailable, such as EC2 maintenance events and EC2 Spot interruptions . It uses the Kubernetes API to cordon the node to ensure no new Pods are scheduled, then drains it, terminating any running Pods. You can use Pod anti-affinity to schedule a Deployment\u2018s Pods on different nodes and avoid PDB related delays during node upgrades.","title":"Protect critical workload with Pod Disruption Budgets"},{"location":"reliability/docs/application/#practice-chaos-engineering","text":"Chaos Engineering is the discipline of experimenting on a distributed system in order to build confidence in the system\u2019s capability to withstand turbulent conditions in production. In his blog, Dominik Tornow explains that Kubernetes is a declarative system where \u201c the user supplies a representation of the desired state of the system to the system. The system then considers the current state and the desired state to determine the sequence of commands to transition from the current state to the desired state. \u201d This means Kubernetes always stores the desired state and if the system deviates, Kubernetes will take action to restore the state. For example, if a worker node becomes unavailable, Kubernetes will reschedule the Pods onto another worker node. Similarly, if a replica crashes, the Deployment Contoller will create a new replica . In this way, Kubernetes controllers automatically fix failures. Chaos engineering tools like Gremlin help you test the resiliency of your Kubernetes cluster and identify single points of failure. Tools that introduce artificial chaos in your cluster (and beyond) can uncover systemic weaknesses, present an opportunity to identify bottlenecks and misconfigurations, and rectify problems in a controlled environment. The Chaos Engineering philosophy advocates breaking things on purpose and stress testing infrastructure to minimize unanticipated downtime.","title":"Practice chaos engineering"},{"location":"reliability/docs/application/#use-a-service-mesh","text":"You can use a service mesh to improve your application\u2019s resiliency. Service meshes enable service-to-service communication and increase the observability of your microservices network. Most service mesh products work by having a small network proxy run alongside each service that intercepts and inspects the application\u2019s network traffic. You can place your application in a mesh without modifying your application. Using service proxy\u2019s built-in features, you can have it generate network statistics, create access logs, and add HTTP headers to outbound requests for distributed tracing. A service mesh can help you make your microservices more resilient with features like automatic request retries, timeouts, circuit-breaking, and rate-limiting. If you operate multiple clusters, you can use a service mesh to enable cross-cluster service-to-service communication.","title":"Use a Service Mesh"},{"location":"reliability/docs/application/#service-meshes","text":"AWS App Mesh Istio LinkerD Consul","title":"Service Meshes"},{"location":"reliability/docs/application/#observability","text":"Observability is an umbrella term that includes monitoring, logging, and tracing. Microservices based applications are distributed by nature. Unlike monolithic applications where monitoring a single system is sufficient, in a distributed application architecture, you need to monitor each component\u2019s performance. You can use cluster-level monitoring, logging, and distributed tracing systems to identify issues in your cluster before they disrupt your customers. Kubernetes built-in tools for troubleshooting and monitoring are limited. The metrics-server collects resource metrics and stores them in memory but doesn\u2019t persist them. You can view the logs of a Pod using kubectl, but Kubernetes doesn't automatically retain logs. And the implementation of distributed tracing is done either at the application code level or using services meshes. Kubernetes' extensibility shines here. Kubernetes allows you to bring your preferred centralized monitoring, logging, and tracing solution.","title":"Observability"},{"location":"reliability/docs/application/#recommendations_3","text":"","title":"Recommendations"},{"location":"reliability/docs/application/#monitor-your-applications","text":"The number of metrics you need to monitor in modern applications is growing continuously. It helps if you have an automated way to track your applications so you can focus on solving your customer\u2019s challenges. Cluster-wide monitoring tools like Prometheus or CloudWatch Container Insights can monitor your cluster and workload and provide you signals when, or preferably, before things go wrong. Monitoring tools allow you to create alerts that your operations team can subscribe to. Consider rules to activate alarms for events that can, when exacerbated, lead to an outage or impact application performance. If you\u2019re unclear on which metrics you should monitor, you can take inspiration from these methods: RED method . Stands for requests, errors, and duration. USE method . Stands for utilization, saturation, and errors. Sysdig\u2019s post Best practices for alerting on Kubernetes includes a comprehensive list of components that can impact the availability of your applications.","title":"Monitor your applications"},{"location":"reliability/docs/application/#use-prometheus-client-library-to-expose-application-metrics","text":"In addition to monitoring the state of the application and aggregating standard metrics, you can also use the Prometheus client library to expose application-specific custom metrics to improve the application's observability.","title":"Use Prometheus client library to expose application metrics"},{"location":"reliability/docs/application/#use-centralized-logging-tools-to-collect-and-persist-logs","text":"Logging in EKS falls under two categories: control plane logs and application logs. EKS control plane logging provides audit and diagnostic logs directly from the control plane to CloudWatch Logs in your account. Application logs are logs produced by Pods running inside your cluster. Application logs include logs produced by Pods that run the business logic applications and Kubernetes system components such as CoreDNS, Cluster Autoscaler, Prometheus, etc. EKS provide five types of control plane logs : Kubernetes API server component logs Audit Authenticator Controller manager Scheduler The controller manager and scheduler logs can help diagnose control plane problems such as bottlenecks and errors. By default, EKS control plane logs aren\u2019t sent to CloudWatch Logs. You can enable control plane logging and select the types of EKS control plane logs you\u2019d like to capture for each cluster in your account Collecting application logs requires installing a log aggregator tool like Fluent Bit , Fluentd , or CloudWatch Container Insights in your cluster. Kubernetes log aggregator tools run as DaemonSets and scrape container logs from nodes. Application logs are then sent to a centralized destination for storage. For example, CloudWatch Container Insights can use either Fluent Bit or Fluentd to collect logs and ship them to CloudWatch Logs for storage. Fluent Bit and Fluentd support many popular log analytics systems such as Elasticsearch and InfluxDB giving you the ability to change the storage backend for your logs by modifying Fluent bit or Fluentd\u2019s log configuration.","title":"Use centralized logging tools to collect and persist logs"},{"location":"reliability/docs/application/#use-a-distributed-tracing-system-to-identify-bottlenecks","text":"A typical modern application has components distributed over the network, and its reliability depends on the proper functioning of each of the components that make up the application. You can use a distributed tracing solution to understand how requests flow and how systems communicate. Traces can show you where bottlenecks exist in your application network and prevent problems that can cause cascading failures. You have two options to implement tracing in your applications: you can either implement distributed tracing at the code level using shared libraries or use a service mesh. Implementing tracing at the code level can be disadvantageous. In this method, you have to make changes to your code. This is further complicated if you have polyglot applications. You\u2019re also responsible for maintaining yet another library, across your services. Service Meshes like LinkerD , Istio , and AWS App Mesh can be used to implement distributed tracing in your application with minimal changes to the application code. You can use service mesh to standardize metrics generation, logging, and tracing. Tracing tools like AWS X-Ray , Jaeger support both shared library and service mesh implementations. Consider using a tracing tool like AWS X-Ray or Jaeger that supports both (shared library and service mesh) implementations so you will not have to switch tools if you later adopt service mesh.","title":"Use a distributed tracing system to identify bottlenecks"},{"location":"reliability/docs/controlplane/","text":"EKS Control Plane \u00b6 Amazon Elastic Kubernetes Service (EKS) is a managed Kubernetes service that makes it easy for you to run Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or worker nodes. It runs upstream Kubernetes and is certified Kubernetes conformant. This conformance ensures that EKS supports the Kubernetes APIs, just like the open-source community version that you can install on EC2 or on-premises. Existing applications running on upstream Kubernetes are compatible with Amazon EKS. EKS automatically manages the availability and scalability of the Kubernetes control plane nodes, and it automatically replaces unhealthy control plane nodes. EKS Architecture \u00b6 EKS architecture is designed to eliminate any single points of failure that may compromise the availability and durability of the Kubernetes control plane. The Kubernetes control plane managed by EKS runs inside an EKS managed VPC. The EKS control plane comprises the Kubernetes API server nodes, etcd cluster. Kubernetes API server nodes that run components like the API server, scheduler, and kube-controller-manager run in an auto-scaling group. EKS runs a minimum of two API server nodes in distinct Availability Zones (AZs) within in AWS region. Likewise, for durability, the etcd server nodes also run in an auto-scaling group that spans three AZs. EKS runs a NAT Gateway in each AZ, and API servers and etcd servers run in a private subnet. This architecture ensures that an event in a single AZ doesn\u2019t affect the EKS cluster's availability. When you create a new cluster, Amazon EKS creates a highly-available endpoint for the managed Kubernetes API server that you use to communicate with your cluster (using tools like kubectl ). The managed endpoint uses NLB to load balance Kubernetes API servers. EKS also provisions two ENI s in different AZs to facilitate communication to your worker nodes. You can configure whether your Kubernetes cluster\u2019s API server is reachable from the public internet (using the public endpoint) or through your VPC (using the EKS-managed ENIs) or both. Whether users and worker nodes connect to the API server using the public endpoint or the EKS-managed ENI, there are redundant paths for connection. Recommendations \u00b6 Monitor Control Plane Metrics \u00b6 Monitoring Kubernetes API metrics can give you insights into control plane performance and identify issues. An unhealthy control plane can compromise the availability of the workloads running inside the cluster. For example, poorly written controllers can overload the API servers, affecting your application's availability. Kubernetes exposes control plane metrics at the /metrics endpoint. You can view the metrics exposed using kubectl : kubectl get --raw /metrics These metrics are represented in a Prometheus text format . You can use Prometheus to collect and store these metrics. In May 2020, CloudWatch added support for monitoring Prometheus metrics in CloudWatch Container Insights. So you can also use Amazon CloudWatch to monitor the EKS control plane. You can use Tutorial for Adding a New Prometheus Scrape Target: Prometheus KPI Server Metrics to collect metrics and create CloudWatch dashboard to monitor your cluster\u2019s control plane. You can find Kubernetes API server metrics here . For example, apiserver_request_duration_seconds can indicate how long API requests are taking to run. Consider monitoring these control plane metrics: API Server \u00b6 Metric Description apiserver_request_total Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, client, and HTTP response contentType and code. apiserver_request_duration_seconds* Response latency distribution in seconds for each verb, dry run value, group, version, resource, subresource, scope, and component. rest_client_request_duration_seconds Request latency in seconds. Broken down by verb and URL. apiserver_admission_controller_admission_duration_seconds Admission controller latency histogram in seconds, identified by name and broken out for each operation and API resource and type (validate or admit). rest_client_request_duration_seconds Request latency in seconds. Broken down by verb and URL. rest_client_requests_total Number of HTTP requests, partitioned by status code, method, and host. etcd \u00b6 Metric Description etcd_request_duration_seconds Etcd request latency in seconds for each operation and object type. Consider using Grafana dashboard 12006 to visualize and monitor Kubernetes API server requests and latency and etcd latency metrics. Cluster Authentication \u00b6 EKS currently supports two types of authentication: bearer/service account tokens and IAM authentication which uses webhook token authentication . When users call the Kubernetes API, a webhook passes an authentication token included in the request to IAM. The token, a base 64 signed URL, is generated by the AWS Command Line Interface ( AWS CLI ). The IAM user or role that creates the EKS Cluster automatically gets full access to the cluster. You can manage access to the EKS cluster by editing the aws-auth configmap . If you misconfigure the aws-auth configmap and lose access to the cluster, you can still use the cluster creator\u2019s user or role to access your EKS cluster. In the unlikely event that you cannot use the IAM service in the AWS region, you can also use the Kubernetes service account\u2019s bearer token to manage the cluster. Create a \u201csuper-admin\u201d account that is permitted to perform all actions in the cluster: kubectl -n kube-system create serviceaccount super-admin Create a role binding that gives super-admin cluster-admin role: kubectl create clusterrolebinding super-admin-rb --clusterrole=cluster-admin --serviceaccount=kube-system:super-admin Get service account\u2019s secret: SECRET_NAME=`kubectl -n kube-system get serviceaccount/super-admin -o jsonpath='{.secrets[0].name}'` Get token associated with the secret: TOKEN=`kubectl -n kube-system get secret $SECRET_NAME -o jsonpath='{.data.token}'| base64 --decode` Add service account and token to kubeconfig : kubectl config set-credentials super-admin --token=$TOKEN Set the current-context in kubeconfig to use super-admin account: kubectl config set-context --current --user=super-admin Final kubeconfig should look like this: apiVersion : v1 clusters : - cluster : certificate - authority - data :< REDACTED > server : https ://< CLUSTER >. gr7 . us - west - 2 . eks . amazonaws . com name : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > contexts : - context : cluster : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > user : super - admin name : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > current - context : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > kind : Config preferences : {} users : # - name : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > # user : # exec : # apiVersion : client . authentication . k8s . io / v1alpha1 # args : # - -- region # - us - west - 2 # - eks # - get - token # - -- cluster - name # - << cluster name >> # command : aws # env : null - name : super - admin user : token : << super - admin sa \u2019 s secret >> Handling Cluster Upgrades \u00b6 Kubernetes follows a quarterly release cycle; a new minor version (like 1. 16 or 1. 17 ) is released approximately every three months. Each minor version is supported for approximately nine months after it is first released. Kubernetes supports compatibility between the control plane and worker nodes for at least two minor versions. In line with the Kubernetes community support for Kubernetes versions, EKS provides at least three production-ready versions of Kubernetes at any given time, with a fourth version in deprecation. EKS will announce the deprecation of a given Kubernetes minor version at least 60 days before the end of support date. On the end of support date, clusters running the deprecated version will begin to be automatically updated to the next EKS-supported version of Kubernetes. EKS performs in-place cluster upgrades for both Kubernetes and EKS platform versions . This simplifies cluster operations and lets you take advantage of the latest Kubernetes features and apply security patches, without any downtime. New Kubernetes versions introduce significant changes, and you cannot downgrade a cluster once upgraded. Having a well-documented process for handling cluster upgrades is necessary for a smooth transition to newer Kubernetes versions. You may consider migrating to new clusters when upgrading to newer Kubernetes versions instead of performing in-place cluster upgrades. Cluster backup and restore tools like VMware\u2019s Velero can help you migrate to a new cluster. You should familiarize yourself with the Kubernetes deprecation policy as newer versions may deprecate APIs and features that may break existing applications. Before upgrading the cluster, you should review the Kubernetes change log and Amazon EKS Kubernetes versions to understand any negative impact to your workloads. Consider testing the cluster upgrade in a non-production environment and identify any impacts to current workloads and controllers. You can automate the testing by building a continuous integration workflow to test the compatibility of your applications, controllers, and custom integrations before moving to a new Kubernetes version. You may also need to upgrade Kubernetes add-ons after upgrading the cluster. Review Updating an Amazon EKS cluster Kubernetes version to validate the compatibility of cluster add-ons with the cluster version. Consider turning on control plane logging and review the logs for any errors. Consider using eksctl to manage EKS cluster. You can use eksctl to update the control plane, add-ons, and worker nodes . EKS control plane upgrade doesn\u2019t include upgrading worker nodes. You are responsible for updating EKS worker nodes. Consider using EKS managed node groups or EKS on Fargate to automate the process of upgrading worker nodes. If required, you can use kubectl convert to convert Kubernetes manifests files between different API versions . Running large clusters \u00b6 EKS actively monitors the load on control plane instances and automatically scales them to ensure high performance. However, you should account for potential performance issues and limits within Kubernetes and quotas in AWS services when running large clusters. Clusters with more than 1000 services may experience network latency with using kube-proxy in iptables mode according to the tests performed by the ProjectCalico team . The solution is to switch to running kube-proxy in ipvs mode . You may also experience EC2 API request throttling if the CNI needs to request IP addresses for Pods or if you need to create new EC2 instances frequently. You can reduce calls EC2 API by configuring the CNI to cache IP addresses. You can use larger EC2 instance types to reduce EC2 scaling events. Know limits and service quotas \u00b6 AWS sets service limits (an upper limit on the number of each resource your team can request) to protect you from accidentally over-provisioning resources. Amazon EKS Service Quotas lists the service limits. There are two types of limits, soft limits, that can be changed using AWS Service Quotas . Hard limits cannot be changed. You should consider these values when architecting your applications. Consider reviewing these service limits periodically and incorporate them during in your application design. Besides the limits from orchestration engines, there are limits in other AWS services, such as Elastic Load Balancing (ELB) and Amazon VPC, that may affect your application performance. More about EC2 limits here: EC2 service limits . Each EC2 instance limits the number of packets that can be sent to the Amazon-provided DNS server to a maximum of 1024 packets per second per network interface. Additional Resources: \u00b6 De-mystifying cluster networking for Amazon EKS worker nodes Amazon EKS cluster endpoint access control AWS re:Invent 2019: Amazon EKS under the hood (CON421-R1)","title":"Control Plane"},{"location":"reliability/docs/controlplane/#eks-control-plane","text":"Amazon Elastic Kubernetes Service (EKS) is a managed Kubernetes service that makes it easy for you to run Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or worker nodes. It runs upstream Kubernetes and is certified Kubernetes conformant. This conformance ensures that EKS supports the Kubernetes APIs, just like the open-source community version that you can install on EC2 or on-premises. Existing applications running on upstream Kubernetes are compatible with Amazon EKS. EKS automatically manages the availability and scalability of the Kubernetes control plane nodes, and it automatically replaces unhealthy control plane nodes.","title":"EKS Control Plane"},{"location":"reliability/docs/controlplane/#eks-architecture","text":"EKS architecture is designed to eliminate any single points of failure that may compromise the availability and durability of the Kubernetes control plane. The Kubernetes control plane managed by EKS runs inside an EKS managed VPC. The EKS control plane comprises the Kubernetes API server nodes, etcd cluster. Kubernetes API server nodes that run components like the API server, scheduler, and kube-controller-manager run in an auto-scaling group. EKS runs a minimum of two API server nodes in distinct Availability Zones (AZs) within in AWS region. Likewise, for durability, the etcd server nodes also run in an auto-scaling group that spans three AZs. EKS runs a NAT Gateway in each AZ, and API servers and etcd servers run in a private subnet. This architecture ensures that an event in a single AZ doesn\u2019t affect the EKS cluster's availability. When you create a new cluster, Amazon EKS creates a highly-available endpoint for the managed Kubernetes API server that you use to communicate with your cluster (using tools like kubectl ). The managed endpoint uses NLB to load balance Kubernetes API servers. EKS also provisions two ENI s in different AZs to facilitate communication to your worker nodes. You can configure whether your Kubernetes cluster\u2019s API server is reachable from the public internet (using the public endpoint) or through your VPC (using the EKS-managed ENIs) or both. Whether users and worker nodes connect to the API server using the public endpoint or the EKS-managed ENI, there are redundant paths for connection.","title":"EKS Architecture"},{"location":"reliability/docs/controlplane/#recommendations","text":"","title":"Recommendations"},{"location":"reliability/docs/controlplane/#monitor-control-plane-metrics","text":"Monitoring Kubernetes API metrics can give you insights into control plane performance and identify issues. An unhealthy control plane can compromise the availability of the workloads running inside the cluster. For example, poorly written controllers can overload the API servers, affecting your application's availability. Kubernetes exposes control plane metrics at the /metrics endpoint. You can view the metrics exposed using kubectl : kubectl get --raw /metrics These metrics are represented in a Prometheus text format . You can use Prometheus to collect and store these metrics. In May 2020, CloudWatch added support for monitoring Prometheus metrics in CloudWatch Container Insights. So you can also use Amazon CloudWatch to monitor the EKS control plane. You can use Tutorial for Adding a New Prometheus Scrape Target: Prometheus KPI Server Metrics to collect metrics and create CloudWatch dashboard to monitor your cluster\u2019s control plane. You can find Kubernetes API server metrics here . For example, apiserver_request_duration_seconds can indicate how long API requests are taking to run. Consider monitoring these control plane metrics:","title":"Monitor Control Plane Metrics"},{"location":"reliability/docs/controlplane/#api-server","text":"Metric Description apiserver_request_total Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, client, and HTTP response contentType and code. apiserver_request_duration_seconds* Response latency distribution in seconds for each verb, dry run value, group, version, resource, subresource, scope, and component. rest_client_request_duration_seconds Request latency in seconds. Broken down by verb and URL. apiserver_admission_controller_admission_duration_seconds Admission controller latency histogram in seconds, identified by name and broken out for each operation and API resource and type (validate or admit). rest_client_request_duration_seconds Request latency in seconds. Broken down by verb and URL. rest_client_requests_total Number of HTTP requests, partitioned by status code, method, and host.","title":"API Server"},{"location":"reliability/docs/controlplane/#etcd","text":"Metric Description etcd_request_duration_seconds Etcd request latency in seconds for each operation and object type. Consider using Grafana dashboard 12006 to visualize and monitor Kubernetes API server requests and latency and etcd latency metrics.","title":"etcd"},{"location":"reliability/docs/controlplane/#cluster-authentication","text":"EKS currently supports two types of authentication: bearer/service account tokens and IAM authentication which uses webhook token authentication . When users call the Kubernetes API, a webhook passes an authentication token included in the request to IAM. The token, a base 64 signed URL, is generated by the AWS Command Line Interface ( AWS CLI ). The IAM user or role that creates the EKS Cluster automatically gets full access to the cluster. You can manage access to the EKS cluster by editing the aws-auth configmap . If you misconfigure the aws-auth configmap and lose access to the cluster, you can still use the cluster creator\u2019s user or role to access your EKS cluster. In the unlikely event that you cannot use the IAM service in the AWS region, you can also use the Kubernetes service account\u2019s bearer token to manage the cluster. Create a \u201csuper-admin\u201d account that is permitted to perform all actions in the cluster: kubectl -n kube-system create serviceaccount super-admin Create a role binding that gives super-admin cluster-admin role: kubectl create clusterrolebinding super-admin-rb --clusterrole=cluster-admin --serviceaccount=kube-system:super-admin Get service account\u2019s secret: SECRET_NAME=`kubectl -n kube-system get serviceaccount/super-admin -o jsonpath='{.secrets[0].name}'` Get token associated with the secret: TOKEN=`kubectl -n kube-system get secret $SECRET_NAME -o jsonpath='{.data.token}'| base64 --decode` Add service account and token to kubeconfig : kubectl config set-credentials super-admin --token=$TOKEN Set the current-context in kubeconfig to use super-admin account: kubectl config set-context --current --user=super-admin Final kubeconfig should look like this: apiVersion : v1 clusters : - cluster : certificate - authority - data :< REDACTED > server : https ://< CLUSTER >. gr7 . us - west - 2 . eks . amazonaws . com name : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > contexts : - context : cluster : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > user : super - admin name : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > current - context : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > kind : Config preferences : {} users : # - name : arn : aws : eks : us - west - 2 :< account number >: cluster /< cluster name > # user : # exec : # apiVersion : client . authentication . k8s . io / v1alpha1 # args : # - -- region # - us - west - 2 # - eks # - get - token # - -- cluster - name # - << cluster name >> # command : aws # env : null - name : super - admin user : token : << super - admin sa \u2019 s secret >>","title":"Cluster Authentication"},{"location":"reliability/docs/controlplane/#handling-cluster-upgrades","text":"Kubernetes follows a quarterly release cycle; a new minor version (like 1. 16 or 1. 17 ) is released approximately every three months. Each minor version is supported for approximately nine months after it is first released. Kubernetes supports compatibility between the control plane and worker nodes for at least two minor versions. In line with the Kubernetes community support for Kubernetes versions, EKS provides at least three production-ready versions of Kubernetes at any given time, with a fourth version in deprecation. EKS will announce the deprecation of a given Kubernetes minor version at least 60 days before the end of support date. On the end of support date, clusters running the deprecated version will begin to be automatically updated to the next EKS-supported version of Kubernetes. EKS performs in-place cluster upgrades for both Kubernetes and EKS platform versions . This simplifies cluster operations and lets you take advantage of the latest Kubernetes features and apply security patches, without any downtime. New Kubernetes versions introduce significant changes, and you cannot downgrade a cluster once upgraded. Having a well-documented process for handling cluster upgrades is necessary for a smooth transition to newer Kubernetes versions. You may consider migrating to new clusters when upgrading to newer Kubernetes versions instead of performing in-place cluster upgrades. Cluster backup and restore tools like VMware\u2019s Velero can help you migrate to a new cluster. You should familiarize yourself with the Kubernetes deprecation policy as newer versions may deprecate APIs and features that may break existing applications. Before upgrading the cluster, you should review the Kubernetes change log and Amazon EKS Kubernetes versions to understand any negative impact to your workloads. Consider testing the cluster upgrade in a non-production environment and identify any impacts to current workloads and controllers. You can automate the testing by building a continuous integration workflow to test the compatibility of your applications, controllers, and custom integrations before moving to a new Kubernetes version. You may also need to upgrade Kubernetes add-ons after upgrading the cluster. Review Updating an Amazon EKS cluster Kubernetes version to validate the compatibility of cluster add-ons with the cluster version. Consider turning on control plane logging and review the logs for any errors. Consider using eksctl to manage EKS cluster. You can use eksctl to update the control plane, add-ons, and worker nodes . EKS control plane upgrade doesn\u2019t include upgrading worker nodes. You are responsible for updating EKS worker nodes. Consider using EKS managed node groups or EKS on Fargate to automate the process of upgrading worker nodes. If required, you can use kubectl convert to convert Kubernetes manifests files between different API versions .","title":"Handling Cluster Upgrades"},{"location":"reliability/docs/controlplane/#running-large-clusters","text":"EKS actively monitors the load on control plane instances and automatically scales them to ensure high performance. However, you should account for potential performance issues and limits within Kubernetes and quotas in AWS services when running large clusters. Clusters with more than 1000 services may experience network latency with using kube-proxy in iptables mode according to the tests performed by the ProjectCalico team . The solution is to switch to running kube-proxy in ipvs mode . You may also experience EC2 API request throttling if the CNI needs to request IP addresses for Pods or if you need to create new EC2 instances frequently. You can reduce calls EC2 API by configuring the CNI to cache IP addresses. You can use larger EC2 instance types to reduce EC2 scaling events.","title":"Running large clusters"},{"location":"reliability/docs/controlplane/#know-limits-and-service-quotas","text":"AWS sets service limits (an upper limit on the number of each resource your team can request) to protect you from accidentally over-provisioning resources. Amazon EKS Service Quotas lists the service limits. There are two types of limits, soft limits, that can be changed using AWS Service Quotas . Hard limits cannot be changed. You should consider these values when architecting your applications. Consider reviewing these service limits periodically and incorporate them during in your application design. Besides the limits from orchestration engines, there are limits in other AWS services, such as Elastic Load Balancing (ELB) and Amazon VPC, that may affect your application performance. More about EC2 limits here: EC2 service limits . Each EC2 instance limits the number of packets that can be sent to the Amazon-provided DNS server to a maximum of 1024 packets per second per network interface.","title":"Know limits and service quotas"},{"location":"reliability/docs/controlplane/#additional-resources","text":"De-mystifying cluster networking for Amazon EKS worker nodes Amazon EKS cluster endpoint access control AWS re:Invent 2019: Amazon EKS under the hood (CON421-R1)","title":"Additional Resources:"},{"location":"reliability/docs/dataplane/","text":"EKS Data Plane \u00b6 To operate high-available and resilient applications, you need a highly-available and resilient data plane. An elastic data plane ensures that Kubernetes can scale and heal your applications automatically. A resilient data plane consists of two or more worker nodes, can grow and shrink with the workload, and automatically recover from failures. You have two choices for worker nodes with EKS: EC2 instances and Fargate . If you choose EC2 instances, you can manage the worker nodes yourself or use EKS managed node groups . You can have a cluster with a mix of managed, self-managed worker nodes, and Fargate. EKS on Fargate offers the easiest path to a resilient data plane. Fargate runs each Pod in an isolated compute environment. Each Pod running on Fargate gets its own worker node. Fargate automatically scales the data plane as Kubernetes scales pods. You can scale both the data plane and your workload by using the horizontal pod autoscaler . The preferred way to scale EC2 worker nodes is by using Kubernetes Cluster Autoscaler , EC2 Auto Scaling groups or community projects like Atlassian\u2019s Esclator . Recommendations \u00b6 Use EC2 Auto Scaling Groups to create worker nodes \u00b6 It is a best practice to create worker nodes using EC2 Auto Scaling groups instead of creating individual EC2 instances and joining them to the cluster. Auto Scaling Groups will automatically replace any terminated or failed nodes ensuring that the cluster always has the capacity to run your workload. Use Kubernetes Cluster Autoscaler to scale nodes \u00b6 Cluster Autoscaler adjusts the size of the data plane when there are pods that cannot be run because the cluster has insufficient resources, and adding another worker node would help. Although Cluster Autoscaler is a reactive process, it waits until pods are in Pending state due to insufficient capacity in the cluster. When such an event occurs, it adds EC2 instances to the cluster. Whenever the cluster runs out of capacity, new replicas - or new pods - will be unavailable ( in Pending state ) until worker nodes are added. This delay may impact your applications' reliability if the data plane cannot scale fast enough to meet the demands of the workload. If a worker node is consistently underutilized and all of its pods can be scheduled on other worker nodes, Cluster Autoscaler terminates it. Configure over-provisioning with Cluster Autoscaler \u00b6 Cluster Autoscaler triggers a scale-up of the data-plane when Pods in the cluster are already Pending . Hence, there may be a delay between the time your application needs more replicas, and when it, in fact, gets more replicas. An option to account for this possible delay is through adding more than required replicas, inflating the number of replicas for the application. Another pattern that Cluster Autoscaler recommends uses pause Pods and the Priority Preemption feature . The pause Pod runs a pause container , which as the name suggests, does nothing but acts as a placeholder for compute capacity that can be used by other Pods in your cluster. Because it runs with a very low assigned priority , the pause Pod gets evicted from the node when another Pod needs to be created, and the cluster doesn\u2019t have available capacity. The Kubernetes Scheduler notices the eviction of the pause Pod and tries to reschedule it. But since the cluster is running at capacity, the pause Pod remains Pending , to which the Cluster Autoscaler reacts by adding nodes. A Helm chart is available to install cluster overprovisioner . Using Cluster Autoscaler with multiple Auto Scaling Groups \u00b6 Run the Cluster Autoscaler with the --node-group-auto-discovery flag enabled. Doing so will allow the Cluster Autoscaler to find all autoscaling groups that include a particular defined tag and prevents the need to define and maintain each autoscaling group in the manifest. Using Cluster Autoscaler with local storage \u00b6 By default, the Cluster Autoscaler does not scale-down nodes that have pods deployed with local storage attached. Set the --skip-nodes-with-local-storage flag to false to allow Cluster Autoscaler to scale-down these nodes. Spread worker nodes and workload across multiple AZs \u00b6 You can protect your workloads from failures in an individual AZ by running worker nodes and pods in multiple AZs. You can control the AZ the worker nodes are created in using the subnets you create the nodes in. You can set pod anti-affinity rules to schedule pods across multiple AZs. The manifest below informs Kubernetes scheduler to prefer scheduling pods in distinct AZs. apiVersion : apps / v1 kind : Deployment metadata : name : web - server labels : app : web - server spec : replicas : 4 selector : matchLabels : app : web - server template : metadata : labels : app : web - server spec : affinity : podAntiAffinity : preferredDuringSchedulingIgnoredDuringExecution : - podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - web - server topologyKey : failure - domain . beta . kubernetes . io / zone weight : 100 containers : - name : web - app image : nginx !!! warning Do not require that pods be scheduled across distinct AZs otherwise, the number of pods in a deployment will never exceed the number of AZs. With Kubernetes 1.18+, you can use Spread Constraints for Pods to schedule pods across multiple AZs. apiVersion : apps / v1 kind : Deployment metadata : name : web - server labels : app : web - server spec : replicas : 3 template : metadata : labels : app : web - server spec : topologySpreadConstraints : - maxSkew : 1 whenUnsatisfiable : DoNotSchedule topologyKey : failure - domain . beta . kubernetes . io / zone labelSelector : matchLabels : app : web - server containers : - name : web - app image : nginx Ensure capacity in each AZ when using EBS volumes \u00b6 If you use Amazon EBS to provide Persistent Volumes , then you need to ensure that the pods and associated EBS volume are located in the same AZ. At the time of writing, EBS volumes are only available within a single AZ. A Pod cannot access EBS-backed persistent volumes located in a different AZ. Kubernetes scheduler knows which AZ a worker node is located in. Kubernetes will always schedule a Pod that requires an EBS volume in the same AZ as the volume. However, if there are no worker nodes available in the AZ where the volume is located, then the Pod cannot be scheduled. Create Auto Scaling Group for each AZ with enough capacity to ensure that the cluster always has capacity to schedule pods in the same AZ as the EBS volumes they need. In addition, you should enable the --balance-similar-node-groups feature in Cluster Autoscaler. If you are running an application that uses EBS volume but has no requirements to be highly available, then you can restrict the deployment of the application to a single AZ. In EKS, worker nodes are automatically added failure-domain.beta.kubernetes.io/zone label, which contains the name of the AZ. You can see the labels attached to your nodes by running kubectl get nodes --show-labels . More information about built-in node labels is available here . You can use node selectors to schedule a pod in a particular AZ. In the example below, the pod will only be scheduled in us-west-2c AZ: apiVersion : v1 kind : Pod metadata : name : single - az - pod spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : failure - domain . beta . kubernetes . io / zone operator : In values : - us - west - 2 c containers : - name : single - az - container image : kubernetes / pause Persistent volumes (backed by EBS) are also automatically labeled with the name of AZ; you can see which AZ your persistent volume belongs to by running kubectl get pv -L topology.ebs.csi.aws.com/zone . When a pod is created and claims a volume, Kubernetes will schedule the Pod on a node in the same AZ as the volume. Consider this scenario; you have an EKS cluster with one node group. This node group has three worker nodes spread across three AZs. You have an application that uses an EBS-backed Persistent Volume. When you create this application and the corresponding volume, its Pod gets created in the first of the three AZs. Then, the worker node that runs this Pod becomes unhealthy and subsequently unavailable for use. Cluster Autoscaler will replace the unhealthy node with a new worker node; however, because the autoscaling group spans across three AZs, the new worker node may get launched in the second or the third AZ, but not in the first AZ as the situation demands. As the AZ-constrained EBS volume only exists in the first AZ, but there are no worker nodes available in that AZ, the Pod cannot be scheduled. Therefore, you should create one node group in each AZ, so there is always enough capacity available to run pods that cannot be scheduled in other AZs. Alternatively, you can use EFS can simplify cluster autoscaling when running applications that need persistent storage. Clients can access EFS file systems concurrently from all the AZs in the region. Even if a Pod using EFS-backed Persistent Volume gets terminated and gets scheduled in different AZ, it will be able to mount the volume. Run node-problem-detector \u00b6 Failures in worker nodes can impact the availability of your applications. node-problem-detector is a Kubernetes add-on that you can install in your cluster to detect worker node issues. You can use a npd\u2019s remedy system to drain and terminate the node automatically. Reserving resources for system and Kubernetes daemons \u00b6 You can improve worker nodes' stability by reserving compute capacity for the operating system and Kubernetes daemons . Pods - especially ones without limits declared - can saturate system resources putting nodes in a situation where operating system processes and Kubernetes daemons ( kubelet , container runtime, etc.) compete with pods for system resources. You can use kubelet flags --system-reserved and --kube-reserved to reserve resources for system process ( udev , sshd , etc.) and Kubernetes daemons respectively. If you use the EKS-optimized Linux AMI , the CPU, memory, and storage are reserved for the system and Kubernetes daemons by default. When worker nodes based on this AMI launch, EC2 user-data is configured to trigger the bootstrap.sh script . This script calculates CPU and memory reservations based on the number of CPU cores and total memory available on the EC2 instance. The calculated values are written to the KubeletConfiguration file located at /etc/kubernetes/kubelet/kubelet-config.json . You may need to increase the system resource reservation if you run custom daemons on the node and the amount of CPU and memory reserved by default is insufficient. eksctl offers the easiest way to customize resource reservation for system and Kubernetes daemons . Implement QoS \u00b6 For critical applications, consider defining requests = limits for the container in the Pod. This will ensure that the container will not be killed if another Pod requests resources. It is a best practice to implement CPU and memory limits for all containers as it prevents a container inadvertently consuming system resources impacting the availability of other co-located processes. Configure resource quotas for namespaces \u00b6 Namespaces are intended for use in environments with many users spread across multiple teams, or projects. They provide a scope for names and are a way to divide cluster resources between multiple teams, projects, workloads. You can limit the aggregate resource consumption in a namespace. The ResourceQuota object can limit the quantity of objects that can be created in a namespace by type, as well as the total amount of compute resources that may be consumed by resources in that project. You can limit the total sum of storage and/or compute (CPU and memory) resources that can be requested in a given namespace. If resource quota is enabled for a namespace for compute resources like CPU and memory, users must specify requests or limits for each container in that namespace. Consider configuring quotas for each namespace. Consider using LimitRanges to automatically apply preconfigured limits to containers within a namespaces. Limit container resource usage within a namespace \u00b6 Resource Quotas help limit the amount of resources a namespace can use. The LimitRange object can help you implement minimum and maximum resources a container can request. Using LimitRange you can set a default request and limits for containers, which is helpful if setting compute resource limits is not a standard practice in your organization. As the name suggests, LimitRange can enforce minimum and maximum compute resources usage per Pod or Container in a namespace. As well as, enforce minimum and maximum storage request per PersistentVolumeClaim in a namespace. Consider using LimitRange in conjunction with ResourceQuota to enforce limits at a container as well as namespace level. Setting these limits will ensure that a container or a namespace does not impinge on resources used by other tenants in the cluster.","title":"Data Plane"},{"location":"reliability/docs/dataplane/#eks-data-plane","text":"To operate high-available and resilient applications, you need a highly-available and resilient data plane. An elastic data plane ensures that Kubernetes can scale and heal your applications automatically. A resilient data plane consists of two or more worker nodes, can grow and shrink with the workload, and automatically recover from failures. You have two choices for worker nodes with EKS: EC2 instances and Fargate . If you choose EC2 instances, you can manage the worker nodes yourself or use EKS managed node groups . You can have a cluster with a mix of managed, self-managed worker nodes, and Fargate. EKS on Fargate offers the easiest path to a resilient data plane. Fargate runs each Pod in an isolated compute environment. Each Pod running on Fargate gets its own worker node. Fargate automatically scales the data plane as Kubernetes scales pods. You can scale both the data plane and your workload by using the horizontal pod autoscaler . The preferred way to scale EC2 worker nodes is by using Kubernetes Cluster Autoscaler , EC2 Auto Scaling groups or community projects like Atlassian\u2019s Esclator .","title":"EKS Data Plane"},{"location":"reliability/docs/dataplane/#recommendations","text":"","title":"Recommendations"},{"location":"reliability/docs/dataplane/#use-ec2-auto-scaling-groups-to-create-worker-nodes","text":"It is a best practice to create worker nodes using EC2 Auto Scaling groups instead of creating individual EC2 instances and joining them to the cluster. Auto Scaling Groups will automatically replace any terminated or failed nodes ensuring that the cluster always has the capacity to run your workload.","title":"Use EC2 Auto Scaling Groups to create worker nodes"},{"location":"reliability/docs/dataplane/#use-kubernetes-cluster-autoscaler-to-scale-nodes","text":"Cluster Autoscaler adjusts the size of the data plane when there are pods that cannot be run because the cluster has insufficient resources, and adding another worker node would help. Although Cluster Autoscaler is a reactive process, it waits until pods are in Pending state due to insufficient capacity in the cluster. When such an event occurs, it adds EC2 instances to the cluster. Whenever the cluster runs out of capacity, new replicas - or new pods - will be unavailable ( in Pending state ) until worker nodes are added. This delay may impact your applications' reliability if the data plane cannot scale fast enough to meet the demands of the workload. If a worker node is consistently underutilized and all of its pods can be scheduled on other worker nodes, Cluster Autoscaler terminates it.","title":"Use Kubernetes Cluster Autoscaler to scale nodes"},{"location":"reliability/docs/dataplane/#configure-over-provisioning-with-cluster-autoscaler","text":"Cluster Autoscaler triggers a scale-up of the data-plane when Pods in the cluster are already Pending . Hence, there may be a delay between the time your application needs more replicas, and when it, in fact, gets more replicas. An option to account for this possible delay is through adding more than required replicas, inflating the number of replicas for the application. Another pattern that Cluster Autoscaler recommends uses pause Pods and the Priority Preemption feature . The pause Pod runs a pause container , which as the name suggests, does nothing but acts as a placeholder for compute capacity that can be used by other Pods in your cluster. Because it runs with a very low assigned priority , the pause Pod gets evicted from the node when another Pod needs to be created, and the cluster doesn\u2019t have available capacity. The Kubernetes Scheduler notices the eviction of the pause Pod and tries to reschedule it. But since the cluster is running at capacity, the pause Pod remains Pending , to which the Cluster Autoscaler reacts by adding nodes. A Helm chart is available to install cluster overprovisioner .","title":"Configure over-provisioning with Cluster Autoscaler"},{"location":"reliability/docs/dataplane/#using-cluster-autoscaler-with-multiple-auto-scaling-groups","text":"Run the Cluster Autoscaler with the --node-group-auto-discovery flag enabled. Doing so will allow the Cluster Autoscaler to find all autoscaling groups that include a particular defined tag and prevents the need to define and maintain each autoscaling group in the manifest.","title":"Using Cluster Autoscaler with multiple Auto Scaling Groups"},{"location":"reliability/docs/dataplane/#using-cluster-autoscaler-with-local-storage","text":"By default, the Cluster Autoscaler does not scale-down nodes that have pods deployed with local storage attached. Set the --skip-nodes-with-local-storage flag to false to allow Cluster Autoscaler to scale-down these nodes.","title":"Using Cluster Autoscaler with local storage"},{"location":"reliability/docs/dataplane/#spread-worker-nodes-and-workload-across-multiple-azs","text":"You can protect your workloads from failures in an individual AZ by running worker nodes and pods in multiple AZs. You can control the AZ the worker nodes are created in using the subnets you create the nodes in. You can set pod anti-affinity rules to schedule pods across multiple AZs. The manifest below informs Kubernetes scheduler to prefer scheduling pods in distinct AZs. apiVersion : apps / v1 kind : Deployment metadata : name : web - server labels : app : web - server spec : replicas : 4 selector : matchLabels : app : web - server template : metadata : labels : app : web - server spec : affinity : podAntiAffinity : preferredDuringSchedulingIgnoredDuringExecution : - podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - web - server topologyKey : failure - domain . beta . kubernetes . io / zone weight : 100 containers : - name : web - app image : nginx !!! warning Do not require that pods be scheduled across distinct AZs otherwise, the number of pods in a deployment will never exceed the number of AZs. With Kubernetes 1.18+, you can use Spread Constraints for Pods to schedule pods across multiple AZs. apiVersion : apps / v1 kind : Deployment metadata : name : web - server labels : app : web - server spec : replicas : 3 template : metadata : labels : app : web - server spec : topologySpreadConstraints : - maxSkew : 1 whenUnsatisfiable : DoNotSchedule topologyKey : failure - domain . beta . kubernetes . io / zone labelSelector : matchLabels : app : web - server containers : - name : web - app image : nginx","title":"Spread worker nodes and workload across multiple AZs"},{"location":"reliability/docs/dataplane/#ensure-capacity-in-each-az-when-using-ebs-volumes","text":"If you use Amazon EBS to provide Persistent Volumes , then you need to ensure that the pods and associated EBS volume are located in the same AZ. At the time of writing, EBS volumes are only available within a single AZ. A Pod cannot access EBS-backed persistent volumes located in a different AZ. Kubernetes scheduler knows which AZ a worker node is located in. Kubernetes will always schedule a Pod that requires an EBS volume in the same AZ as the volume. However, if there are no worker nodes available in the AZ where the volume is located, then the Pod cannot be scheduled. Create Auto Scaling Group for each AZ with enough capacity to ensure that the cluster always has capacity to schedule pods in the same AZ as the EBS volumes they need. In addition, you should enable the --balance-similar-node-groups feature in Cluster Autoscaler. If you are running an application that uses EBS volume but has no requirements to be highly available, then you can restrict the deployment of the application to a single AZ. In EKS, worker nodes are automatically added failure-domain.beta.kubernetes.io/zone label, which contains the name of the AZ. You can see the labels attached to your nodes by running kubectl get nodes --show-labels . More information about built-in node labels is available here . You can use node selectors to schedule a pod in a particular AZ. In the example below, the pod will only be scheduled in us-west-2c AZ: apiVersion : v1 kind : Pod metadata : name : single - az - pod spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : failure - domain . beta . kubernetes . io / zone operator : In values : - us - west - 2 c containers : - name : single - az - container image : kubernetes / pause Persistent volumes (backed by EBS) are also automatically labeled with the name of AZ; you can see which AZ your persistent volume belongs to by running kubectl get pv -L topology.ebs.csi.aws.com/zone . When a pod is created and claims a volume, Kubernetes will schedule the Pod on a node in the same AZ as the volume. Consider this scenario; you have an EKS cluster with one node group. This node group has three worker nodes spread across three AZs. You have an application that uses an EBS-backed Persistent Volume. When you create this application and the corresponding volume, its Pod gets created in the first of the three AZs. Then, the worker node that runs this Pod becomes unhealthy and subsequently unavailable for use. Cluster Autoscaler will replace the unhealthy node with a new worker node; however, because the autoscaling group spans across three AZs, the new worker node may get launched in the second or the third AZ, but not in the first AZ as the situation demands. As the AZ-constrained EBS volume only exists in the first AZ, but there are no worker nodes available in that AZ, the Pod cannot be scheduled. Therefore, you should create one node group in each AZ, so there is always enough capacity available to run pods that cannot be scheduled in other AZs. Alternatively, you can use EFS can simplify cluster autoscaling when running applications that need persistent storage. Clients can access EFS file systems concurrently from all the AZs in the region. Even if a Pod using EFS-backed Persistent Volume gets terminated and gets scheduled in different AZ, it will be able to mount the volume.","title":"Ensure capacity in each AZ when using EBS volumes"},{"location":"reliability/docs/dataplane/#run-node-problem-detector","text":"Failures in worker nodes can impact the availability of your applications. node-problem-detector is a Kubernetes add-on that you can install in your cluster to detect worker node issues. You can use a npd\u2019s remedy system to drain and terminate the node automatically.","title":"Run node-problem-detector"},{"location":"reliability/docs/dataplane/#reserving-resources-for-system-and-kubernetes-daemons","text":"You can improve worker nodes' stability by reserving compute capacity for the operating system and Kubernetes daemons . Pods - especially ones without limits declared - can saturate system resources putting nodes in a situation where operating system processes and Kubernetes daemons ( kubelet , container runtime, etc.) compete with pods for system resources. You can use kubelet flags --system-reserved and --kube-reserved to reserve resources for system process ( udev , sshd , etc.) and Kubernetes daemons respectively. If you use the EKS-optimized Linux AMI , the CPU, memory, and storage are reserved for the system and Kubernetes daemons by default. When worker nodes based on this AMI launch, EC2 user-data is configured to trigger the bootstrap.sh script . This script calculates CPU and memory reservations based on the number of CPU cores and total memory available on the EC2 instance. The calculated values are written to the KubeletConfiguration file located at /etc/kubernetes/kubelet/kubelet-config.json . You may need to increase the system resource reservation if you run custom daemons on the node and the amount of CPU and memory reserved by default is insufficient. eksctl offers the easiest way to customize resource reservation for system and Kubernetes daemons .","title":"Reserving resources for system and Kubernetes daemons"},{"location":"reliability/docs/dataplane/#implement-qos","text":"For critical applications, consider defining requests = limits for the container in the Pod. This will ensure that the container will not be killed if another Pod requests resources. It is a best practice to implement CPU and memory limits for all containers as it prevents a container inadvertently consuming system resources impacting the availability of other co-located processes.","title":"Implement QoS"},{"location":"reliability/docs/dataplane/#configure-resource-quotas-for-namespaces","text":"Namespaces are intended for use in environments with many users spread across multiple teams, or projects. They provide a scope for names and are a way to divide cluster resources between multiple teams, projects, workloads. You can limit the aggregate resource consumption in a namespace. The ResourceQuota object can limit the quantity of objects that can be created in a namespace by type, as well as the total amount of compute resources that may be consumed by resources in that project. You can limit the total sum of storage and/or compute (CPU and memory) resources that can be requested in a given namespace. If resource quota is enabled for a namespace for compute resources like CPU and memory, users must specify requests or limits for each container in that namespace. Consider configuring quotas for each namespace. Consider using LimitRanges to automatically apply preconfigured limits to containers within a namespaces.","title":"Configure resource quotas for namespaces"},{"location":"reliability/docs/dataplane/#limit-container-resource-usage-within-a-namespace","text":"Resource Quotas help limit the amount of resources a namespace can use. The LimitRange object can help you implement minimum and maximum resources a container can request. Using LimitRange you can set a default request and limits for containers, which is helpful if setting compute resource limits is not a standard practice in your organization. As the name suggests, LimitRange can enforce minimum and maximum compute resources usage per Pod or Container in a namespace. As well as, enforce minimum and maximum storage request per PersistentVolumeClaim in a namespace. Consider using LimitRange in conjunction with ResourceQuota to enforce limits at a container as well as namespace level. Setting these limits will ensure that a container or a namespace does not impinge on resources used by other tenants in the cluster.","title":"Limit container resource usage within a namespace"},{"location":"reliability/docs/networkmanagement/","text":"Networking in EKS \u00b6 EKS uses Amazon VPC to provide networking capabilities to worker nodes and Kubernetes Pods. An EKS cluster consists of two VPCs: an AWS-managed VPC that hosts the Kubernetes control plane and a second customer-managed VPC that hosts the Kubernetes worker nodes where containers run, as well as other AWS infrastructure (like load balancers) used by the cluster. All worker nodes need the ability to connect to the managed API server endpoint. This connection allows the worker node to register itself with the Kubernetes control plane and to receive requests to run application pods. Worker nodes connect to the EKS control plane through the EKS public endpoint or EKS-managed elastic network interfaces (ENIs). The subnets that you pass when you create the cluster influence where places these ENIs. You need to provide a minimum of two subnets in at least two Availability Zones. The route that worker nodes take to connect is determined by whether you have enabled or disabled the private endpoint for your cluster. EKS uses the EKS-managed ENI to communicate with worker nodes. Insert a diagram about how control plane and worker nodes communicate. Refer to Cluster VPC considerations when architecting a VPC to be used with EKS. If you deploy worker nodes in private subnets then these subnets should have a default route to a NAT Gateway . Recommendations \u00b6 Deploy NAT Gateways in each Availability Zone \u00b6 If you deploy worker nodes in private subnets, consider creating a NAT Gateway in each Availability Zone to ensure zone-independent architecture. Each NAT gateway in an AZ is implemented with redundancy. Amazon VPC CNI \u00b6 Amazon EKS supports native VPC networking via the Amazon VPC Container Network Interface (CNI) plugin for Kubernetes. The CNI plugin allows Kubernetes Pods to have the same IP address inside the Pod as they do on the VPC network. The CNI plugin uses Elastic Network Interface (ENI) for Pod networking. The CNI allocates ENIs to each worker node and uses the secondary IP range from each ENI for pods. The CNI pre-allocates ENIs and IP addresses for faster pod startup. The maximum number of network interfaces, and the maximum number of private IPv4 addresses that you can use varies by the type of EC2 Instance. Since each Pod uses an IP address, the number of Pods you can run on a particular EC2 Instance depends on how many ENIs can be attached to it and how many IP addresses it supports. This file contains the maximum number of pods you can run on an EC2 Instance. The limits in the file are invalid if you use CNI custom networking. The CNI plugin has two components: CNI plugin , which will wire up host\u2019s and pod\u2019s network stack when called. L-IPAMD (aws-node DaemonSet) runs on every node is a long-running node-Local IP Address Management (IPAM) daemon and is responsible for: maintaining a warm-pool of available IP addresses, and assigning an IP address to a Pod. You can find more details in Proposal: CNI plugin for Kubernetes networking over AWS VPC . Recommendations \u00b6 Plan for growth \u00b6 Size the subnets you will use for Pod networking for growth. If you have insufficient IP addresses available in the subnet that the CNI uses, your pods will not get an IP address. And the pods will remain pending until an IP address becomes available. This may impact application autoscaling and compromise its availability. Monitor IP address inventory \u00b6 You can monitor the IP addresses inventory of subnets using CNI Metrics Helper . You can also set CloudWatch alarms to get notified if a subnet is running out of IP addresses. Using public subnets for worker nodes \u00b6 If you use public subnets, then they must have the automatic public IP address assignment setting enabled; otherwise, worker nodes will not be able to communicate with the cluster. Run worker nodes and pods in different subnets \u00b6 Consider creating separate subnets for Pod networking (also called CNI custom networking ) to avoid IP address allocation conflicts between Pods and other resources in the VPC. SNAT \u00b6 If your Pods with private IP address need to communicate with other private IP address spaces (for example, Direct Connect, VPC Peering or Transit VPC), then you need to enable external SNAT in the CNI: kubectl set env daemonset -n kube-system aws-node AWS_VPC_K8S_CNI_EXTERNALSNAT = true Size your subnets for growth \u00b6 The CNI pre-allocates and caches a certain number of IP addresses so that Kubernetes scheduler can schedule pods on these worker nodes. The IP addresses are available on the worker nodes, whether you launch pods or not. When you provision a worker node, the CNI allocates a pool of secondary IP addresses (called warm pool ) from the node\u2019s primary ENI. As the pool gets depleted, the CNI attaches another ENI to assign more IP addresses. This process continues until no more ENIs can be attached to the node. Sizing your subnets for growth will prevent your subnets from running out of IP addresses as your Pods and nodes scale. You will not be able to create new Pods or nodes if the subnets don\u2019t have available IP addresses. If you need to constrain the IP addresses the CNI caches then you can use these CNI environment variables: WARM_IP_TARGET -- Number of free IP addresses the CNI should keep available. Use this if your subnet is small and you want to reduce IP address usage. MINIMUM_IP_TARGET -- Number of minimum IP addresses the CNI should allocate at node startup. To configure these options, you can download aws-k8s-cni.yaml compatible with your cluster and set environment variables. At the time of writing, the latest release is located here . !!! info Configure the value of MINIMUM_IP_TARGET to closely match the number of Pods you expect to run on your nodes. Doing so will ensure that as Pods get created, the CNI can assign IP addresses from the warm pool without calling the EC2 API. !!! warning Avoid setting the value of WARM_IP_TARGET too low as it will cause additional calls to the EC2 API, and that might cause throttling of the requests. CNI custom networking \u00b6 By default, the CNI assigns Pod\u2019s IP address from the worker node's primary elastic network interface's (ENI) security groups and subnet. If you don\u2019t have enough IP addresses in the worker node subnet or prefer that the worker nodes and Pods reside in separate subnets, you can use CNI custom networking . Enabling a custom network removes an available elastic network interface (and all of its available IP addresses for pods) from each worker node that uses it. The worker node's primary network interface is not used for pod placement when a custom network is enabled. If you want the CNI to assign IP addresses for Pods from a different subnet, you can set AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG environment variable to true . kubectl set env daemonset aws-node -n kube-system AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG = true \ud83d\udcdd EKS managed node groups currently don\u2019t support custom networking option. When AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG=true , the CNI will assign Pod IP address from a subnet defined in ENIConfig . The ENIConfig custom resource is used to define the subnet in which Pods will be scheduled. apiVersion : crd.k8s.amazonaws.com/v1alpha1 kind : ENIConfig metadata : name : us-west-2a spec : securityGroups : - sg-0dff111a1d11c1c11 subnet : subnet-011b111c1f11fdf11 You will need to create an ENIconfig custom resource for each subnet you want to use for Pod networking. - The securityGroups field should have the ID of the security group attached to the worker nodes. - The name field should be the name of the Availability Zone in your VPC. If you name your ENIConfig custom resources after each Availability Zone in your VPC, you can enable Kubernetes to automatically apply the corresponding ENIConfig for the worker node Availability Zone with the following command. kubectl set env daemonset aws-node \\ -n kube-system ENI_CONFIG_LABEL_DEF = failure-domain.beta.kubernetes.io/zone Upon creating the ENIconfig custom resources, you will need to create new worker nodes. The existing worker nodes and Pods will remain unaffected. You will also need to calculate the maximum number of Pods that can be scheduled on each worker node and pass it in worker nodes\u2019 user-data script. To determine the number of Pods for each worker node, you will need to know the number of network interfaces and the IPv4 addresses per network interface the worker node supports . The formula for calculating the maximum number of pods for an EC2 instance is: maxPods = (number of interfaces - 1) * (max IPv4 addresses per interface - 1) + 2 For a c3.large EC2 instance, the calculation will be: Maximum Pods = ((number of interfaces = 3) - 1) * ((max IPv4 addresses = 10) - 1) +2 => Maximum Pods = (3 - 1) * (10 - 1) + 2 => Maximum Pods = 2 * 9 + 2 = 20 You can then pass the max-pods value in the worker nodes\u2019 user-data script: --use-max-pods false --kubelet-extra-args '--max-pods=20' Since the node\u2019s primary ENI is no longer used to assign Pod IP addresses, there is a decline in the number of Pods you can run on a given EC2 instance type. Using alternate CNI plugins \u00b6 AWS VPC CNI plugin is the only officially supported network plugin on EKS. However, since EKS runs upstream Kubernetes and is certified Kubernetes conformant, you can use alternate CNI plugins . A compelling reason to opt for an alternate CNI plugin is to run Pods without using a VPC IP address per Pod. Although, using an alternate CNI plugin can come at the expense of network performance. Refer to EKS documentation for the list alternate compatible CNI plugins . Consider obtaining the CNI vendor\u2019s commercial support if you plan on using an alternate CNI in production. CoreDNS \u00b6 CoreDNS fulfills name resolution and service discovery functions in Kubernetes. It is installed by default on EKS clusters. For interoperability, the Kubernetes Service for CoreDNS is still named kube-dns . CoreDNS Pods run as part of a Deployment in kube-system namespace, and in EKS, by default, it runs two replicas with declared requests and limits. DNS queries are sent to the kube-dns Service that runs in the kube-system Namespace. Recommendations \u00b6 Monitor CoreDNS metrics \u00b6 CoreDNS has built in support for Prometheus . You should especially consider monitoring CoreDNS latency ( coredns_dns_request_duration_seconds_sum ), errors ( coredns_dns_response_rcode_count_total , NXDOMAIN, SERVFAIL, FormErr) and CoreDNS Pod\u2019s memory consumption. For troubleshooting purposes, you can use kubectl to view CoreDNS logs: for p in $(kubectl get pods \u2014namespace=kube-system -l k8s-app=kube-dns -o name); do kubectl logs \u2014namespace=kube-system $p; done Use NodeLocal DNSCache \u00b6 You can improve the Cluster DNS performance by running NodeLocal DNSCache . This feature runs a DNS caching agent on cluster nodes as a DaemonSet. All the pods use the DNS caching agent running on the node for name resolution instead of using kube-dns Service. Configure cluster-proportional-scaler for CoreDNS \u00b6 Another method of improving Cluster DNS performance is by automatically horizontally scaling the CoreDNS Deployment based on the number of nodes and CPU cores in the cluster. Horizontal cluster-proportional-autoscaler is a container that resizes the number of replicas of a Deployment based on the size of the schedulable data-plane. Nodes and the aggregate of CPU cores in the nodes are the two metrics with which you can scale CoreDNS. You can use both metrics simultaneously. If you use larger nodes, CoreDNS scaling is based on the number of CPU cores. Whereas, if you use smaller nodes, the number of CoreDNS replicas depends on the CPU cores in your data-plane. Proportional autoscaler configuration looks like this: linear: '{\"coresPerReplica\":256,\"min\":1,\"nodesPerReplica\":16}'","title":"Network"},{"location":"reliability/docs/networkmanagement/#networking-in-eks","text":"EKS uses Amazon VPC to provide networking capabilities to worker nodes and Kubernetes Pods. An EKS cluster consists of two VPCs: an AWS-managed VPC that hosts the Kubernetes control plane and a second customer-managed VPC that hosts the Kubernetes worker nodes where containers run, as well as other AWS infrastructure (like load balancers) used by the cluster. All worker nodes need the ability to connect to the managed API server endpoint. This connection allows the worker node to register itself with the Kubernetes control plane and to receive requests to run application pods. Worker nodes connect to the EKS control plane through the EKS public endpoint or EKS-managed elastic network interfaces (ENIs). The subnets that you pass when you create the cluster influence where places these ENIs. You need to provide a minimum of two subnets in at least two Availability Zones. The route that worker nodes take to connect is determined by whether you have enabled or disabled the private endpoint for your cluster. EKS uses the EKS-managed ENI to communicate with worker nodes. Insert a diagram about how control plane and worker nodes communicate. Refer to Cluster VPC considerations when architecting a VPC to be used with EKS. If you deploy worker nodes in private subnets then these subnets should have a default route to a NAT Gateway .","title":"Networking in EKS"},{"location":"reliability/docs/networkmanagement/#recommendations","text":"","title":"Recommendations"},{"location":"reliability/docs/networkmanagement/#deploy-nat-gateways-in-each-availability-zone","text":"If you deploy worker nodes in private subnets, consider creating a NAT Gateway in each Availability Zone to ensure zone-independent architecture. Each NAT gateway in an AZ is implemented with redundancy.","title":"Deploy NAT Gateways in each Availability Zone"},{"location":"reliability/docs/networkmanagement/#amazon-vpc-cni","text":"Amazon EKS supports native VPC networking via the Amazon VPC Container Network Interface (CNI) plugin for Kubernetes. The CNI plugin allows Kubernetes Pods to have the same IP address inside the Pod as they do on the VPC network. The CNI plugin uses Elastic Network Interface (ENI) for Pod networking. The CNI allocates ENIs to each worker node and uses the secondary IP range from each ENI for pods. The CNI pre-allocates ENIs and IP addresses for faster pod startup. The maximum number of network interfaces, and the maximum number of private IPv4 addresses that you can use varies by the type of EC2 Instance. Since each Pod uses an IP address, the number of Pods you can run on a particular EC2 Instance depends on how many ENIs can be attached to it and how many IP addresses it supports. This file contains the maximum number of pods you can run on an EC2 Instance. The limits in the file are invalid if you use CNI custom networking. The CNI plugin has two components: CNI plugin , which will wire up host\u2019s and pod\u2019s network stack when called. L-IPAMD (aws-node DaemonSet) runs on every node is a long-running node-Local IP Address Management (IPAM) daemon and is responsible for: maintaining a warm-pool of available IP addresses, and assigning an IP address to a Pod. You can find more details in Proposal: CNI plugin for Kubernetes networking over AWS VPC .","title":"Amazon VPC CNI"},{"location":"reliability/docs/networkmanagement/#recommendations_1","text":"","title":"Recommendations"},{"location":"reliability/docs/networkmanagement/#plan-for-growth","text":"Size the subnets you will use for Pod networking for growth. If you have insufficient IP addresses available in the subnet that the CNI uses, your pods will not get an IP address. And the pods will remain pending until an IP address becomes available. This may impact application autoscaling and compromise its availability.","title":"Plan for growth"},{"location":"reliability/docs/networkmanagement/#monitor-ip-address-inventory","text":"You can monitor the IP addresses inventory of subnets using CNI Metrics Helper . You can also set CloudWatch alarms to get notified if a subnet is running out of IP addresses.","title":"Monitor IP address inventory"},{"location":"reliability/docs/networkmanagement/#using-public-subnets-for-worker-nodes","text":"If you use public subnets, then they must have the automatic public IP address assignment setting enabled; otherwise, worker nodes will not be able to communicate with the cluster.","title":"Using public subnets for worker nodes"},{"location":"reliability/docs/networkmanagement/#run-worker-nodes-and-pods-in-different-subnets","text":"Consider creating separate subnets for Pod networking (also called CNI custom networking ) to avoid IP address allocation conflicts between Pods and other resources in the VPC.","title":"Run worker nodes and pods in different subnets"},{"location":"reliability/docs/networkmanagement/#snat","text":"If your Pods with private IP address need to communicate with other private IP address spaces (for example, Direct Connect, VPC Peering or Transit VPC), then you need to enable external SNAT in the CNI: kubectl set env daemonset -n kube-system aws-node AWS_VPC_K8S_CNI_EXTERNALSNAT = true","title":"SNAT"},{"location":"reliability/docs/networkmanagement/#size-your-subnets-for-growth","text":"The CNI pre-allocates and caches a certain number of IP addresses so that Kubernetes scheduler can schedule pods on these worker nodes. The IP addresses are available on the worker nodes, whether you launch pods or not. When you provision a worker node, the CNI allocates a pool of secondary IP addresses (called warm pool ) from the node\u2019s primary ENI. As the pool gets depleted, the CNI attaches another ENI to assign more IP addresses. This process continues until no more ENIs can be attached to the node. Sizing your subnets for growth will prevent your subnets from running out of IP addresses as your Pods and nodes scale. You will not be able to create new Pods or nodes if the subnets don\u2019t have available IP addresses. If you need to constrain the IP addresses the CNI caches then you can use these CNI environment variables: WARM_IP_TARGET -- Number of free IP addresses the CNI should keep available. Use this if your subnet is small and you want to reduce IP address usage. MINIMUM_IP_TARGET -- Number of minimum IP addresses the CNI should allocate at node startup. To configure these options, you can download aws-k8s-cni.yaml compatible with your cluster and set environment variables. At the time of writing, the latest release is located here . !!! info Configure the value of MINIMUM_IP_TARGET to closely match the number of Pods you expect to run on your nodes. Doing so will ensure that as Pods get created, the CNI can assign IP addresses from the warm pool without calling the EC2 API. !!! warning Avoid setting the value of WARM_IP_TARGET too low as it will cause additional calls to the EC2 API, and that might cause throttling of the requests.","title":"Size your subnets for growth"},{"location":"reliability/docs/networkmanagement/#cni-custom-networking","text":"By default, the CNI assigns Pod\u2019s IP address from the worker node's primary elastic network interface's (ENI) security groups and subnet. If you don\u2019t have enough IP addresses in the worker node subnet or prefer that the worker nodes and Pods reside in separate subnets, you can use CNI custom networking . Enabling a custom network removes an available elastic network interface (and all of its available IP addresses for pods) from each worker node that uses it. The worker node's primary network interface is not used for pod placement when a custom network is enabled. If you want the CNI to assign IP addresses for Pods from a different subnet, you can set AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG environment variable to true . kubectl set env daemonset aws-node -n kube-system AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG = true \ud83d\udcdd EKS managed node groups currently don\u2019t support custom networking option. When AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG=true , the CNI will assign Pod IP address from a subnet defined in ENIConfig . The ENIConfig custom resource is used to define the subnet in which Pods will be scheduled. apiVersion : crd.k8s.amazonaws.com/v1alpha1 kind : ENIConfig metadata : name : us-west-2a spec : securityGroups : - sg-0dff111a1d11c1c11 subnet : subnet-011b111c1f11fdf11 You will need to create an ENIconfig custom resource for each subnet you want to use for Pod networking. - The securityGroups field should have the ID of the security group attached to the worker nodes. - The name field should be the name of the Availability Zone in your VPC. If you name your ENIConfig custom resources after each Availability Zone in your VPC, you can enable Kubernetes to automatically apply the corresponding ENIConfig for the worker node Availability Zone with the following command. kubectl set env daemonset aws-node \\ -n kube-system ENI_CONFIG_LABEL_DEF = failure-domain.beta.kubernetes.io/zone Upon creating the ENIconfig custom resources, you will need to create new worker nodes. The existing worker nodes and Pods will remain unaffected. You will also need to calculate the maximum number of Pods that can be scheduled on each worker node and pass it in worker nodes\u2019 user-data script. To determine the number of Pods for each worker node, you will need to know the number of network interfaces and the IPv4 addresses per network interface the worker node supports . The formula for calculating the maximum number of pods for an EC2 instance is: maxPods = (number of interfaces - 1) * (max IPv4 addresses per interface - 1) + 2 For a c3.large EC2 instance, the calculation will be: Maximum Pods = ((number of interfaces = 3) - 1) * ((max IPv4 addresses = 10) - 1) +2 => Maximum Pods = (3 - 1) * (10 - 1) + 2 => Maximum Pods = 2 * 9 + 2 = 20 You can then pass the max-pods value in the worker nodes\u2019 user-data script: --use-max-pods false --kubelet-extra-args '--max-pods=20' Since the node\u2019s primary ENI is no longer used to assign Pod IP addresses, there is a decline in the number of Pods you can run on a given EC2 instance type.","title":"CNI custom networking"},{"location":"reliability/docs/networkmanagement/#using-alternate-cni-plugins","text":"AWS VPC CNI plugin is the only officially supported network plugin on EKS. However, since EKS runs upstream Kubernetes and is certified Kubernetes conformant, you can use alternate CNI plugins . A compelling reason to opt for an alternate CNI plugin is to run Pods without using a VPC IP address per Pod. Although, using an alternate CNI plugin can come at the expense of network performance. Refer to EKS documentation for the list alternate compatible CNI plugins . Consider obtaining the CNI vendor\u2019s commercial support if you plan on using an alternate CNI in production.","title":"Using alternate CNI plugins"},{"location":"reliability/docs/networkmanagement/#coredns","text":"CoreDNS fulfills name resolution and service discovery functions in Kubernetes. It is installed by default on EKS clusters. For interoperability, the Kubernetes Service for CoreDNS is still named kube-dns . CoreDNS Pods run as part of a Deployment in kube-system namespace, and in EKS, by default, it runs two replicas with declared requests and limits. DNS queries are sent to the kube-dns Service that runs in the kube-system Namespace.","title":"CoreDNS"},{"location":"reliability/docs/networkmanagement/#recommendations_2","text":"","title":"Recommendations"},{"location":"reliability/docs/networkmanagement/#monitor-coredns-metrics","text":"CoreDNS has built in support for Prometheus . You should especially consider monitoring CoreDNS latency ( coredns_dns_request_duration_seconds_sum ), errors ( coredns_dns_response_rcode_count_total , NXDOMAIN, SERVFAIL, FormErr) and CoreDNS Pod\u2019s memory consumption. For troubleshooting purposes, you can use kubectl to view CoreDNS logs: for p in $(kubectl get pods \u2014namespace=kube-system -l k8s-app=kube-dns -o name); do kubectl logs \u2014namespace=kube-system $p; done","title":"Monitor CoreDNS metrics"},{"location":"reliability/docs/networkmanagement/#use-nodelocal-dnscache","text":"You can improve the Cluster DNS performance by running NodeLocal DNSCache . This feature runs a DNS caching agent on cluster nodes as a DaemonSet. All the pods use the DNS caching agent running on the node for name resolution instead of using kube-dns Service.","title":"Use NodeLocal DNSCache"},{"location":"reliability/docs/networkmanagement/#configure-cluster-proportional-scaler-for-coredns","text":"Another method of improving Cluster DNS performance is by automatically horizontally scaling the CoreDNS Deployment based on the number of nodes and CPU cores in the cluster. Horizontal cluster-proportional-autoscaler is a container that resizes the number of replicas of a Deployment based on the size of the schedulable data-plane. Nodes and the aggregate of CPU cores in the nodes are the two metrics with which you can scale CoreDNS. You can use both metrics simultaneously. If you use larger nodes, CoreDNS scaling is based on the number of CPU cores. Whereas, if you use smaller nodes, the number of CoreDNS replicas depends on the CPU cores in your data-plane. Proportional autoscaler configuration looks like this: linear: '{\"coresPerReplica\":256,\"min\":1,\"nodesPerReplica\":16}'","title":"Configure cluster-proportional-scaler for CoreDNS"},{"location":"security/docs/","text":"Amazon EKS Best Practices Guide for Security \u00b6 This guide provides advice about protecting information, systems, and assets that are reliant on EKS while delivering business value through risk assessments and mitigation strategies. The guidance herein is part of a series of best practices guides that AWS is publishing to help customers implement EKS in accordance with best practices. Guides for Performance, Operational Excellence, Cost Optimization, and Reliability will be available in the coming months. How to use this guide \u00b6 This guide is meant for security practitioners who are responsible for implementing and monitoring the effectiveness of security controls for EKS clusters and the workloads they support. The guide is organized into different topic areas for easier consumption. Each topic starts with a brief overview, followed by a list of recommendations and best practices for securing your EKS clusters. The topics do not need to be read in a particular order. Understanding the Shared Responsibility Model \u00b6 Security and compliance are considered shared responsibilities when using a managed service like EKS. Generally speaking, AWS is responsible for security \"of\" the cloud whereas you, the customer, are responsible for security \"in\" the cloud. With EKS, AWS is responsible for managing of the EKS managed Kubernetes control plane. This includes the Kubernetes masters, the ETCD database, and other infrastructure necessary for AWS to deliver a secure and reliable service. As a consumer of EKS, you are largely responsible for the topics in this guide, e.g. IAM, pod security, runtime security, network security, and so forth. When it comes to infrastructure security, AWS will assume additional responsibilities as you move from self-managed workers, to managed node groups, to Fargate. For example, with Fargate, AWS becomes responsible for securing the underlying instance/runtime used to run your Pods. AWS will also assume responsibility of keeping the EKS optimized AMI up to date with Kubernetes patch versions and security patches. Customers using Managed Node Groups (MNG) are responsible for upgrading their Nodegroups to the latest AMI via EKS API, CLI, Cloudformation or AWS Console. Also unlike Fargate, MNGs will not automatically scale your infrastructure/cluster. That can be handled by the cluster-autoscaler or other technologies such as native AWS autoscaling, SpotInst's Ocean , or Atlassian's Escalator . Before designing your system, it is important to know where the line of demarcation is between your responsibilities and the provider of the service (AWS). For additional information about the shared responsibility model, see https://aws.amazon.com/compliance/shared-responsibility-model/ Introduction \u00b6 There are several security best practice areas that are pertinent when using a managed Kubernetes service like EKS: Identity and Access Management Pod Security Runtime Security Network Security Multi-tenancy Detective Controls Infrastructure Security Data Encryption and Secrets Management Regulatory Compliance Incident Response and Forensics Image Security As part of designing any system, you need to think about its security implications and the practices that can affect your security posture. For example, you need to control who can perform actions against a set of resources. You also need the ability to quickly identify security incidents, protect your systems and services from unauthorized access, and maintain the confidentiality and integrity of data through data protection. Having a well-defined and rehearsed set of processes for responding to security incidents will improve your security posture too. These tools and techniques are important because they support objectives such as preventing financial loss or complying with regulatory obligations. AWS helps organizations achieve their security and compliance goals by offering a rich set of security services that have evolved based on feedback from a broad set of security conscious customers. By offering a highly secure foundation, customers can spend less time on \u201cundifferentiated heavy lifting\u201d and more time on achieving their business objectives. Feedback \u00b6 This guide is being released on GitHub so as to collect direct feedback and suggestions from the broader EKS/Kubernetes community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. Our intention is to update the guide periodically as new features are added to the service or when a new best practice evolves. Further Reading \u00b6 Kubernetes Security Whitepaper , sponsored by the Security Audit Working Group, this Whitepaper describes key aspects of the Kubernetes attack surface and security architecture with the aim of helping security practitioners make sound design and implementation decisions.","title":"Home"},{"location":"security/docs/#amazon-eks-best-practices-guide-for-security","text":"This guide provides advice about protecting information, systems, and assets that are reliant on EKS while delivering business value through risk assessments and mitigation strategies. The guidance herein is part of a series of best practices guides that AWS is publishing to help customers implement EKS in accordance with best practices. Guides for Performance, Operational Excellence, Cost Optimization, and Reliability will be available in the coming months.","title":"Amazon EKS Best Practices Guide for Security"},{"location":"security/docs/#how-to-use-this-guide","text":"This guide is meant for security practitioners who are responsible for implementing and monitoring the effectiveness of security controls for EKS clusters and the workloads they support. The guide is organized into different topic areas for easier consumption. Each topic starts with a brief overview, followed by a list of recommendations and best practices for securing your EKS clusters. The topics do not need to be read in a particular order.","title":"How to use this guide"},{"location":"security/docs/#understanding-the-shared-responsibility-model","text":"Security and compliance are considered shared responsibilities when using a managed service like EKS. Generally speaking, AWS is responsible for security \"of\" the cloud whereas you, the customer, are responsible for security \"in\" the cloud. With EKS, AWS is responsible for managing of the EKS managed Kubernetes control plane. This includes the Kubernetes masters, the ETCD database, and other infrastructure necessary for AWS to deliver a secure and reliable service. As a consumer of EKS, you are largely responsible for the topics in this guide, e.g. IAM, pod security, runtime security, network security, and so forth. When it comes to infrastructure security, AWS will assume additional responsibilities as you move from self-managed workers, to managed node groups, to Fargate. For example, with Fargate, AWS becomes responsible for securing the underlying instance/runtime used to run your Pods. AWS will also assume responsibility of keeping the EKS optimized AMI up to date with Kubernetes patch versions and security patches. Customers using Managed Node Groups (MNG) are responsible for upgrading their Nodegroups to the latest AMI via EKS API, CLI, Cloudformation or AWS Console. Also unlike Fargate, MNGs will not automatically scale your infrastructure/cluster. That can be handled by the cluster-autoscaler or other technologies such as native AWS autoscaling, SpotInst's Ocean , or Atlassian's Escalator . Before designing your system, it is important to know where the line of demarcation is between your responsibilities and the provider of the service (AWS). For additional information about the shared responsibility model, see https://aws.amazon.com/compliance/shared-responsibility-model/","title":"Understanding the Shared Responsibility Model"},{"location":"security/docs/#introduction","text":"There are several security best practice areas that are pertinent when using a managed Kubernetes service like EKS: Identity and Access Management Pod Security Runtime Security Network Security Multi-tenancy Detective Controls Infrastructure Security Data Encryption and Secrets Management Regulatory Compliance Incident Response and Forensics Image Security As part of designing any system, you need to think about its security implications and the practices that can affect your security posture. For example, you need to control who can perform actions against a set of resources. You also need the ability to quickly identify security incidents, protect your systems and services from unauthorized access, and maintain the confidentiality and integrity of data through data protection. Having a well-defined and rehearsed set of processes for responding to security incidents will improve your security posture too. These tools and techniques are important because they support objectives such as preventing financial loss or complying with regulatory obligations. AWS helps organizations achieve their security and compliance goals by offering a rich set of security services that have evolved based on feedback from a broad set of security conscious customers. By offering a highly secure foundation, customers can spend less time on \u201cundifferentiated heavy lifting\u201d and more time on achieving their business objectives.","title":"Introduction"},{"location":"security/docs/#feedback","text":"This guide is being released on GitHub so as to collect direct feedback and suggestions from the broader EKS/Kubernetes community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. Our intention is to update the guide periodically as new features are added to the service or when a new best practice evolves.","title":"Feedback"},{"location":"security/docs/#further-reading","text":"Kubernetes Security Whitepaper , sponsored by the Security Audit Working Group, this Whitepaper describes key aspects of the Kubernetes attack surface and security architecture with the aim of helping security practitioners make sound design and implementation decisions.","title":"Further Reading"},{"location":"security/docs/cluster-autoscaling/","text":"Kubernetes Cluster Autoscaler \u00b6 Overview \u00b6 The Kubernetes Cluster Autoscaler is a popular Cluster Autoscaling solution maintained by SIG Autoscaling . It is responsible for ensuring that your cluster has enough nodes to schedule your pods without wasting resources. It watches for pods that fail to schedule and for nodes that are underutilized. It then simulates the addition or removal of nodes before applying the change to your cluster. The AWS Cloud Provider implementation within Cluster Autoscaler controls the .DesiredReplicas field of your EC2 Auto Scaling Groups. This guide will provide a mental model for configuring the Cluster Autoscaler and choosing the best set of tradeoffs to meet your organization\u2019s requirements. While there is no single best configuration, there are a set of configuration options that enable you to trade off performance, scalability, cost, and availability. Additionally, this guide will provide tips and best practices for optimizing your configuration for AWS. Glossary \u00b6 The following terminology will be used frequently throughout this document. These terms can have broad meaning, but are limited to the definitions below for the purposes of this document. Scalability refers to how well the Cluster Autoscaler performs as your Kubernetes Cluster increases in number of pods and nodes. As scalability limits are reached, the Cluster Autoscaler\u2019s performance and functionality degrades. As the Cluster Autoscaler exceeds its scalability limits, it may no longer add or remove nodes in your cluster. Performance refers to how quickly the Cluster Autoscaler is able to make and execute scaling decisions. A perfectly performing Cluster Autoscaler would instantly make a decision and trigger a scaling action in response to stimuli, such as a pod becoming unschedulable. Availability means that pods can be scheduled quickly and without disruption. This includes when newly created pods need to be scheduled and when a scaled down node terminates any remaining pods scheduled to it. Cost is determined by the decision behind scale out and scale in events. Resources are wasted if an existing node is underutilized or a new node is added that is too large for incoming pods. Depending on the use case, there can be costs associated with prematurely terminating pods due to an aggressive scale down decision. Node Groups are an abstract Kubernetes concept for a group of nodes within a cluster. It is not a true Kubernetes resource, but exists as an abstraction in the Cluster Autoscaler, Cluster API, and other components. Nodes within a Node Group share properties like labels and taints, but may consist of multiple Availability Zones or Instance Types. EC2 Auto Scaling Groups can be used as an implementation of Node Groups on EC2. EC2 Auto Scaling Groups are configured to launch instances that automatically join their Kubernetes Clusters and apply labels and taints to their corresponding Node resource in the Kubernetes API. EC2 Managed Node Groups are another implementation of Node Groups on EC2. They abstract away the complexity manually configuring EC2 Autoscaling Scaling Groups and provide additional management features like node version upgrade and graceful node termination. Operating the Cluster Autoscaler \u00b6 The Cluster Autoscaler is typically installed as a Deployment in your cluster. It uses leader election to ensure high availability, but work is done by a single replica at a time. It is not horizontally scalable. For basic setups, the default it should work out of the box using the provided installation instructions , but there are a few things to keep in mind. Ensure that: The Cluster Autoscaler\u2019s version matches the Cluster\u2019s Version. Cross version compatibility is not tested or supported . Auto Discovery is enabled, unless you have specific advanced use cases that prevent use of this mode. Configuring your Node Groups \u00b6 Effective autoscaling starts with correctly configuring a set of Node Groups for your cluster. Selecting the right set of Node Groups is key to maximizing availability and reducing cost across your workloads. AWS implements Node Groups using EC2 Auto Scaling Groups, which are flexible to a large number of use cases. However, the Cluster Autoscaler makes some assumptions about your Node Groups. Keeping your EC2 Auto Scaling Group configurations consistent with these assumptions will minimize undesired behavior. Ensure that: Each Node in a Node Group has identical scheduling properties, such as Labels, Taints, and Resources. For MixedInstancePolicies, the Instance Types must be of the same shape for CPU, Memory, and GPU The first Instance Type specified in the policy will be used to simulate scheduling. If your policy has additional Instance Types with more resources, resources may be wasted after scale out. If your policy has additional Instance Types with less resources, pods may fail to schedule on the instances. Node Groups with many nodes are preferred over many Node Groups with fewer nodes. This will have the biggest impact on scalability. Wherever possible, prefer EC2 features when both systems provide support (e.g. Regions, MixedInstancePolicy) Note: If possible, we recommend using EKS Managed Node Groups . Managed Node Groups come with powerful management features, including features for Cluster Autoscaler like automatic EC2 Auto Scaling Group discovery and graceful node termination. Optimizing for Performance and Scalability \u00b6 Understanding the autoscaling algorithm\u2019s runtime complexity will help you tune the Cluster Autoscaler to continue operating smoothly in large clusters with greater than 1,000 nodes . The primary knobs for tuning scalability of the Cluster Autoscaler are the resources provided to the process, the scan interval of the algorithm, and the number of Node Groups in the cluster. There are other factors involved in the true runtime complexity of this algorithm, such as scheduling plugin complexity and number of pods. These are considered to be unconfigurable parameters as they are natural to the cluster\u2019s workload and cannot easily be tuned. The Cluster Autoscaler loads the entire cluster\u2019s state into memory, including Pods, Nodes, and Node Groups. On each scan interval, the algorithm identifies unschedulable pods and simulates scheduling for each Node Group. Tuning these factors come with different tradeoffs which should be carefully considered for your use case. Vertically Autoscaling the Cluster Autoscaler \u00b6 The simplest way to scale the Cluster Autoscaler to larger clusters is to increase the resource requests for its deployment. Both memory and CPU should be increased for large clusters, though this varies significantly with cluster size. The autoscaling algorithm stores all pods and nodes in memory, which can result in a memory footprint larger than a gigabyte in some cases. Increasing resources is typically done manually. If you find that constant resource tuning is creating an operational burden, consider using the Addon Resizer or Vertical Pod Autoscaler . Reducing the number of Node Groups \u00b6 Minimizing the number of node groups is one way to ensure that the Cluster Autoscaler will continue to perform well on large clusters. This may be challenging for some organizations who structure their node groups per team or per application. While this is fully supported by the Kubernetes API, this is considered to be a Cluster Autoscaler anti-pattern with repercussions for scalability. There are many reasons to use multiple node groups (e.g. Spot or GPUs), but in many cases there are alternative designs that achieve the same effect while using a small number of groups. Ensure that: Pod isolation is done using Namespaces rather than Node Groups. This may not be possible in low-trust multi-tenant clusters. Pod ResourceRequests and ResourceLimits are properly set to avoid resource contention. Larger instance types will result in more optimal bin packing and reduced system pod overhead. NodeTaints or NodeSelectors are used to schedule pods as the exception, not as the rule. Regional resources are defined as a single EC2 Auto Scaling Group with multiple Availability Zones. Reducing the Scan Interval \u00b6 A low scan interval (e.g. 10 seconds) will ensure that the Cluster Autoscaler responds as quickly as possible when pods become unschedulable. However, each scan results in many API calls to the Kubernetes API and EC2 Auto Scaling Group or EKS Managed Node Group APIs. These API calls can result in rate limiting or even service unavailability for your Kubernetes Control Plane. The default scan interval is 10 seconds, but on AWS, launching a node takes significantly longer to launch a new instance. This means that it\u2019s possible to increase the interval without significantly increasing overall scale up time. For example, if it takes 2 minutes to launch a node, changing the interval to 1 minute will result a tradeoff of 6x reduced API calls for 38% slower scale ups. Sharding Across Node Groups \u00b6 The Cluster Autoscaler can be configured to operate on a specific set of Node Groups. Using this functionality, it\u2019s possible to deploy multiple instances of the Cluster Autoscaler, each configured to operate on a different set of Node Groups. This strategy enables you use arbitrarily large numbers of Node Groups, trading cost for scalability. We only recommend using this as a last resort for improving performance. The Cluster Autoscaler was not originally designed for this configuration, so there are some side effects. Since the shards do not communicate, it\u2019s possible for multiple autoscalers to attempt to schedule an unschedulable pod. This can result in unnecessary scale out of multiple Node Groups. These extra nodes will scale back in after the scale-down-delay . metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 1 ... -- nodes = 1 : 10 : k8s - worker - asg - 1 -- nodes = 1 : 10 : k8s - worker - asg - 2 --- metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 2 ... -- nodes = 1 : 10 : k8s - worker - asg - 3 -- nodes = 1 : 10 : k8s - worker - asg - 4 Ensure that: Each shard is configured to point to a unique set of EC2 Auto Scaling Groups Each shard is deployed to a separate namespace to avoid leader election conflicts Optimizing for Cost and Availability \u00b6 Spot Instances \u00b6 You can use Spot Instances in your node groups and save up to 90% off the on-demand price, with the trade-off the Spot Instances can be interrupted at any time when EC2 needs the capacity back. Insufficient Capacity Errors will occur when your EC2 Auto Scaling group cannot scale up due to lack of available capacity. Maximizing diversity by selecting many instance families can increase your chance of achieving your desired scale by tapping into many Spot capacity pools, and decrease the impact of Spot Instance interruptions on your cluster availability. Mixed Instance Policies with Spot Instances are a great way to increase diversity without increasing the number of node groups. Keep in mind, if you need guaranteed resources, use On-Demand Instances instead of Spot Instances. It\u2019s critical that all Instance Types have similar resource capacity when configuring Mixed Instance Policies. The autoscaler\u2019s scheduling simulator uses the first InstanceType in the MixedInstancePolicy. If subsequent Instance Types are larger, resources may be wasted after a scale up. If smaller, your pods may fail to schedule on the new instances due to insufficient capacity. For example, M4, M5, M5a, and M5n instances all have similar amounts of CPU and Memory and are great candidates for a MixedInstancePolicy. The EC2 Instance Selector tool can help you identify similar instance types. It's recommended to isolate On-Demand and Spot capacity into separate EC2 Auto Scaling groups. This is preferred over using a base capacity strategy because the scheduling properties are fundamentally different. Since Spot Instances be interrupted at any time (when EC2 needs the capacity back), users will often taint their preemptable nodes, requiring an explicit pod toleration to the preemption behavior. These taints result in different scheduling properties for the nodes, so they should be separated into multiple EC2 Auto Scaling Groups. The Cluster Autoscaler has a concept of Expanders , which provide different strategies for selecting which Node Group to scale. The strategy --expander=least-waste is a good general purpose default, and if you're going to use multiple node groups for Spot Instance diversification (as described in the image above), it could help further cost-optimize the node groups by scaling the group which would be best utilized after the scaling activity. Prioritizing a node group / ASG \u00b6 You may also configure priority based autoscaling by using the Priority expander. --expander=priority enables your cluster to prioritize a node group / ASG, and if it is unable to scale for any reason, it will choose the next node group in the prioritized list. This is useful in situations where, for example, you want to use P3 instance types because their GPU provides optimal performance for your workload, but as a second option you can also use P2 instance types. apiVersion : v1 kind : ConfigMap metadata : name : cluster - autoscaler - priority - expander namespace : kube - system data : priority : |- 10 : - .* p2 - node - group .* 50 : - .* p3 - node - group .* Cluster Autoscaler will try to scale up the EC2 Auto Scaling group matching the name p2-node-group . If this operation does not succeed within --max-node-provision-time , it will attempt to scale an EC2 Auto Scaling group matching the name p3-node-group . This value defaults to 15 minutes and can be reduced for more responsive node group selection, though if the value is too low, it can cause unnecessary scale outs. Overprovisioning \u00b6 The Cluster Autoscaler minimizes costs by ensuring that nodes are only added to the cluster when needed and are removed when unused. This significantly impacts deployment latency because many pods will be forced to wait for a node scale up before they can be scheduled. Nodes can take multiple minutes to become available, which can increase pod scheduling latency by an order of magnitude. This can be mitigated using overprovisioning , which trades cost for scheduling latency. Overprovisioning is implemented using temporary pods with negative priority, which occupy space in the cluster. When newly created pods are unschedulable and have higher priority, the temporary pods will be preempted to make room. The temporary pods then become unschedulable, triggering the Cluster Autoscaler to scale out new overprovisioned nodes. There are other less obvious benefits to overprovisioning. Without overprovisioning, one of the side effects of a highly utilized cluster is that pods will make less optimal scheduling decisions using the preferredDuringSchedulingIgnoredDuringExecution rule of Pod or Node Affinity. A common use case for this is to separate pods for a highly available application across availability zones using AntiAffinity. Overprovisioning can significantly increase the chance that a node of the correct zone is available. The amount of overprovisioned capacity is a careful business decision for your organization. At its core, it\u2019s a tradeoff between performance and cost. One way to make this decision is to determine your average scale up frequency and divide it by the amount of time it takes to scale up a new node. For example, if on average you require a new node every 30 seconds and EC2 takes 30 seconds to provision a new node, a single node of overprovisioning will ensure that there\u2019s always an extra node available, reducing scheduling latency by 30 seconds at the cost of a single additional EC2 Instance. To improve zonal scheduling decisions, overprovision a number of nodes equal to the number of availability zones in your EC2 Auto Scaling Group to ensure that the scheduler can select the best zone for incoming pods. Prevent Scale Down Eviction \u00b6 Some workloads are expensive to evict. Big data analysis, machine learning tasks, and test runners will eventually complete, but must be restarted if interrupted. The Cluster Autoscaler will attempt to scale down any node under the scale-down-utilization-threshold, which will interrupt any remaining pods on the node. This can be prevented by ensuring that pods that are expensive to evict are protected by a label recognized by the Cluster Autoscaler. Ensure that: Expensive to evict pods have the label cluster-autoscaler.kubernetes.io/safe-to-evict=false Advanced Use Cases \u00b6 EBS Volumes \u00b6 Persistent storage is critical for building stateful applications, such as database or distributed caches. EBS Volumes enable this use case on Kubernetes, but are limited to a specific zone. These applications can be highly available if sharded across multiple AZs using a separate EBS Volume for each AZ. The Cluster Autoscaler can then balance the scaling of the EC2 Autoscaling Groups. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=true . Node Groups are configured with identical settings except for different availability zones and EBS Volumes. Co-Scheduling \u00b6 Machine learning distributed training jobs benefit significantly from the minimized latency of same-zone node configurations. These workloads deploy multiple pods to a specific zone. This can be achieved by setting Pod Affinity for all co-scheduled pods or Node Affinity using topologyKey: failure-domain.beta.kubernetes.io/zone . The Cluster Autoscaler will then scale out a specific zone to match demands. You may wish to allocate multiple EC2 Auto Scaling Groups, one per availability zone to enable failover for the entire co-scheduled workload. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=false Node Affinity and/or Pod Preemption is used when clusters include both Regional and Zonal Node Groups. Use Node Affinity to force or encourage regional pods to avoid zonal Node Groups, and vice versa. If zonal pods schedule onto regional node groups, this will result in imbalanced capacity for your regional pods. If your zonal workloads can tolerate disruption and relocation, configure Pod Preemption to enable regionally scaled pods to force preemption and rescheduling on a less contested zone. Accelerators \u00b6 Some clusters take advantage of specialized hardware accelerators such as GPU. When scaling out, the accelerator device plugin can take several minutes to advertise the resource to the cluster. The Cluster Autoscaler has simulated that this node will have the accelerator, but until the accelerator becomes ready and updates the node\u2019s available resources, pending pods can not be scheduled on the node. This can result in repeated unnecessary scale out . Additionally, nodes with accelerators and high CPU or Memory utilization will not be considered for scale down, even if the accelerator is unused. This behavior can be expensive due to the relative cost of accelerators. Instead, the Cluster Autoscaler can apply special rules to consider nodes for scale down if they have unoccupied accelerators. To ensure the correct behavior for these cases, you can configure the kubelet on your accelerator nodes to label the node before it joins the cluster. The Cluster Autoscaler will use this label selector to trigger the accelerator optimized behavior. Ensure that: The Kubelet for GPU nodes is configured with --node-labels k8s.amazonaws.com/accelerator=$ACCELERATOR_TYPE Nodes with Accelerators adhere to the identical scheduling properties rule noted above. Scaling from 0 \u00b6 Cluster Autoscaler is capable of scaling Node Groups to and from zero, which can yield significant cost savings. It detects the CPU, memory, and GPU resources of an Auto Scaling Group by inspecting the InstanceType specified in its LaunchConfiguration or LaunchTemplate. Some pods require additional resources like WindowsENI or PrivateIPv4Address or specific NodeSelectors or Taints which cannot be discovered from the LaunchConfiguration. The Cluster Autoscaler can account for these factors by discovering them from tags on the EC2 Auto Scaling Group. For example: Key : k8s . io /cluster-autoscaler/node-template/resources/ $RESOURCE_NAME Value : 5 Key : k8s . io /cluster-autoscaler/node-template/label/ $LABEL_KEY Value : $LABEL_VALUE Key : k8s . io /cluster-autoscaler/node-template/taint/ $TAINT_KEY Value : NoSchedule Note: Keep in mind, when scaling to zero your capacity is returned to EC2 and may be unavailable in the future. Additional Parameters \u00b6 There are many configuration options that can be used to tune the behavior and performance of the Cluster Autoscaler. A complete list of parameters is available on Github . Parameter Description Default scan-interval How often cluster is reevaluated for scale up or down 10 seconds max-empty-bulk-delete Maximum number of empty nodes that can be deleted at the same time. 10 scale-down-delay-after-add How long after scale up that scale down evaluation resumes 10 minutes scale-down-delay-after-delete How long after node deletion that scale down evaluation resumes, defaults to scan-interval scan-interval scale-down-delay-after-failure How long after scale down failure that scale down evaluation resumes 3 minutes scale-down-unneeded-time How long a node should be unneeded before it is eligible for scale down 10 minutes scale-down-unready-time How long an unready node should be unneeded before it is eligible for scale down 20 minutes scale-down-utilization-threshold Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down 0.5 scale-down-non-empty-candidates-count Maximum number of non empty nodes considered in one iteration as candidates for scale down with drain. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to non positive value to turn this heuristic off - CA will not limit the number of nodes it considers.\u201c 30 scale-down-candidates-pool-ratio A ratio of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to 1.0 to turn this heuristics off - CA will take all nodes as additional candidates. 0.1 scale-down-candidates-pool-min-count Minimum number of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. When calculating the pool size for additional candidates we take max(#nodes * scale-down-candidates-pool-ratio, scale-down-candidates-pool-min-count) 50 Additional Resources \u00b6 This page contains a list of Cluster Autoscaler presentations and demos. If you'd like to add a presentation or demo here, please send a pull request. Presentation/Demo Presenters Autoscaling and Cost Optimization on Kubernetes: From 0 to 100 Guy Templeton, Skyscanner & Jiaxin Shan, Amazon References \u00b6 https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md https://github.com/aws/amazon-ec2-instance-selector https://github.com/aws/aws-node-termination-handler","title":"Kubernetes Cluster Autoscaler"},{"location":"security/docs/cluster-autoscaling/#kubernetes-cluster-autoscaler","text":"","title":"Kubernetes Cluster Autoscaler"},{"location":"security/docs/cluster-autoscaling/#overview","text":"The Kubernetes Cluster Autoscaler is a popular Cluster Autoscaling solution maintained by SIG Autoscaling . It is responsible for ensuring that your cluster has enough nodes to schedule your pods without wasting resources. It watches for pods that fail to schedule and for nodes that are underutilized. It then simulates the addition or removal of nodes before applying the change to your cluster. The AWS Cloud Provider implementation within Cluster Autoscaler controls the .DesiredReplicas field of your EC2 Auto Scaling Groups. This guide will provide a mental model for configuring the Cluster Autoscaler and choosing the best set of tradeoffs to meet your organization\u2019s requirements. While there is no single best configuration, there are a set of configuration options that enable you to trade off performance, scalability, cost, and availability. Additionally, this guide will provide tips and best practices for optimizing your configuration for AWS.","title":"Overview"},{"location":"security/docs/cluster-autoscaling/#glossary","text":"The following terminology will be used frequently throughout this document. These terms can have broad meaning, but are limited to the definitions below for the purposes of this document. Scalability refers to how well the Cluster Autoscaler performs as your Kubernetes Cluster increases in number of pods and nodes. As scalability limits are reached, the Cluster Autoscaler\u2019s performance and functionality degrades. As the Cluster Autoscaler exceeds its scalability limits, it may no longer add or remove nodes in your cluster. Performance refers to how quickly the Cluster Autoscaler is able to make and execute scaling decisions. A perfectly performing Cluster Autoscaler would instantly make a decision and trigger a scaling action in response to stimuli, such as a pod becoming unschedulable. Availability means that pods can be scheduled quickly and without disruption. This includes when newly created pods need to be scheduled and when a scaled down node terminates any remaining pods scheduled to it. Cost is determined by the decision behind scale out and scale in events. Resources are wasted if an existing node is underutilized or a new node is added that is too large for incoming pods. Depending on the use case, there can be costs associated with prematurely terminating pods due to an aggressive scale down decision. Node Groups are an abstract Kubernetes concept for a group of nodes within a cluster. It is not a true Kubernetes resource, but exists as an abstraction in the Cluster Autoscaler, Cluster API, and other components. Nodes within a Node Group share properties like labels and taints, but may consist of multiple Availability Zones or Instance Types. EC2 Auto Scaling Groups can be used as an implementation of Node Groups on EC2. EC2 Auto Scaling Groups are configured to launch instances that automatically join their Kubernetes Clusters and apply labels and taints to their corresponding Node resource in the Kubernetes API. EC2 Managed Node Groups are another implementation of Node Groups on EC2. They abstract away the complexity manually configuring EC2 Autoscaling Scaling Groups and provide additional management features like node version upgrade and graceful node termination.","title":"Glossary"},{"location":"security/docs/cluster-autoscaling/#operating-the-cluster-autoscaler","text":"The Cluster Autoscaler is typically installed as a Deployment in your cluster. It uses leader election to ensure high availability, but work is done by a single replica at a time. It is not horizontally scalable. For basic setups, the default it should work out of the box using the provided installation instructions , but there are a few things to keep in mind. Ensure that: The Cluster Autoscaler\u2019s version matches the Cluster\u2019s Version. Cross version compatibility is not tested or supported . Auto Discovery is enabled, unless you have specific advanced use cases that prevent use of this mode.","title":"Operating the Cluster Autoscaler"},{"location":"security/docs/cluster-autoscaling/#configuring-your-node-groups","text":"Effective autoscaling starts with correctly configuring a set of Node Groups for your cluster. Selecting the right set of Node Groups is key to maximizing availability and reducing cost across your workloads. AWS implements Node Groups using EC2 Auto Scaling Groups, which are flexible to a large number of use cases. However, the Cluster Autoscaler makes some assumptions about your Node Groups. Keeping your EC2 Auto Scaling Group configurations consistent with these assumptions will minimize undesired behavior. Ensure that: Each Node in a Node Group has identical scheduling properties, such as Labels, Taints, and Resources. For MixedInstancePolicies, the Instance Types must be of the same shape for CPU, Memory, and GPU The first Instance Type specified in the policy will be used to simulate scheduling. If your policy has additional Instance Types with more resources, resources may be wasted after scale out. If your policy has additional Instance Types with less resources, pods may fail to schedule on the instances. Node Groups with many nodes are preferred over many Node Groups with fewer nodes. This will have the biggest impact on scalability. Wherever possible, prefer EC2 features when both systems provide support (e.g. Regions, MixedInstancePolicy) Note: If possible, we recommend using EKS Managed Node Groups . Managed Node Groups come with powerful management features, including features for Cluster Autoscaler like automatic EC2 Auto Scaling Group discovery and graceful node termination.","title":"Configuring your Node Groups"},{"location":"security/docs/cluster-autoscaling/#optimizing-for-performance-and-scalability","text":"Understanding the autoscaling algorithm\u2019s runtime complexity will help you tune the Cluster Autoscaler to continue operating smoothly in large clusters with greater than 1,000 nodes . The primary knobs for tuning scalability of the Cluster Autoscaler are the resources provided to the process, the scan interval of the algorithm, and the number of Node Groups in the cluster. There are other factors involved in the true runtime complexity of this algorithm, such as scheduling plugin complexity and number of pods. These are considered to be unconfigurable parameters as they are natural to the cluster\u2019s workload and cannot easily be tuned. The Cluster Autoscaler loads the entire cluster\u2019s state into memory, including Pods, Nodes, and Node Groups. On each scan interval, the algorithm identifies unschedulable pods and simulates scheduling for each Node Group. Tuning these factors come with different tradeoffs which should be carefully considered for your use case.","title":"Optimizing for Performance and Scalability"},{"location":"security/docs/cluster-autoscaling/#vertically-autoscaling-the-cluster-autoscaler","text":"The simplest way to scale the Cluster Autoscaler to larger clusters is to increase the resource requests for its deployment. Both memory and CPU should be increased for large clusters, though this varies significantly with cluster size. The autoscaling algorithm stores all pods and nodes in memory, which can result in a memory footprint larger than a gigabyte in some cases. Increasing resources is typically done manually. If you find that constant resource tuning is creating an operational burden, consider using the Addon Resizer or Vertical Pod Autoscaler .","title":"Vertically Autoscaling the Cluster Autoscaler"},{"location":"security/docs/cluster-autoscaling/#reducing-the-number-of-node-groups","text":"Minimizing the number of node groups is one way to ensure that the Cluster Autoscaler will continue to perform well on large clusters. This may be challenging for some organizations who structure their node groups per team or per application. While this is fully supported by the Kubernetes API, this is considered to be a Cluster Autoscaler anti-pattern with repercussions for scalability. There are many reasons to use multiple node groups (e.g. Spot or GPUs), but in many cases there are alternative designs that achieve the same effect while using a small number of groups. Ensure that: Pod isolation is done using Namespaces rather than Node Groups. This may not be possible in low-trust multi-tenant clusters. Pod ResourceRequests and ResourceLimits are properly set to avoid resource contention. Larger instance types will result in more optimal bin packing and reduced system pod overhead. NodeTaints or NodeSelectors are used to schedule pods as the exception, not as the rule. Regional resources are defined as a single EC2 Auto Scaling Group with multiple Availability Zones.","title":"Reducing the number of Node Groups"},{"location":"security/docs/cluster-autoscaling/#reducing-the-scan-interval","text":"A low scan interval (e.g. 10 seconds) will ensure that the Cluster Autoscaler responds as quickly as possible when pods become unschedulable. However, each scan results in many API calls to the Kubernetes API and EC2 Auto Scaling Group or EKS Managed Node Group APIs. These API calls can result in rate limiting or even service unavailability for your Kubernetes Control Plane. The default scan interval is 10 seconds, but on AWS, launching a node takes significantly longer to launch a new instance. This means that it\u2019s possible to increase the interval without significantly increasing overall scale up time. For example, if it takes 2 minutes to launch a node, changing the interval to 1 minute will result a tradeoff of 6x reduced API calls for 38% slower scale ups.","title":"Reducing the Scan Interval"},{"location":"security/docs/cluster-autoscaling/#sharding-across-node-groups","text":"The Cluster Autoscaler can be configured to operate on a specific set of Node Groups. Using this functionality, it\u2019s possible to deploy multiple instances of the Cluster Autoscaler, each configured to operate on a different set of Node Groups. This strategy enables you use arbitrarily large numbers of Node Groups, trading cost for scalability. We only recommend using this as a last resort for improving performance. The Cluster Autoscaler was not originally designed for this configuration, so there are some side effects. Since the shards do not communicate, it\u2019s possible for multiple autoscalers to attempt to schedule an unschedulable pod. This can result in unnecessary scale out of multiple Node Groups. These extra nodes will scale back in after the scale-down-delay . metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 1 ... -- nodes = 1 : 10 : k8s - worker - asg - 1 -- nodes = 1 : 10 : k8s - worker - asg - 2 --- metadata : name : cluster - autoscaler namespace : cluster - autoscaler - 2 ... -- nodes = 1 : 10 : k8s - worker - asg - 3 -- nodes = 1 : 10 : k8s - worker - asg - 4 Ensure that: Each shard is configured to point to a unique set of EC2 Auto Scaling Groups Each shard is deployed to a separate namespace to avoid leader election conflicts","title":"Sharding Across Node Groups"},{"location":"security/docs/cluster-autoscaling/#optimizing-for-cost-and-availability","text":"","title":"Optimizing for Cost and Availability"},{"location":"security/docs/cluster-autoscaling/#spot-instances","text":"You can use Spot Instances in your node groups and save up to 90% off the on-demand price, with the trade-off the Spot Instances can be interrupted at any time when EC2 needs the capacity back. Insufficient Capacity Errors will occur when your EC2 Auto Scaling group cannot scale up due to lack of available capacity. Maximizing diversity by selecting many instance families can increase your chance of achieving your desired scale by tapping into many Spot capacity pools, and decrease the impact of Spot Instance interruptions on your cluster availability. Mixed Instance Policies with Spot Instances are a great way to increase diversity without increasing the number of node groups. Keep in mind, if you need guaranteed resources, use On-Demand Instances instead of Spot Instances. It\u2019s critical that all Instance Types have similar resource capacity when configuring Mixed Instance Policies. The autoscaler\u2019s scheduling simulator uses the first InstanceType in the MixedInstancePolicy. If subsequent Instance Types are larger, resources may be wasted after a scale up. If smaller, your pods may fail to schedule on the new instances due to insufficient capacity. For example, M4, M5, M5a, and M5n instances all have similar amounts of CPU and Memory and are great candidates for a MixedInstancePolicy. The EC2 Instance Selector tool can help you identify similar instance types. It's recommended to isolate On-Demand and Spot capacity into separate EC2 Auto Scaling groups. This is preferred over using a base capacity strategy because the scheduling properties are fundamentally different. Since Spot Instances be interrupted at any time (when EC2 needs the capacity back), users will often taint their preemptable nodes, requiring an explicit pod toleration to the preemption behavior. These taints result in different scheduling properties for the nodes, so they should be separated into multiple EC2 Auto Scaling Groups. The Cluster Autoscaler has a concept of Expanders , which provide different strategies for selecting which Node Group to scale. The strategy --expander=least-waste is a good general purpose default, and if you're going to use multiple node groups for Spot Instance diversification (as described in the image above), it could help further cost-optimize the node groups by scaling the group which would be best utilized after the scaling activity.","title":"Spot Instances"},{"location":"security/docs/cluster-autoscaling/#prioritizing-a-node-group-asg","text":"You may also configure priority based autoscaling by using the Priority expander. --expander=priority enables your cluster to prioritize a node group / ASG, and if it is unable to scale for any reason, it will choose the next node group in the prioritized list. This is useful in situations where, for example, you want to use P3 instance types because their GPU provides optimal performance for your workload, but as a second option you can also use P2 instance types. apiVersion : v1 kind : ConfigMap metadata : name : cluster - autoscaler - priority - expander namespace : kube - system data : priority : |- 10 : - .* p2 - node - group .* 50 : - .* p3 - node - group .* Cluster Autoscaler will try to scale up the EC2 Auto Scaling group matching the name p2-node-group . If this operation does not succeed within --max-node-provision-time , it will attempt to scale an EC2 Auto Scaling group matching the name p3-node-group . This value defaults to 15 minutes and can be reduced for more responsive node group selection, though if the value is too low, it can cause unnecessary scale outs.","title":"Prioritizing a node group / ASG"},{"location":"security/docs/cluster-autoscaling/#overprovisioning","text":"The Cluster Autoscaler minimizes costs by ensuring that nodes are only added to the cluster when needed and are removed when unused. This significantly impacts deployment latency because many pods will be forced to wait for a node scale up before they can be scheduled. Nodes can take multiple minutes to become available, which can increase pod scheduling latency by an order of magnitude. This can be mitigated using overprovisioning , which trades cost for scheduling latency. Overprovisioning is implemented using temporary pods with negative priority, which occupy space in the cluster. When newly created pods are unschedulable and have higher priority, the temporary pods will be preempted to make room. The temporary pods then become unschedulable, triggering the Cluster Autoscaler to scale out new overprovisioned nodes. There are other less obvious benefits to overprovisioning. Without overprovisioning, one of the side effects of a highly utilized cluster is that pods will make less optimal scheduling decisions using the preferredDuringSchedulingIgnoredDuringExecution rule of Pod or Node Affinity. A common use case for this is to separate pods for a highly available application across availability zones using AntiAffinity. Overprovisioning can significantly increase the chance that a node of the correct zone is available. The amount of overprovisioned capacity is a careful business decision for your organization. At its core, it\u2019s a tradeoff between performance and cost. One way to make this decision is to determine your average scale up frequency and divide it by the amount of time it takes to scale up a new node. For example, if on average you require a new node every 30 seconds and EC2 takes 30 seconds to provision a new node, a single node of overprovisioning will ensure that there\u2019s always an extra node available, reducing scheduling latency by 30 seconds at the cost of a single additional EC2 Instance. To improve zonal scheduling decisions, overprovision a number of nodes equal to the number of availability zones in your EC2 Auto Scaling Group to ensure that the scheduler can select the best zone for incoming pods.","title":"Overprovisioning"},{"location":"security/docs/cluster-autoscaling/#prevent-scale-down-eviction","text":"Some workloads are expensive to evict. Big data analysis, machine learning tasks, and test runners will eventually complete, but must be restarted if interrupted. The Cluster Autoscaler will attempt to scale down any node under the scale-down-utilization-threshold, which will interrupt any remaining pods on the node. This can be prevented by ensuring that pods that are expensive to evict are protected by a label recognized by the Cluster Autoscaler. Ensure that: Expensive to evict pods have the label cluster-autoscaler.kubernetes.io/safe-to-evict=false","title":"Prevent Scale Down Eviction"},{"location":"security/docs/cluster-autoscaling/#advanced-use-cases","text":"","title":"Advanced Use Cases"},{"location":"security/docs/cluster-autoscaling/#ebs-volumes","text":"Persistent storage is critical for building stateful applications, such as database or distributed caches. EBS Volumes enable this use case on Kubernetes, but are limited to a specific zone. These applications can be highly available if sharded across multiple AZs using a separate EBS Volume for each AZ. The Cluster Autoscaler can then balance the scaling of the EC2 Autoscaling Groups. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=true . Node Groups are configured with identical settings except for different availability zones and EBS Volumes.","title":"EBS Volumes"},{"location":"security/docs/cluster-autoscaling/#co-scheduling","text":"Machine learning distributed training jobs benefit significantly from the minimized latency of same-zone node configurations. These workloads deploy multiple pods to a specific zone. This can be achieved by setting Pod Affinity for all co-scheduled pods or Node Affinity using topologyKey: failure-domain.beta.kubernetes.io/zone . The Cluster Autoscaler will then scale out a specific zone to match demands. You may wish to allocate multiple EC2 Auto Scaling Groups, one per availability zone to enable failover for the entire co-scheduled workload. Ensure that: Node group balancing is enabled by setting balance-similar-node-groups=false Node Affinity and/or Pod Preemption is used when clusters include both Regional and Zonal Node Groups. Use Node Affinity to force or encourage regional pods to avoid zonal Node Groups, and vice versa. If zonal pods schedule onto regional node groups, this will result in imbalanced capacity for your regional pods. If your zonal workloads can tolerate disruption and relocation, configure Pod Preemption to enable regionally scaled pods to force preemption and rescheduling on a less contested zone.","title":"Co-Scheduling"},{"location":"security/docs/cluster-autoscaling/#accelerators","text":"Some clusters take advantage of specialized hardware accelerators such as GPU. When scaling out, the accelerator device plugin can take several minutes to advertise the resource to the cluster. The Cluster Autoscaler has simulated that this node will have the accelerator, but until the accelerator becomes ready and updates the node\u2019s available resources, pending pods can not be scheduled on the node. This can result in repeated unnecessary scale out . Additionally, nodes with accelerators and high CPU or Memory utilization will not be considered for scale down, even if the accelerator is unused. This behavior can be expensive due to the relative cost of accelerators. Instead, the Cluster Autoscaler can apply special rules to consider nodes for scale down if they have unoccupied accelerators. To ensure the correct behavior for these cases, you can configure the kubelet on your accelerator nodes to label the node before it joins the cluster. The Cluster Autoscaler will use this label selector to trigger the accelerator optimized behavior. Ensure that: The Kubelet for GPU nodes is configured with --node-labels k8s.amazonaws.com/accelerator=$ACCELERATOR_TYPE Nodes with Accelerators adhere to the identical scheduling properties rule noted above.","title":"Accelerators"},{"location":"security/docs/cluster-autoscaling/#scaling-from-0","text":"Cluster Autoscaler is capable of scaling Node Groups to and from zero, which can yield significant cost savings. It detects the CPU, memory, and GPU resources of an Auto Scaling Group by inspecting the InstanceType specified in its LaunchConfiguration or LaunchTemplate. Some pods require additional resources like WindowsENI or PrivateIPv4Address or specific NodeSelectors or Taints which cannot be discovered from the LaunchConfiguration. The Cluster Autoscaler can account for these factors by discovering them from tags on the EC2 Auto Scaling Group. For example: Key : k8s . io /cluster-autoscaler/node-template/resources/ $RESOURCE_NAME Value : 5 Key : k8s . io /cluster-autoscaler/node-template/label/ $LABEL_KEY Value : $LABEL_VALUE Key : k8s . io /cluster-autoscaler/node-template/taint/ $TAINT_KEY Value : NoSchedule Note: Keep in mind, when scaling to zero your capacity is returned to EC2 and may be unavailable in the future.","title":"Scaling from 0"},{"location":"security/docs/cluster-autoscaling/#additional-parameters","text":"There are many configuration options that can be used to tune the behavior and performance of the Cluster Autoscaler. A complete list of parameters is available on Github . Parameter Description Default scan-interval How often cluster is reevaluated for scale up or down 10 seconds max-empty-bulk-delete Maximum number of empty nodes that can be deleted at the same time. 10 scale-down-delay-after-add How long after scale up that scale down evaluation resumes 10 minutes scale-down-delay-after-delete How long after node deletion that scale down evaluation resumes, defaults to scan-interval scan-interval scale-down-delay-after-failure How long after scale down failure that scale down evaluation resumes 3 minutes scale-down-unneeded-time How long a node should be unneeded before it is eligible for scale down 10 minutes scale-down-unready-time How long an unready node should be unneeded before it is eligible for scale down 20 minutes scale-down-utilization-threshold Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down 0.5 scale-down-non-empty-candidates-count Maximum number of non empty nodes considered in one iteration as candidates for scale down with drain. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to non positive value to turn this heuristic off - CA will not limit the number of nodes it considers.\u201c 30 scale-down-candidates-pool-ratio A ratio of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. Lower value means better CA responsiveness but possible slower scale down latency. Higher value can affect CA performance with big clusters (hundreds of nodes). Set to 1.0 to turn this heuristics off - CA will take all nodes as additional candidates. 0.1 scale-down-candidates-pool-min-count Minimum number of nodes that are considered as additional non empty candidates for scale down when some candidates from previous iteration are no longer valid. When calculating the pool size for additional candidates we take max(#nodes * scale-down-candidates-pool-ratio, scale-down-candidates-pool-min-count) 50","title":"Additional Parameters"},{"location":"security/docs/cluster-autoscaling/#additional-resources","text":"This page contains a list of Cluster Autoscaler presentations and demos. If you'd like to add a presentation or demo here, please send a pull request. Presentation/Demo Presenters Autoscaling and Cost Optimization on Kubernetes: From 0 to 100 Guy Templeton, Skyscanner & Jiaxin Shan, Amazon","title":"Additional Resources"},{"location":"security/docs/cluster-autoscaling/#references","text":"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md https://github.com/aws/amazon-ec2-instance-selector https://github.com/aws/aws-node-termination-handler","title":"References"},{"location":"security/docs/compliance/","text":"Compliance \u00b6 Compliance is a shared responsibility between AWS and the consumers of its services. Generally speaking, AWS is responsible for \u201csecurity of the cloud\u201d whereas its users are responsible for \u201csecurity in the cloud.\u201d The line that delineates what AWS and its users are responsible for will vary depending on the service. For example, with Fargate, AWS is responsible for managing the physical security of its data centers, the hardware, the virtual infrastructure (Amazon EC2), and the container runtime (Docker). Users of Fargate are responsible for securing the container image and their application. Knowing who is responsible for what is an important consideration when running workloads that must adhere to compliance standards. The following table shows the compliance programs with which the different container services conform. Compliance Program Amazon ECS Orchestrator Amazon EKS Orchestrator ECS Fargate Amazon ECR PCI DSS Level 1 1 1 1 1 HIPAA Eligible 1 1 1 1 SOC I 1 1 1 1 SOC II 1 1 1 1 SOC III 1 1 1 1 ISO 27001:2013 1 1 1 1 ISO 9001:2015 1 1 1 1 ISO 27017:2015 1 1 1 1 ISO 27018:2019 1 1 1 1 IRAP 1 1 1 1 FedRAMP Moderate (East/West) 1 1 0 1 FedRAMP High (GovCloud) 1 1 0 1 DOD CC SRG 1 DISA Review (IL5) 0 1 HIPAA BAA 1 1 1 1 MTCS 1 1 0 1 C5 1 1 0 1 K-ISMS 1 1 0 1 ENS High 1 1 0 1 OSPAR 1 1 0 1 HITRUST CSF 1 1 1 1 Compliance status changes over time. For the latest status, always refer to https://aws.amazon.com/compliance/services-in-scope/ . For futher information about cloud accreditation models and best practices, see the AWS whitepaper, Accreditation Models for Secure Cloud Adoption Shifting Left \u00b6 The concept of shifting left involves catching policy violations and errors earlier in the software development lifecycle. From a security perspective, this can be very beneficial. A developer, for example, can fix issues with their configuration before their application is deployed to the cluster. Catching mistakes like this earlier will help prevent configurations that violate your policies from being deployed. Policy as Code \u00b6 Policy can be thought of as a set of rules for governing behaviors, i.e. behaviors that are allowed or those that are prohibited. For example, you may have a policy that says that all Dockerfiles should include a USER directive that causes the container to run as a non-root user. As a document, a policy like this can be hard to discover and enforce. It may also become outdated as your requirements change. With Policy as Code (PaC) solutions, you can automate security, compliance, and privacy controls that detect, prevent, reduce, and counteract known and persistent threats. Furthermore, they give you mechanism to codify your policies and manage them as you do other code artifacts. The benefit of this approach is that you can reuse your DevOps and GitOps strategies to manage and consistently apply policies across fleets of Kubernetes clusters. Please refer to Pod Security for information about PaC options and the future of PSPs. Recommendations \u00b6 Use Open Policy Agent (OPA) or Alcide's sKan to detect policy violations before deployment \u00b6 OPA is open source policy engine that's part of CNCF. It's used for making policy decisions and can be run a variety of different ways, e.g. as a language library or a service. OPA policies are written in a Domain Specific Language (DSL) called Rego. While it is often run as part of a Kubernetes Dynamic Admission Controller, OPA can also be incorporated into your CI/CD pipeline. This allows developers to get feedback about their configuration earlier in the release cycle which can subsequently help them resolve issues before they get to production. A collection of common OPA policies can be found in the GitHub repository for this project. Conftest is built on top of OPA and it provides a developer focused experience for testing Kubernetes configuration. sKan is powered by OPA and is \"tailor made\" to check whether their Kubernetes configuration files are compliant with security and operational best practices. Tools and resources \u00b6 kube-bench docker-bench-security actuary AWS Inspector Kubernetes Security Review A 3rd party security assessment of Kubernetes 1.13.4 (2019)","title":"Regulatory Compliance"},{"location":"security/docs/compliance/#compliance","text":"Compliance is a shared responsibility between AWS and the consumers of its services. Generally speaking, AWS is responsible for \u201csecurity of the cloud\u201d whereas its users are responsible for \u201csecurity in the cloud.\u201d The line that delineates what AWS and its users are responsible for will vary depending on the service. For example, with Fargate, AWS is responsible for managing the physical security of its data centers, the hardware, the virtual infrastructure (Amazon EC2), and the container runtime (Docker). Users of Fargate are responsible for securing the container image and their application. Knowing who is responsible for what is an important consideration when running workloads that must adhere to compliance standards. The following table shows the compliance programs with which the different container services conform. Compliance Program Amazon ECS Orchestrator Amazon EKS Orchestrator ECS Fargate Amazon ECR PCI DSS Level 1 1 1 1 1 HIPAA Eligible 1 1 1 1 SOC I 1 1 1 1 SOC II 1 1 1 1 SOC III 1 1 1 1 ISO 27001:2013 1 1 1 1 ISO 9001:2015 1 1 1 1 ISO 27017:2015 1 1 1 1 ISO 27018:2019 1 1 1 1 IRAP 1 1 1 1 FedRAMP Moderate (East/West) 1 1 0 1 FedRAMP High (GovCloud) 1 1 0 1 DOD CC SRG 1 DISA Review (IL5) 0 1 HIPAA BAA 1 1 1 1 MTCS 1 1 0 1 C5 1 1 0 1 K-ISMS 1 1 0 1 ENS High 1 1 0 1 OSPAR 1 1 0 1 HITRUST CSF 1 1 1 1 Compliance status changes over time. For the latest status, always refer to https://aws.amazon.com/compliance/services-in-scope/ . For futher information about cloud accreditation models and best practices, see the AWS whitepaper, Accreditation Models for Secure Cloud Adoption","title":"Compliance"},{"location":"security/docs/compliance/#shifting-left","text":"The concept of shifting left involves catching policy violations and errors earlier in the software development lifecycle. From a security perspective, this can be very beneficial. A developer, for example, can fix issues with their configuration before their application is deployed to the cluster. Catching mistakes like this earlier will help prevent configurations that violate your policies from being deployed.","title":"Shifting Left"},{"location":"security/docs/compliance/#policy-as-code","text":"Policy can be thought of as a set of rules for governing behaviors, i.e. behaviors that are allowed or those that are prohibited. For example, you may have a policy that says that all Dockerfiles should include a USER directive that causes the container to run as a non-root user. As a document, a policy like this can be hard to discover and enforce. It may also become outdated as your requirements change. With Policy as Code (PaC) solutions, you can automate security, compliance, and privacy controls that detect, prevent, reduce, and counteract known and persistent threats. Furthermore, they give you mechanism to codify your policies and manage them as you do other code artifacts. The benefit of this approach is that you can reuse your DevOps and GitOps strategies to manage and consistently apply policies across fleets of Kubernetes clusters. Please refer to Pod Security for information about PaC options and the future of PSPs.","title":"Policy as Code"},{"location":"security/docs/compliance/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/compliance/#use-open-policy-agent-opa-or-alcides-skan-to-detect-policy-violations-before-deployment","text":"OPA is open source policy engine that's part of CNCF. It's used for making policy decisions and can be run a variety of different ways, e.g. as a language library or a service. OPA policies are written in a Domain Specific Language (DSL) called Rego. While it is often run as part of a Kubernetes Dynamic Admission Controller, OPA can also be incorporated into your CI/CD pipeline. This allows developers to get feedback about their configuration earlier in the release cycle which can subsequently help them resolve issues before they get to production. A collection of common OPA policies can be found in the GitHub repository for this project. Conftest is built on top of OPA and it provides a developer focused experience for testing Kubernetes configuration. sKan is powered by OPA and is \"tailor made\" to check whether their Kubernetes configuration files are compliant with security and operational best practices.","title":"Use Open Policy Agent (OPA) or Alcide's sKan to detect policy violations before deployment"},{"location":"security/docs/compliance/#tools-and-resources","text":"kube-bench docker-bench-security actuary AWS Inspector Kubernetes Security Review A 3rd party security assessment of Kubernetes 1.13.4 (2019)","title":"Tools and resources"},{"location":"security/docs/data/","text":"Encryption at rest \u00b6 There are three different AWS-native storage options you can use with Kubernetes: EBS , EFS , and FSx for Lustre . All three offer encryption at rest using a service managed key or a customer master key (CMK). For EBS you can use the in-tree storage driver or the EBS CSI driver . Both include parameters for encrypting volumes and supplying a CMK. For EFS, you can use the EFS CSI driver , however, unlike EBS, the EFS CSI driver does not support dynamic provisioning. If you want to use EFS with EKS, you will need to provision and configure at-rest encryption for the file system prior to creating a PV. For further information about EFS file encryption, please refer to Encrypting Data at Rest . Besides offering at-rest encryption, EFS and FSx for Lustre include an option for encrypting data in transit. FSx for Luster does this by default. For EFS, you can add transport encryption by adding the tls parameter to mountOptions in your PV as in this example: apiVersion : v1 kind : PersistentVolume metadata : name : efs-pv spec : capacity : storage : 5Gi volumeMode : Filesystem accessModes : - ReadWriteOnce persistentVolumeReclaimPolicy : Retain storageClassName : efs-sc mountOptions : - tls csi : driver : efs.csi.aws.com volumeHandle : <file_system_id> The FSx CSI driver supports dynamic provisioning of Lustre file systems. It encrypts data with a service managed key by default, although there is an option to provide you own CMK as in this example: kind : StorageClass apiVersion : storage.k8s.io/v1 metadata : name : fsx-sc provisioner : fsx.csi.aws.com parameters : subnetId : subnet-056da83524edbe641 securityGroupIds : sg-086f61ea73388fb6b deploymentType : PERSISTENT_1 kmsKeyId : <kms_arn> Attention As of May 28, 2020 all data written to the ephemeral volume in EKS Fargate pods is encrypted by default using an industry-standard AES-256 cryptographic algorithm. No modifications to your application are necessary as encryption and decryption are handled seamlessly by the service. Recommendations \u00b6 Encrypt data at rest \u00b6 Encrypting data at rest is considered a best practice. If you're unsure whether encryption is necessary, encrypt your data. Rotate your CMKs periodically \u00b6 Configure KMS to automatically rotate you CMKs. This will rotate your keys once a year while saving old keys indefinitely so that your data can still be decrypted. For additional information see Rotating customer master keys Use EFS access points to simplify access to shared datasets \u00b6 If you have shared datasets with different POSIX file permissions or want to restrict access to part of the shared file system by creating different mount points, consider using EFS access points. To learn more about working with access points, see https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html . Today, if you want to use an access point (AP) you'll need to reference the AP in the PV's volumeHandle parameter. Attention As of March 23, 2021 the EFS CSI driver supports dynamic provisioning of EFS Access Points. Access points are application-specific entry points into an EFS file system that make it easier to share a file system between multiple pods. Each EFS file system can have up to 120 PVs. See Introducing Amazon EFS CSI dynamic provisioning for additional information. Secrets management \u00b6 Kubernetes secrets are used to store sensitive information, such as user certificates, passwords, or API keys. They are persisted in etcd as base64 encoded strings. On EKS, the EBS volumes for etcd nodes are encypted with EBS encryption . A pod can retrieve a Kubernetes secrets objects by referencing the secret in the podSpec . These secrets can either be mapped to an environment variable or mounted as volume. For additional information on creating secrets, see https://kubernetes.io/docs/concepts/configuration/secret/ . Caution Secrets in a particular namespace can be referenced by all pods in the secret's namespace. Caution The node authorizer allows the Kubelet to read all of the secrets mounted to the node. Recommendations \u00b6 Use AWS KMS for envelope encryption of Kubernetes secrets \u00b6 This allows you to encrypt your secrets with a unique data encryption key (DEK). The DEK is then encypted using a key encryption key (KEK) from AWS KMS which can be automatically rotated on a recurring schedule. With the KMS plugin for Kubernetes, all Kubernetes secrets are stored in etcd in ciphertext instead of plain text and can only be decrypted by the Kubernetes API server. For additional details, see using EKS encryption provider support for defense in depth Audit the use of Kubernetes Secrets \u00b6 On EKS, turn on audit logging and create a CloudWatch metrics filter and alarm to alert you when a secret is used (optional). The following is an example of a metrics filter for the Kubernetes audit log, {($.verb=\"get\") && ($.objectRef.resource=\"secret\")} . You can also use the following queries with CloudWatch Log Insights: fields @timestamp , @message | sort @timestamp desc | limit 100 | stats count ( * ) by objectRef . name as secret | filter verb = \"get\" and objectRef . resource = \"secrets\" The above query will display the number of times a secret has been accessed within a specific timeframe. fields @timestamp , @message | sort @timestamp desc | limit 100 | filter verb = \"get\" and objectRef . resource = \"secrets\" | display objectRef . namespace , objectRef . name , user . username , responseStatus . code This query will display the secret, along with the namespace and username of the user who attempted to access the secret and the response code. Rotate your secrets periodically \u00b6 Kubernetes doesn't automatically rotate secrets. If you have to rotate secrets, consider using an external secret store, e.g. Vault or AWS Secrets Manager. Use separate namespaces as a way to isolate secrets from different applications \u00b6 If you have secrets that cannot be shared between applications in a namespace, create a separate namespace for those applications. Use volume mounts instead of environment variables \u00b6 The values of environment variables can unintentionally appear in logs. Secrets mounted as volumes are instantiated as tmpfs volumes (a RAM backed file system) that are automatically removed from the node when the pod is deleted. Use an external secrets provider \u00b6 There are several viable alternatives to using Kubernetes secrets, including AWS Secrets Manager and Hashicorp's Vault . These services offer features such as fine grained access controls, strong encryption, and automatic rotation of secrets that are not available with Kubernetes Secrets. Bitnami's Sealed Secrets is another approach that uses asymetric encryption to create \"sealed secrets\". A public key is used to encrypt the secret while the private key used to decrypt the secret is kept within the cluster, allowing you to safely to store sealed secrets in source control systems like Git. See Managing secrets deployment in Kubernetes using Sealed Secrets for further information. As the use of external secrets stores has grown, so has need for integrating them with Kubernetes. The Secret Store CSI Driver is a community project that uses the CSI driver model to fetch secrets from external secret stores. Currently, the Driver has support for AWS Secrets Manager , Azure, Vault, and GCP. The AWS provider supports both AWS Secrets Manager and AWS Parameter Store. It can also be configured to rotate secrets when they expire and can synchronize AWS Secrets Manager secrets to Kubernetes Secrets. Synchronization of secrets can be useful when you need to reference a secret as an environment variable instead of reading them from a volume. Note When the the secret store CSI driver has to fetch a secret, it assumes the IRSA role assigned to the pod that refereces a secret. The code for this operation can be found here . For additional information about the AWS Secrets & Configuration Provider (ASCP) refer to the following resources: How to use AWS Secrets Configuration Provider with Kubernetes Secret Store CSI Driver Integrating Secrets Manager secrets with Kubernetes Secrets Store CSI Driver external-secrets is yet another way to use an external secret store with Kubernetes. Like the CSI Driver, external-secrets works works against a variety of different backends, including AWS Secrets Manager. The difference is, rather than retrieving secrets from the external secret store, external-secrets copies secrets from these backends to Kubernetes as Secrets. This let's you manage secrets using your preferred secret store and interact with secrets in a Kubernetes-native way.","title":"Data Encryption and Secrets Management"},{"location":"security/docs/data/#encryption-at-rest","text":"There are three different AWS-native storage options you can use with Kubernetes: EBS , EFS , and FSx for Lustre . All three offer encryption at rest using a service managed key or a customer master key (CMK). For EBS you can use the in-tree storage driver or the EBS CSI driver . Both include parameters for encrypting volumes and supplying a CMK. For EFS, you can use the EFS CSI driver , however, unlike EBS, the EFS CSI driver does not support dynamic provisioning. If you want to use EFS with EKS, you will need to provision and configure at-rest encryption for the file system prior to creating a PV. For further information about EFS file encryption, please refer to Encrypting Data at Rest . Besides offering at-rest encryption, EFS and FSx for Lustre include an option for encrypting data in transit. FSx for Luster does this by default. For EFS, you can add transport encryption by adding the tls parameter to mountOptions in your PV as in this example: apiVersion : v1 kind : PersistentVolume metadata : name : efs-pv spec : capacity : storage : 5Gi volumeMode : Filesystem accessModes : - ReadWriteOnce persistentVolumeReclaimPolicy : Retain storageClassName : efs-sc mountOptions : - tls csi : driver : efs.csi.aws.com volumeHandle : <file_system_id> The FSx CSI driver supports dynamic provisioning of Lustre file systems. It encrypts data with a service managed key by default, although there is an option to provide you own CMK as in this example: kind : StorageClass apiVersion : storage.k8s.io/v1 metadata : name : fsx-sc provisioner : fsx.csi.aws.com parameters : subnetId : subnet-056da83524edbe641 securityGroupIds : sg-086f61ea73388fb6b deploymentType : PERSISTENT_1 kmsKeyId : <kms_arn> Attention As of May 28, 2020 all data written to the ephemeral volume in EKS Fargate pods is encrypted by default using an industry-standard AES-256 cryptographic algorithm. No modifications to your application are necessary as encryption and decryption are handled seamlessly by the service.","title":"Encryption at rest"},{"location":"security/docs/data/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/data/#encrypt-data-at-rest","text":"Encrypting data at rest is considered a best practice. If you're unsure whether encryption is necessary, encrypt your data.","title":"Encrypt data at rest"},{"location":"security/docs/data/#rotate-your-cmks-periodically","text":"Configure KMS to automatically rotate you CMKs. This will rotate your keys once a year while saving old keys indefinitely so that your data can still be decrypted. For additional information see Rotating customer master keys","title":"Rotate your CMKs periodically"},{"location":"security/docs/data/#use-efs-access-points-to-simplify-access-to-shared-datasets","text":"If you have shared datasets with different POSIX file permissions or want to restrict access to part of the shared file system by creating different mount points, consider using EFS access points. To learn more about working with access points, see https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html . Today, if you want to use an access point (AP) you'll need to reference the AP in the PV's volumeHandle parameter. Attention As of March 23, 2021 the EFS CSI driver supports dynamic provisioning of EFS Access Points. Access points are application-specific entry points into an EFS file system that make it easier to share a file system between multiple pods. Each EFS file system can have up to 120 PVs. See Introducing Amazon EFS CSI dynamic provisioning for additional information.","title":"Use EFS access points to simplify access to shared datasets"},{"location":"security/docs/data/#secrets-management","text":"Kubernetes secrets are used to store sensitive information, such as user certificates, passwords, or API keys. They are persisted in etcd as base64 encoded strings. On EKS, the EBS volumes for etcd nodes are encypted with EBS encryption . A pod can retrieve a Kubernetes secrets objects by referencing the secret in the podSpec . These secrets can either be mapped to an environment variable or mounted as volume. For additional information on creating secrets, see https://kubernetes.io/docs/concepts/configuration/secret/ . Caution Secrets in a particular namespace can be referenced by all pods in the secret's namespace. Caution The node authorizer allows the Kubelet to read all of the secrets mounted to the node.","title":"Secrets management"},{"location":"security/docs/data/#recommendations_1","text":"","title":"Recommendations"},{"location":"security/docs/data/#use-aws-kms-for-envelope-encryption-of-kubernetes-secrets","text":"This allows you to encrypt your secrets with a unique data encryption key (DEK). The DEK is then encypted using a key encryption key (KEK) from AWS KMS which can be automatically rotated on a recurring schedule. With the KMS plugin for Kubernetes, all Kubernetes secrets are stored in etcd in ciphertext instead of plain text and can only be decrypted by the Kubernetes API server. For additional details, see using EKS encryption provider support for defense in depth","title":"Use AWS KMS for envelope encryption of Kubernetes secrets"},{"location":"security/docs/data/#audit-the-use-of-kubernetes-secrets","text":"On EKS, turn on audit logging and create a CloudWatch metrics filter and alarm to alert you when a secret is used (optional). The following is an example of a metrics filter for the Kubernetes audit log, {($.verb=\"get\") && ($.objectRef.resource=\"secret\")} . You can also use the following queries with CloudWatch Log Insights: fields @timestamp , @message | sort @timestamp desc | limit 100 | stats count ( * ) by objectRef . name as secret | filter verb = \"get\" and objectRef . resource = \"secrets\" The above query will display the number of times a secret has been accessed within a specific timeframe. fields @timestamp , @message | sort @timestamp desc | limit 100 | filter verb = \"get\" and objectRef . resource = \"secrets\" | display objectRef . namespace , objectRef . name , user . username , responseStatus . code This query will display the secret, along with the namespace and username of the user who attempted to access the secret and the response code.","title":"Audit the use of Kubernetes Secrets"},{"location":"security/docs/data/#rotate-your-secrets-periodically","text":"Kubernetes doesn't automatically rotate secrets. If you have to rotate secrets, consider using an external secret store, e.g. Vault or AWS Secrets Manager.","title":"Rotate your secrets periodically"},{"location":"security/docs/data/#use-separate-namespaces-as-a-way-to-isolate-secrets-from-different-applications","text":"If you have secrets that cannot be shared between applications in a namespace, create a separate namespace for those applications.","title":"Use separate namespaces as a way to isolate secrets from different applications"},{"location":"security/docs/data/#use-volume-mounts-instead-of-environment-variables","text":"The values of environment variables can unintentionally appear in logs. Secrets mounted as volumes are instantiated as tmpfs volumes (a RAM backed file system) that are automatically removed from the node when the pod is deleted.","title":"Use volume mounts instead of environment variables"},{"location":"security/docs/data/#use-an-external-secrets-provider","text":"There are several viable alternatives to using Kubernetes secrets, including AWS Secrets Manager and Hashicorp's Vault . These services offer features such as fine grained access controls, strong encryption, and automatic rotation of secrets that are not available with Kubernetes Secrets. Bitnami's Sealed Secrets is another approach that uses asymetric encryption to create \"sealed secrets\". A public key is used to encrypt the secret while the private key used to decrypt the secret is kept within the cluster, allowing you to safely to store sealed secrets in source control systems like Git. See Managing secrets deployment in Kubernetes using Sealed Secrets for further information. As the use of external secrets stores has grown, so has need for integrating them with Kubernetes. The Secret Store CSI Driver is a community project that uses the CSI driver model to fetch secrets from external secret stores. Currently, the Driver has support for AWS Secrets Manager , Azure, Vault, and GCP. The AWS provider supports both AWS Secrets Manager and AWS Parameter Store. It can also be configured to rotate secrets when they expire and can synchronize AWS Secrets Manager secrets to Kubernetes Secrets. Synchronization of secrets can be useful when you need to reference a secret as an environment variable instead of reading them from a volume. Note When the the secret store CSI driver has to fetch a secret, it assumes the IRSA role assigned to the pod that refereces a secret. The code for this operation can be found here . For additional information about the AWS Secrets & Configuration Provider (ASCP) refer to the following resources: How to use AWS Secrets Configuration Provider with Kubernetes Secret Store CSI Driver Integrating Secrets Manager secrets with Kubernetes Secrets Store CSI Driver external-secrets is yet another way to use an external secret store with Kubernetes. Like the CSI Driver, external-secrets works works against a variety of different backends, including AWS Secrets Manager. The difference is, rather than retrieving secrets from the external secret store, external-secrets copies secrets from these backends to Kubernetes as Secrets. This let's you manage secrets using your preferred secret store and interact with secrets in a Kubernetes-native way.","title":"Use an external secrets provider"},{"location":"security/docs/detective/","text":"Auditing and logging \u00b6 Collecting and analyzing [audit] logs is useful for a variety of different reasons. Logs can help with root cause analysis and attribution, i.e. ascribing a change to a particular user. When enough logs have been collected, they can be used to detect anomalous behaviors too. On EKS, the audit logs are sent to Amazon Cloudwatch Logs. The audit policy for EKS currently augments the reference policy in the helper script with the following policy: - level : RequestResponse namespaces : [ \"kube-system\" ] verbs : [ \"update\" , \"patch\" , \"delete\" ] resources : - group : \"\" # core resources : [ \"configmaps\" ] resourceNames : [ \"aws-auth\" ] omitStages : - \"RequestReceived\" This logs changes to the aws-auth ConfigMap which is used to grant access to an EKS cluster. Recommendations \u00b6 Enable audit logs \u00b6 The audit logs are part of the EKS managed Kubernetes control plane logs that are managed by EKS. Instructions for enabling/disabling the control plane logs, which includes the logs for the Kubernetes API server, the controller manager, and the scheduler, along with the audit log, can be found here, https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html#enabling-control-plane-log-export . Info When you enable control plane logging, you will incur costs for storing the logs in CloudWatch. This raises a broader issue about the ongoing cost of security. Ultimately you will have to weigh those costs against the cost of a security breach, e.g. financial loss, damage to your reputation, etc. You may find that you can adequately secure your environment by implementing only some of the recommendations in this guide. Warning The maximum size for a CWL entry is 256KB whereas the maximum Kubernetes API request size is 1.5MiB. This is important know because an attacker could theoretically obfuscate their activity by creating a request that is too large for CWL to handle. This can be done by padding the annotations field of a request with a large amount of junk data, which hides all data after the annotation. Utilize audit metadata \u00b6 Kubernetes audit logs include two annotations that indicate whether or not a request was authorized authorization.k8s.io/decision and the reason for the decision authorization.k8s.io/reason . Use these attributes to ascertain why a particular API call was allowed. Create alarms for suspicious events \u00b6 Create an alarm to automatically alert you where there is an increase in 403 Forbidden and 401 Unauthorized responses, and then use attributes like host , sourceIPs , and k8s_user.username to find out where those requests are coming from. Analyze logs with Log Insights \u00b6 Use CloudWatch Log Insights to monitor changes to RBAC objects, e.g. Roles, RoleBindings, ClusterRoles, and ClusterRoleBindings. A few sample queries appear below: Lists updates to the aws-auth ConfigMap: fields @timestamp , @message | filter @logStream like \"kube-apiserver-audit\" | filter verb in [ \"update\", \"patch\" ] | filter objectRef . resource = \"configmaps\" and objectRef . name = \"aws-auth\" and objectRef . namespace = \"kube-system\" | sort @timestamp desc Lists creation of new or changes to validation webhooks: fields @timestamp , @message | filter @logStream like \"kube-apiserver-audit\" | filter verb in [ \"create\", \"update\", \"patch\" ] and responseStatus . code = 201 | filter objectRef . resource = \"validatingwebhookconfigurations\" | sort @timestamp desc Lists create, update, delete operations to Roles: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"roles\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Lists create, update, delete operations to RoleBindings: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"rolebindings\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Lists create, update, delete operations to ClusterRoles: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"clusterroles\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Lists create, update, delete operations to ClusterRoleBindings: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"clusterrolebindings\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Plots unauthorized read operations against Secrets: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"secrets\" and verb in [ \"get\", \"watch\", \"list\" ] and responseStatus . code = \"401\" | count () by bin ( 1 m ) List of failed anonymous requests: fields @timestamp , @message , sourceIPs .0 | sort @timestamp desc | limit 100 | filter user . username = \"system:anonymous\" and responseStatus . code in [ \"401\", \"403\" ] Audit your CloudTrail logs \u00b6 AWS APIs called by pods that are utilizing IAM Roles for Service Accounts (IRSA) are automatically logged to CloudTrail along with the name of the service account. If the name of a service account that wasn't explicitly authorized to call an API appears in the log, it may be an indication that the IAM role's trust policy was misconfigured. Generally speaking, Cloudtrail is a great way to ascribe AWS API calls to specific IAM principals. Use CloudTrail Insights to unearth suspicious activity \u00b6 CloudTrail insights automaticatlly analyzes write management events from CloudTrail trails and alerts you of unusual activity. This can help you identify when there's an increase in call volume on write APIs in your AWS account, including from pods that use IRSA to assume an IAM role. See Announcing CloudTrail Insights: Identify and Response to Unusual API Activity for further information. Additional resources \u00b6 As the volume of logs increases, parsing and filtering them with Log Insights or another log analysis tool may become ineffective. As an alternative, you might want to consider running Sysdig Falco and ekscloudwatch . Falco analyzes audit logs and flags anomalies or abuse over an extended period of time. The ekscloudwatch project forwards audit log events from CloudWatch to Falco for analysis. Falco provides a set of default audit rules along with the ability to add your own. Yet another option might be to store the audit logs in S3 and use the SageMaker Random Cut Forest algorithm to anomalous behaviors that warrant further investigation. Tooling \u00b6 The following commercial and open source projects can be used to assess your cluster's alignment with established best practices: kubeaudit MKIT kube-scan Assigns a risk score to the workloads running in your cluster in accordance with the Kubernetes Common Configuration Scoring System framework amicontained Reveals which Capabilities are allowed and syscalls that are blocked by the container runtime kubesec.io polaris Starboard kAudit Snyk","title":"Detective Controls"},{"location":"security/docs/detective/#auditing-and-logging","text":"Collecting and analyzing [audit] logs is useful for a variety of different reasons. Logs can help with root cause analysis and attribution, i.e. ascribing a change to a particular user. When enough logs have been collected, they can be used to detect anomalous behaviors too. On EKS, the audit logs are sent to Amazon Cloudwatch Logs. The audit policy for EKS currently augments the reference policy in the helper script with the following policy: - level : RequestResponse namespaces : [ \"kube-system\" ] verbs : [ \"update\" , \"patch\" , \"delete\" ] resources : - group : \"\" # core resources : [ \"configmaps\" ] resourceNames : [ \"aws-auth\" ] omitStages : - \"RequestReceived\" This logs changes to the aws-auth ConfigMap which is used to grant access to an EKS cluster.","title":"Auditing and logging"},{"location":"security/docs/detective/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/detective/#enable-audit-logs","text":"The audit logs are part of the EKS managed Kubernetes control plane logs that are managed by EKS. Instructions for enabling/disabling the control plane logs, which includes the logs for the Kubernetes API server, the controller manager, and the scheduler, along with the audit log, can be found here, https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html#enabling-control-plane-log-export . Info When you enable control plane logging, you will incur costs for storing the logs in CloudWatch. This raises a broader issue about the ongoing cost of security. Ultimately you will have to weigh those costs against the cost of a security breach, e.g. financial loss, damage to your reputation, etc. You may find that you can adequately secure your environment by implementing only some of the recommendations in this guide. Warning The maximum size for a CWL entry is 256KB whereas the maximum Kubernetes API request size is 1.5MiB. This is important know because an attacker could theoretically obfuscate their activity by creating a request that is too large for CWL to handle. This can be done by padding the annotations field of a request with a large amount of junk data, which hides all data after the annotation.","title":"Enable audit logs"},{"location":"security/docs/detective/#utilize-audit-metadata","text":"Kubernetes audit logs include two annotations that indicate whether or not a request was authorized authorization.k8s.io/decision and the reason for the decision authorization.k8s.io/reason . Use these attributes to ascertain why a particular API call was allowed.","title":"Utilize audit metadata"},{"location":"security/docs/detective/#create-alarms-for-suspicious-events","text":"Create an alarm to automatically alert you where there is an increase in 403 Forbidden and 401 Unauthorized responses, and then use attributes like host , sourceIPs , and k8s_user.username to find out where those requests are coming from.","title":"Create alarms for suspicious events"},{"location":"security/docs/detective/#analyze-logs-with-log-insights","text":"Use CloudWatch Log Insights to monitor changes to RBAC objects, e.g. Roles, RoleBindings, ClusterRoles, and ClusterRoleBindings. A few sample queries appear below: Lists updates to the aws-auth ConfigMap: fields @timestamp , @message | filter @logStream like \"kube-apiserver-audit\" | filter verb in [ \"update\", \"patch\" ] | filter objectRef . resource = \"configmaps\" and objectRef . name = \"aws-auth\" and objectRef . namespace = \"kube-system\" | sort @timestamp desc Lists creation of new or changes to validation webhooks: fields @timestamp , @message | filter @logStream like \"kube-apiserver-audit\" | filter verb in [ \"create\", \"update\", \"patch\" ] and responseStatus . code = 201 | filter objectRef . resource = \"validatingwebhookconfigurations\" | sort @timestamp desc Lists create, update, delete operations to Roles: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"roles\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Lists create, update, delete operations to RoleBindings: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"rolebindings\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Lists create, update, delete operations to ClusterRoles: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"clusterroles\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Lists create, update, delete operations to ClusterRoleBindings: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"clusterrolebindings\" and verb in [ \"create\", \"update\", \"patch\", \"delete\" ] Plots unauthorized read operations against Secrets: fields @timestamp , @message | sort @timestamp desc | limit 100 | filter objectRef . resource = \"secrets\" and verb in [ \"get\", \"watch\", \"list\" ] and responseStatus . code = \"401\" | count () by bin ( 1 m ) List of failed anonymous requests: fields @timestamp , @message , sourceIPs .0 | sort @timestamp desc | limit 100 | filter user . username = \"system:anonymous\" and responseStatus . code in [ \"401\", \"403\" ]","title":"Analyze logs with Log Insights"},{"location":"security/docs/detective/#audit-your-cloudtrail-logs","text":"AWS APIs called by pods that are utilizing IAM Roles for Service Accounts (IRSA) are automatically logged to CloudTrail along with the name of the service account. If the name of a service account that wasn't explicitly authorized to call an API appears in the log, it may be an indication that the IAM role's trust policy was misconfigured. Generally speaking, Cloudtrail is a great way to ascribe AWS API calls to specific IAM principals.","title":"Audit your CloudTrail logs"},{"location":"security/docs/detective/#use-cloudtrail-insights-to-unearth-suspicious-activity","text":"CloudTrail insights automaticatlly analyzes write management events from CloudTrail trails and alerts you of unusual activity. This can help you identify when there's an increase in call volume on write APIs in your AWS account, including from pods that use IRSA to assume an IAM role. See Announcing CloudTrail Insights: Identify and Response to Unusual API Activity for further information.","title":"Use CloudTrail Insights to unearth suspicious activity"},{"location":"security/docs/detective/#additional-resources","text":"As the volume of logs increases, parsing and filtering them with Log Insights or another log analysis tool may become ineffective. As an alternative, you might want to consider running Sysdig Falco and ekscloudwatch . Falco analyzes audit logs and flags anomalies or abuse over an extended period of time. The ekscloudwatch project forwards audit log events from CloudWatch to Falco for analysis. Falco provides a set of default audit rules along with the ability to add your own. Yet another option might be to store the audit logs in S3 and use the SageMaker Random Cut Forest algorithm to anomalous behaviors that warrant further investigation.","title":"Additional resources"},{"location":"security/docs/detective/#tooling","text":"The following commercial and open source projects can be used to assess your cluster's alignment with established best practices: kubeaudit MKIT kube-scan Assigns a risk score to the workloads running in your cluster in accordance with the Kubernetes Common Configuration Scoring System framework amicontained Reveals which Capabilities are allowed and syscalls that are blocked by the container runtime kubesec.io polaris Starboard kAudit Snyk","title":"Tooling"},{"location":"security/docs/hosts/","text":"Protecting the infrastructure (hosts) \u00b6 Inasmuch as it's important to secure your container images, it's equally important to safeguard the infrastructure that runs them. This section explores different ways to mitigate risks from attacks launched directly against the host. These guidelines should be used in conjunction with those outlined in the Runtime Security section. Recommendations \u00b6 Use an OS optimized for running containers \u00b6 Consider using Flatcar Linux, Project Atomic, RancherOS, and Bottlerocket , a special purpose OS from AWS designed for running Linux containers. It includes a reduced attack surface, a disk image that is verified on boot, and enforced permission boundaries using SELinux. Treat your infrastructure as immutable and automate the replacement of your worker nodes \u00b6 Rather than performing in-place upgrades, replace your workers when a new patch or update becomes available. This can be approached a couple of ways. You can either add instances to an existing autoscaling group using the latest AMI as you sequentially cordon and drain nodes until all of the nodes in the group have been replaced with the latest AMI. Alternatively, you can add instances to a new node group while you sequentially cordon and drain nodes from the old node group until all of the nodes have been replaced. EKS managed node groups uses the first approach and will display a message in the console to upgrade your workers when a new AMI becomes available. eksctl also has a mechanism for creating node groups with the latest AMI and for gracefully cordoning and draining pods from nodes groups before the instances are terminated. If you decide to use a different method for replacing your worker nodes, it is strongly recommended that you automate the process to minimize human oversight as you will likely need to replace workers regularly as new updates/patches are released and when the control plane is upgraded. With EKS Fargate, AWS will automatically update the underlying infrastructure as updates become available. Oftentimes this can be done seamlessly, but there may be times when an update will cause your pod to be rescheduled. Hence, we recommend that you create deployments with multiple replicas when running your application as a Fargate pod. Periodically run kube-bench to verify compliance with CIS benchmarks for Kubernetes \u00b6 kube-bench is an open source project from Aqua that evaluates your cluster against the CIS benchmarks for Kubernetes. The benchmark describes the best practices for securing unmanaged Kubernetes clusters. The CIS Kubernetes Benchmark encompasses the control plane and the data plane. Since Amazon EKS provides a fully managed control plane, not all of the recommendations from the CIS Kubernetes Benchmark are applicable. To ensure this scope reflects how Amazon EKS is implemented, AWS created the CIS Amazon EKS Benchmark . The EKS benchmark inherits from CIS Kubernetes Benchmark with additional inputs from the community with specific configuration considerations for EKS clusters. When running kube-bench against an EKS cluster, follow these instructions from Aqua Security, https://github.com/aquasecurity/kube-bench#running-in-an-eks-cluster . For further information see Introducing The CIS Amazon EKS Benchmark . Minimize access to worker nodes \u00b6 Instead of enabling SSH access, use SSM Session Manager when you need to remote into a host. Unlike SSH keys which can be lost, copied, or shared, Session Manager allows you to control access to EC2 instances using IAM. Moreover, it provides an audit trail and log of the commands that were run on the instance. As of August 19th, 2020 Managed Node Groups support custom AMIs and EC2 Launch Templates. This allows you to embed the SSM agent into the AMI or install it as the worker node is being bootstrapped. If you rather not modify the Optimized AMI or the ASG's launch template, you can install the SSM agent with a DaemonSet as in this example, https://github.com/aws-samples/ssm-agent-daemonset-installer. Deploy workers onto private subnets \u00b6 By deploying workers onto private subnets, you minimize their exposure to the Internet where attacks often originate. Beginning April 22, 2020, the assignment of public IP addresses to nodes in a managed node groups will be controlled by the subnet they are deployed onto. Prior to this, nodes in a Managed Node Group were automatically assigned a public IP. If you choose to deploy your worker nodes on to public subnets, implement restrictive AWS security group rules to limit their exposure. Run Amazon Inspector to assess hosts for exposure, vulnerabilities, and deviations from best practices \u00b6 Inspector requires the deployment of an agent that continually monitors activity on the instance while using a set of rules to assess alignment with best practices. Attention Inspector cannot be run on the infrastructure used to run Fargate pods. Alternatives \u00b6 Run SELinux \u00b6 Info Available on Red Hat Enterprise Linux (RHEL), CentOS, and CoreOS SELinux provides an additional layer of security to keep containers isolated from each other and from the host. SELinux allows administrators to enforce mandatory access controls (MAC) for every user, application, process, and file. Think of it as a backstop that restricts the operations that can be performed against to specific resources based on a set of labels. On EKS, SELinux can be used to prevent containers from accessing each other's resources. Container SELinux policies are defined in the container-selinux package. Docker CE requires this package (along with its dependencies) so that the processes and files created by Docker (or other container runtimes) run with limited system access. Containers leverage the container_t label which is an alias to svirt_lxc_net_t . These policies effectively prevent containers from accessing certain features of the host. When you configure SELinux for Docker, Docker automatically labels workloads container_t as a type and gives each container a unique MCS level. This will isolate containers from one another. If you need looser restrictions, you can create your own profile in SElinux which grants a container permissions to specific areas of the file system. This is similiar to PSPs in that you can create different profiles for different containers/pods. For example, you can have a profile for general workloads with a set of restrictive controls and another for things that require privileged access. SELinux for Containers has a set of options that can be configured to modify the default restrictions. The following SELinux Booleans can be enabled or disabled based on your needs: Boolean Default Description container_connect_any off Allow containers to access privileged ports on the host. For example, if you have a container that needs to map ports to 443 or 80 on the host. container_manage_cgroup off Allow containers to manage cgroup configuration. For example, a container running systemd will need this to be enabled. container_use_cephfs off Allow containers to use a ceph file system. By default, containers are allowed to read/execute under /usr and read most content from /etc . The files under /var/lib/docker and /var/lib/containers have the label container_var_lib_t . To view a full list of default, labels see the container.fc file. docker container run -it \\ -v /var/lib/docker/image/overlay2/repositories.json:/host/repositories.json \\ centos:7 cat /host/repositories.json # cat: /host/repositories.json: Permission denied docker container run -it \\ -v /etc/passwd:/host/etc/passwd \\ centos:7 cat /host/etc/passwd # cat: /host/etc/passwd: Permission denied Files labeled with container_file_t are the only files that are writable by containers. If you want a volume mount to be writeable, you will needed to specify :z or :Z at the end. :z will re-label the files so that the container can read/write :Z will re-label the files so that only the container can read/write ls -Z /var/lib/misc # -rw-r--r--. root root system_u:object_r:var_lib_t:s0 postfix.aliasesdb-stamp docker container run -it \\ -v /var/lib/misc:/host/var/lib/misc:z \\ centos:7 echo \"Relabeled!\" ls -Z /var/lib/misc #-rw-r--r--. root root system_u:object_r:container_file_t:s0 postfix.aliasesdb-stamp docker container run -it \\ -v /var/log:/host/var/log:Z \\ fluentbit:latest In Kubernetes, relabeling is slightly different. Rather than having Docker automatically relabel the files, you can specify a custom MCS label to run the pod. Volumes that support relabeling will automatically be relabeled so that they are accessible. Pods with a matching MCS label will be able to access the volume. If you need strict isolation, set a different MCS label for each pod. securityContext : seLinuxOptions : # Provide a unique MCS label per container # You can specify user, role, and type also # enforcement based on type and level (svert) level : s0:c144:c154 In this example s0:c144:c154 corresponds to an MCS label assigned to a file that the container is allowed to access. On EKS you could create policies that allow for privileged containers to run, like FluentD and create an SELinux policy to allow it to read from /var/log on the host without needing to relabel the host directory. Pods with the same label will be able to access the same host volumes. We have implemented sample AMIs for Amazon EKS that have SELinux configured on CentOS 7 and RHEL 7. These AMIs were developed to demonstrate sample implementations that meet requirements of highly regulated customers, such as STIG, CJIS, and C2S. Caution SELinux will ignore containers where the type is unconfined. Additional resources \u00b6 SELinux Kubernetes RBAC and Shipping Security Policies for On-prem Applications Iterative Hardening of Kubernetes Audit2Allow SEAlert Generate SELinux policies for containers with Udica describes a tool that looks at container spec files for Linux capabilities, ports, and mount points, and generates a set of SELinux rules that allow the container to run properly AMI Hardening playbooks for hardening the OS to meet different regulatory requirements Tools \u00b6 Keiko Upgrade Manager an open source project from Intuit that orchestrates the rotation of worker nodes. Sysdig Secure eksctl","title":"Infrastructure Security"},{"location":"security/docs/hosts/#protecting-the-infrastructure-hosts","text":"Inasmuch as it's important to secure your container images, it's equally important to safeguard the infrastructure that runs them. This section explores different ways to mitigate risks from attacks launched directly against the host. These guidelines should be used in conjunction with those outlined in the Runtime Security section.","title":"Protecting the infrastructure (hosts)"},{"location":"security/docs/hosts/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/hosts/#use-an-os-optimized-for-running-containers","text":"Consider using Flatcar Linux, Project Atomic, RancherOS, and Bottlerocket , a special purpose OS from AWS designed for running Linux containers. It includes a reduced attack surface, a disk image that is verified on boot, and enforced permission boundaries using SELinux.","title":"Use an OS optimized for running containers"},{"location":"security/docs/hosts/#treat-your-infrastructure-as-immutable-and-automate-the-replacement-of-your-worker-nodes","text":"Rather than performing in-place upgrades, replace your workers when a new patch or update becomes available. This can be approached a couple of ways. You can either add instances to an existing autoscaling group using the latest AMI as you sequentially cordon and drain nodes until all of the nodes in the group have been replaced with the latest AMI. Alternatively, you can add instances to a new node group while you sequentially cordon and drain nodes from the old node group until all of the nodes have been replaced. EKS managed node groups uses the first approach and will display a message in the console to upgrade your workers when a new AMI becomes available. eksctl also has a mechanism for creating node groups with the latest AMI and for gracefully cordoning and draining pods from nodes groups before the instances are terminated. If you decide to use a different method for replacing your worker nodes, it is strongly recommended that you automate the process to minimize human oversight as you will likely need to replace workers regularly as new updates/patches are released and when the control plane is upgraded. With EKS Fargate, AWS will automatically update the underlying infrastructure as updates become available. Oftentimes this can be done seamlessly, but there may be times when an update will cause your pod to be rescheduled. Hence, we recommend that you create deployments with multiple replicas when running your application as a Fargate pod.","title":"Treat your infrastructure as immutable and automate the replacement of your worker nodes"},{"location":"security/docs/hosts/#periodically-run-kube-bench-to-verify-compliance-with-cis-benchmarks-for-kubernetes","text":"kube-bench is an open source project from Aqua that evaluates your cluster against the CIS benchmarks for Kubernetes. The benchmark describes the best practices for securing unmanaged Kubernetes clusters. The CIS Kubernetes Benchmark encompasses the control plane and the data plane. Since Amazon EKS provides a fully managed control plane, not all of the recommendations from the CIS Kubernetes Benchmark are applicable. To ensure this scope reflects how Amazon EKS is implemented, AWS created the CIS Amazon EKS Benchmark . The EKS benchmark inherits from CIS Kubernetes Benchmark with additional inputs from the community with specific configuration considerations for EKS clusters. When running kube-bench against an EKS cluster, follow these instructions from Aqua Security, https://github.com/aquasecurity/kube-bench#running-in-an-eks-cluster . For further information see Introducing The CIS Amazon EKS Benchmark .","title":"Periodically run kube-bench to verify compliance with CIS benchmarks for Kubernetes"},{"location":"security/docs/hosts/#minimize-access-to-worker-nodes","text":"Instead of enabling SSH access, use SSM Session Manager when you need to remote into a host. Unlike SSH keys which can be lost, copied, or shared, Session Manager allows you to control access to EC2 instances using IAM. Moreover, it provides an audit trail and log of the commands that were run on the instance. As of August 19th, 2020 Managed Node Groups support custom AMIs and EC2 Launch Templates. This allows you to embed the SSM agent into the AMI or install it as the worker node is being bootstrapped. If you rather not modify the Optimized AMI or the ASG's launch template, you can install the SSM agent with a DaemonSet as in this example, https://github.com/aws-samples/ssm-agent-daemonset-installer.","title":"Minimize access to worker nodes"},{"location":"security/docs/hosts/#deploy-workers-onto-private-subnets","text":"By deploying workers onto private subnets, you minimize their exposure to the Internet where attacks often originate. Beginning April 22, 2020, the assignment of public IP addresses to nodes in a managed node groups will be controlled by the subnet they are deployed onto. Prior to this, nodes in a Managed Node Group were automatically assigned a public IP. If you choose to deploy your worker nodes on to public subnets, implement restrictive AWS security group rules to limit their exposure.","title":"Deploy workers onto private subnets"},{"location":"security/docs/hosts/#run-amazon-inspector-to-assess-hosts-for-exposure-vulnerabilities-and-deviations-from-best-practices","text":"Inspector requires the deployment of an agent that continually monitors activity on the instance while using a set of rules to assess alignment with best practices. Attention Inspector cannot be run on the infrastructure used to run Fargate pods.","title":"Run Amazon Inspector to assess hosts for exposure, vulnerabilities, and deviations from best practices"},{"location":"security/docs/hosts/#alternatives","text":"","title":"Alternatives"},{"location":"security/docs/hosts/#run-selinux","text":"Info Available on Red Hat Enterprise Linux (RHEL), CentOS, and CoreOS SELinux provides an additional layer of security to keep containers isolated from each other and from the host. SELinux allows administrators to enforce mandatory access controls (MAC) for every user, application, process, and file. Think of it as a backstop that restricts the operations that can be performed against to specific resources based on a set of labels. On EKS, SELinux can be used to prevent containers from accessing each other's resources. Container SELinux policies are defined in the container-selinux package. Docker CE requires this package (along with its dependencies) so that the processes and files created by Docker (or other container runtimes) run with limited system access. Containers leverage the container_t label which is an alias to svirt_lxc_net_t . These policies effectively prevent containers from accessing certain features of the host. When you configure SELinux for Docker, Docker automatically labels workloads container_t as a type and gives each container a unique MCS level. This will isolate containers from one another. If you need looser restrictions, you can create your own profile in SElinux which grants a container permissions to specific areas of the file system. This is similiar to PSPs in that you can create different profiles for different containers/pods. For example, you can have a profile for general workloads with a set of restrictive controls and another for things that require privileged access. SELinux for Containers has a set of options that can be configured to modify the default restrictions. The following SELinux Booleans can be enabled or disabled based on your needs: Boolean Default Description container_connect_any off Allow containers to access privileged ports on the host. For example, if you have a container that needs to map ports to 443 or 80 on the host. container_manage_cgroup off Allow containers to manage cgroup configuration. For example, a container running systemd will need this to be enabled. container_use_cephfs off Allow containers to use a ceph file system. By default, containers are allowed to read/execute under /usr and read most content from /etc . The files under /var/lib/docker and /var/lib/containers have the label container_var_lib_t . To view a full list of default, labels see the container.fc file. docker container run -it \\ -v /var/lib/docker/image/overlay2/repositories.json:/host/repositories.json \\ centos:7 cat /host/repositories.json # cat: /host/repositories.json: Permission denied docker container run -it \\ -v /etc/passwd:/host/etc/passwd \\ centos:7 cat /host/etc/passwd # cat: /host/etc/passwd: Permission denied Files labeled with container_file_t are the only files that are writable by containers. If you want a volume mount to be writeable, you will needed to specify :z or :Z at the end. :z will re-label the files so that the container can read/write :Z will re-label the files so that only the container can read/write ls -Z /var/lib/misc # -rw-r--r--. root root system_u:object_r:var_lib_t:s0 postfix.aliasesdb-stamp docker container run -it \\ -v /var/lib/misc:/host/var/lib/misc:z \\ centos:7 echo \"Relabeled!\" ls -Z /var/lib/misc #-rw-r--r--. root root system_u:object_r:container_file_t:s0 postfix.aliasesdb-stamp docker container run -it \\ -v /var/log:/host/var/log:Z \\ fluentbit:latest In Kubernetes, relabeling is slightly different. Rather than having Docker automatically relabel the files, you can specify a custom MCS label to run the pod. Volumes that support relabeling will automatically be relabeled so that they are accessible. Pods with a matching MCS label will be able to access the volume. If you need strict isolation, set a different MCS label for each pod. securityContext : seLinuxOptions : # Provide a unique MCS label per container # You can specify user, role, and type also # enforcement based on type and level (svert) level : s0:c144:c154 In this example s0:c144:c154 corresponds to an MCS label assigned to a file that the container is allowed to access. On EKS you could create policies that allow for privileged containers to run, like FluentD and create an SELinux policy to allow it to read from /var/log on the host without needing to relabel the host directory. Pods with the same label will be able to access the same host volumes. We have implemented sample AMIs for Amazon EKS that have SELinux configured on CentOS 7 and RHEL 7. These AMIs were developed to demonstrate sample implementations that meet requirements of highly regulated customers, such as STIG, CJIS, and C2S. Caution SELinux will ignore containers where the type is unconfined.","title":"Run SELinux"},{"location":"security/docs/hosts/#additional-resources","text":"SELinux Kubernetes RBAC and Shipping Security Policies for On-prem Applications Iterative Hardening of Kubernetes Audit2Allow SEAlert Generate SELinux policies for containers with Udica describes a tool that looks at container spec files for Linux capabilities, ports, and mount points, and generates a set of SELinux rules that allow the container to run properly AMI Hardening playbooks for hardening the OS to meet different regulatory requirements","title":"Additional resources"},{"location":"security/docs/hosts/#tools","text":"Keiko Upgrade Manager an open source project from Intuit that orchestrates the rotation of worker nodes. Sysdig Secure eksctl","title":"Tools"},{"location":"security/docs/iam/","text":"Identity and Access Management \u00b6 Identity and Access Management (IAM) is an AWS service that performs two essential functions: Authentication and Authorization. Authentication involves the verification of a identity whereas authorization governs the actions that can be performed by AWS resources. Within AWS, a resource can be another AWS service, e.g. EC2, or an AWS principal such as an IAM User or Role . The rules governing the actions that a resource is allowed to perform are expressed as IAM policies . Controlling Access to EKS Clusters \u00b6 The Kubernetes project supports a variety of different strategies to authenticate requests to the kube-apiserver service, e.g. Bearer Tokens, X.509 certificates, OIDC, etc. EKS currently has native support for webhook token authentication , service account tokens , and as of February 21, 2021, OIDC authentication. The webhook authentication strategy calls a webhook that verifies bearer tokens. On EKS, these bearer tokens are generated by the AWS CLI or the aws-iam-authenticator client when you run kubectl commands. As you execute commands, the token is passed to the kube-apiserver which forwards it to the authentication webhook. If the request is well-formed, the webhook calls a pre-signed URL embedded in the token's body. This URL validates the request's signature and returns information about the user, e.g. the user's account, Arn, and UserId to the kube-apiserver. To manually generate a authentication token, type the following command in a terminal window: aws eks get-token --cluster <cluster_name> You can also get a token programmatically. Below is an example written in Go: package main import ( \"fmt\" \"log\" \"sigs.k8s.io/aws-iam-authenticator/pkg/token\" ) func main () { g , _ := token . NewGenerator ( false , false ) tk , err := g . Get ( \"<cluster_name>\" ) if err != nil { log . Fatal ( err ) } fmt . Println ( tk ) } The output should resemble this: { \"kind\" : \"ExecCredential\" , \"apiVersion\" : \"client.authentication.k8s.io/v1alpha1\" , \"spec\" : {}, \"status\" : { \"expirationTimestamp\" : \"2020-02-19T16:08:27Z\" , \"token\" : \"k8s-aws-v1.aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFKTkdSSUxLTlNSQzJXNVFBJTJGMjAyMDAyMTklMkZ1cy1lYXN0LTElMkZzdHMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDIwMDIxOVQxNTU0MjdaJlgtQW16LUV4cGlyZXM9NjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JTNCeC1rOHMtYXdzLWlkJlgtQW16LVNpZ25hdHVyZT0yMjBmOGYzNTg1ZTMyMGRkYjVlNjgzYTVjOWE0MDUzMDFhZDc2NTQ2ZjI0ZjI4MTExZmRhZDA5Y2Y2NDhhMzkz\" } } Each token starts with k8s-aws-v1. followed by a base64 encoded string. The string, when decoded, should resemble this: https://sts.amazonaws.com/?Action = GetCallerIdentity & Version = 2011 -06-15 & X-Amz-Algorithm = AWS4-HMAC-SHA256 & X-Amz-Credential = AKIAJPFRILKNSRC2W5QA%2F20200219%2Fus-east-1%2Fsts%2Faws4_request & X-Amz-Date = 20200219T155427Z & X-Amz-Expires = 60 & X-Amz-SignedHeaders = host%3Bx-k8s-aws-id & X-Amz-Signature = 220f8f3285e320ddb5e683a5c9a405301ad76546f24f28111fdad09cf648a393 The token consists of a pre-signed URL that includes an Amazon credential and signature. For additional details see https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html . The token has a time to live (TTL) of 15 minutes after which a new token will need to be generated. This is handled automatically when you use a client like kubectl , however, if you're using the Kubernetes dashboard, you will need to generate a new token and re-authenticate each time the token expires. Once the user's identity has been authenticated by the AWS IAM service, the kube-apiserver reads the aws-auth ConfigMap in the kube-system Namespace to determine the RBAC group to associate with the user. The aws-auth ConfigMap is used to create a static mapping between IAM principals, i.e. IAM Users and Roles, and Kubernetes RBAC groups. RBAC groups can be referenced in Kubernetes RoleBindings or ClusterRoleBindings. They are similar to IAM Roles in that they define a set of actions (verbs) that can be performed against a collection of Kubernetes resources (objects). Recommendations \u00b6 Don't use a service account token for authentication \u00b6 A service account token is a long-lived, static credential. If it is compromised, lost, or stolen, an attacker may be able to perform all the actions associated with that token until the service account is deleted. At times, you may need to grant an exception for applications that have to consume the Kubernetes API from outside the cluster, e.g. a CI/CD pipeline application. If such applications run on AWS infrastructure, like EC2 instances, consider using an instance profile and mapping that to a Kubernetes RBAC role in the aws-auth ConfigMap instead. Employ least privileged access to AWS Resources \u00b6 An IAM User does not need to be assigned privileges to AWS resources to access the Kubernetes API. If you need to grant an IAM user access to an EKS cluster, create an entry in the aws-auth ConfigMap for that user that maps to a specific Kubernetes RBAC group. Use IAM Roles when multiple users need identical access to the cluster \u00b6 Rather than creating an entry for each individual IAM User in the aws-auth ConfigMap, allow those users to assume an IAM Role and map that role to a Kubernetes RBAC group. This will be easier to maintain, especially as the number of users that require access grows. Attention When accessing the EKS cluster with the IAM entity mapped by aws-auth ConfigMap, the username described in aws-auth ConfigMap is recorded in the user field of the Kubernetes audit log. If you're using an IAM role, the actual users who assume that role aren't recorded and can't be audited. When assigning K8s RBAC permissions to an IAM role using mapRoles in aws-auth ConfigMap, you should include {{SessionName}} in your username. That way, the audit log will record the session name so you can track who the actual user assume this role along with the CloudTrail log. - rolearn : arn:aws:iam::XXXXXXXXXXXX:role/testRole username : testRole:{{SessionName}} groups : - system:masters Employ least privileged access when creating RoleBindings and ClusterRoleBindings \u00b6 Like the earlier point about granting access to AWS Resources, RoleBindings and ClusterRoleBindings should only include the set of permissions necessary to perform a specific function. Avoid using [\"*\"] in your Roles and ClusterRoles unless it's absolutely necessary. If you're unsure what permissions to assign, consider using a tool like audit2rbac to automatically generate Roles and binding based on the observed API calls in the Kubernetes Audit Log. Make the EKS Cluster Endpoint private \u00b6 By default when you provision an EKS cluster, the API cluster endpoint is set to public, i.e. it can be accessed from the Internet. Despite being accessible from the Internet, the endpoint is still considered secure because it requires all API requests to be authenticated by IAM and then authorized by Kubernetes RBAC. That said, if your corporate security policy mandates that you restrict access to the API from the Internet or prevents you from routing traffic outside the cluster VPC, you can: Configure the EKS cluster endpoint to be private. See Modifying Cluster Endpoint Access for further information on this topic. Leave the cluster endpoint public and specify which CIDR blocks can communicate with the cluster endpoint. The blocks are effectively a whitelisted set of public IP addresses that are allowed to access the cluster endpoint. Configure public access with a set of whitelisted CIDR blocks and set private endpoint access to enabled. This will allow public access from a specific range of public IPs while forcing all network traffic between the kubelets (workers) and the Kubernetes API through the cross-account ENIs that get provisioned into the cluster VPC when the control plane is provisioned. Create the cluster with a dedicated IAM role \u00b6 When you create an Amazon EKS cluster, the IAM entity user or role, such as a federated user that creates the cluster, is automatically granted system:masters permissions in the cluster's RBAC configuration. This access cannot be removed and is not managed through the aws-auth ConfigMap. Therefore it is a good idea to create the cluster with a dedicated IAM role and regularly audit who can assume this role. This role should not be used to perform routine actions on the cluster, and instead additional users should be granted access to the cluster through the aws-auth ConfigMap for this purpose. After the aws-auth ConfigMap is configured, the role can be deleted and only recreated in an emergency / break glass scenario where the aws-auth ConfigMap is corrupted and the cluster is otherwise inaccessible. This can be particularly useful in production clusters which do not usually have direct user access configured. Regularly audit access to the cluster \u00b6 Who requires access is likely to change over time. Plan to periodically audit the aws-auth ConfigMap to see who has been granted access and the rights they've been assigned. You can also use open source tooling like kubectl-who-can , or rbac-lookup to examine the roles bound to a particular service account, user, or group. We'll explore this topic further when we get to the section on auditing . Additional ideas can be found in this article from NCC Group. Alternative Approaches to Authentication and Access Management \u00b6 While IAM is the preferred way to authenticate users who need access to an EKS cluster, it is possible to use an OIDC identity provider such as GitHub using an authentication proxy and Kubernetes impersonation . Posts for two such solutions have been published on the AWS Open Source blog: Authenticating to EKS Using GitHub Credentials with Teleport Consistent OIDC authentication across multiple EKS clusters using kube-oidc-proxy Attention EKS navitely supports OIDC authentication without using a proxy. For further information, please read the launch blog, Introducing OIDC identity provider authentication for Amazon EKS . For an example showing how to configure EKS with Dex, a popular open source OIDC provider with connectors for a variety of different authention methods, see Using Dex & dex-k8s-authenticator to authenticate to Amazon EKS . As described in the blogs, the username/group of users authenticated by an OIDC provider will appear in the Kubernetes audit log. You can also use AWS SSO to federate AWS with an external identity provider, e.g. Azure AD. If you decide to use this, the AWS CLI v2.0 includes an option to create a named profile that makes it easy to associate an SSO session with your current CLI session and assume an IAM role. Know that you must assume a role prior to running kubectl as the IAM role is used to determine the user's Kubernetes RBAC group. Additional Resources \u00b6 rbac.dev A list of additional resources, including blogs and tools, for Kubernetes RBAC Pods Identities \u00b6 Certain applications that run within a Kubernetes cluster need permission to call the Kubernetes API to function properly. For example, the AWS Load Balancer Controller needs to be able to list a Service's Endpoints. The controller also needs to be able to invoke AWS APIs to provision and configure an ALB. In this section we will explore the best practices for assigning rights and privileges to Pods. Kubernetes Service Accounts \u00b6 A service account is a special type of object that allows you to assign a Kubernetes RBAC role to a pod. A default service account is created automatically for each Namespace within a cluster. When you deploy a pod into a Namespace without referencing a specific service account, the default service account for that Namespace will automatically get assigned to the Pod and the Secret, i.e. the service account (JWT) token for that service account, will get mounted to the pod as a volume at /var/run/secrets/kubernetes.io/serviceaccount . Decoding the service account token in that directory will reveal the following metadata: { \"iss\" : \"kubernetes/serviceaccount\" , \"kubernetes.io/serviceaccount/namespace\" : \"default\" , \"kubernetes.io/serviceaccount/secret.name\" : \"default-token-5pv4z\" , \"kubernetes.io/serviceaccount/service-account.name\" : \"default\" , \"kubernetes.io/serviceaccount/service-account.uid\" : \"3b36ddb5-438c-11ea-9438-063a49b60fba\" , \"sub\" : \"system:serviceaccount:default:default\" } The default service account has the following permissions to the Kubernetes API. apiVersion : rbac.authorization.k8s.io/v1 kind : ClusterRole metadata : annotations : rbac.authorization.kubernetes.io/autoupdate : \"true\" creationTimestamp : \"2020-01-30T18:13:25Z\" labels : kubernetes.io/bootstrapping : rbac-defaults name : system:discovery resourceVersion : \"43\" selfLink : /apis/rbac.authorization.k8s.io/v1/clusterroles/system%3Adiscovery uid : 350d2ab8-438c-11ea-9438-063a49b60fba rules : - nonResourceURLs : - /api - /api/* - /apis - /apis/* - /healthz - /openapi - /openapi/* - /version - /version/ verbs : - get This role authorizes unauthenticated and authenticated users to read API information and is deemed safe to be publicly accessible. When an application running within a Pod calls the Kubernetes APIs, the Pod needs to be assigned a service account that explicitly grants it permission to call those APIs. Similar to guidelines for user access, the Role or ClusterRole bound to a service account should be restricted to the API resources and methods that the application needs to function and nothing else. To use a non-default service account simply set the spec.serviceAccountName field of a Pod to the name of the service account you wish to use. For additional information about creating service accounts, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#service-account-permissions . IAM Roles for Service Accounts (IRSA) \u00b6 IRSA is a feature that allows you to assign an IAM role to a Kubernetes service account. It works by leveraging a Kubernetes feature known as Service Account Token Volume Projection . Pods with service accounts that reference an IAM Role call a public OIDC discovery endpoint for AWS IAM upon startup. The endpoint cryptographically signs the OIDC token issued by Kubernetes which ultimately allows the Pod to call the AWS APIs associated IAM role. When an AWS API is invoked, the AWS SDKs calls sts:AssumeRoleWithWebIdentity and automatically exchanges the Kubernetes issued token for a AWS role credential. Decoding the (JWT) token for IRSA will produce output similar to the example you see below: { \"aud\" : [ \"sts.amazonaws.com\" ], \"exp\" : 1582306514 , \"iat\" : 1582220114 , \"iss\" : \"https://oidc.eks.us-west-2.amazonaws.com/id/D43CF17C27A865933144EA99A26FB128\" , \"kubernetes.io\" : { \"namespace\" : \"default\" , \"pod\" : { \"name\" : \"alpine-57b5664646-rf966\" , \"uid\" : \"5a20f883-5407-11ea-a85c-0e62b7a4a436\" }, \"serviceaccount\" : { \"name\" : \"s3-read-only\" , \"uid\" : \"a720ba5c-5406-11ea-9438-063a49b60fba\" } }, \"nbf\" : 1582220114 , \"sub\" : \"system:serviceaccount:default:s3-read-only\" } This particular token grants the Pod view-only privileges to S3. When the application attempts to read from S3, the token is exchanged for a temporary set of IAM credentials that resembles this: { \"AssumedRoleUser\" : { \"AssumedRoleId\" : \"AROA36C6WWEJULFUYMPB6:abc\" , \"Arn\" : \"arn:aws:sts::123456789012:assumed-role/eksctl-winterfell-addon-iamserviceaccount-de-Role1-1D61LT75JH3MB/abc\" }, \"Audience\" : \"sts.amazonaws.com\" , \"Provider\" : \"arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/D43CF17C27A865933144EA99A26FB128\" , \"SubjectFromWebIdentityToken\" : \"system:serviceaccount:default:s3-read-only\" , \"Credentials\" : { \"SecretAccessKey\" : \"ORJ+8Adk+wW+nU8FETq7+mOqeA8Z6jlPihnV8hX1\" , \"SessionToken\" : \"FwoGZXIvYXdzEGMaDMLxAZkuLpmSwYXShiL9A1S0X87VBC1mHCrRe/pB2oes+l1eXxUYnPJyC9ayOoXMvqXQsomq0xs6OqZ3vaa5Iw1HIyA4Cv1suLaOCoU3hNvOIJ6C94H1vU0siQYk7DIq9Av5RZe+uE2FnOctNBvYLd3i0IZo1ajjc00yRK3v24VRq9nQpoPLuqyH2jzlhCEjXuPScPbi5KEVs9fNcOTtgzbVf7IG2gNiwNs5aCpN4Bv/Zv2A6zp5xGz9cWj2f0aD9v66vX4bexOs5t/YYhwuwAvkkJPSIGvxja0xRThnceHyFHKtj0H+bi/PWAtlI8YJcDX69cM30JAHDdQH+ltm/4scFptW1hlvMaP+WReCAaCrsHrAT+yka7ttw5YlUyvZ8EPog+j6fwHlxmrXM9h1BqdikomyJU00gm1++FJelfP+1zAwcyrxCnbRl3ARFrAt8hIlrT6Vyu8WvWtLxcI8KcLcJQb/LgkW+sCTGlYcY8z3zkigJMbYn07ewTL5Ss7LazTJJa758I7PZan/v3xQHd5DEc5WBneiV3iOznDFgup0VAMkIviVjVCkszaPSVEdK2NU7jtrh6Jfm7bU/3P6ZG+CkyDLIa8MBn9KPXeJd/y+jTk5Ii+fIwO/+mDpGNUribg6TPxhzZ8b/XdZO1kS1gVgqjXyVC+M+BRBh6C4H21w/eMzjCtDIpoxt5rGKL6Nu/IFMipoC4fgx6LIIHwtGYMG7SWQi7OsMAkiwZRg0n68/RqWgLzBt/4pfjSRYuk=\" , \"Expiration\" : \"2020-02-20T18:49:50Z\" , \"AccessKeyId\" : \"ASIA36C6WWEJUMHA3L7Z\" } } A mutating webhook that runs as part of the EKS control plane injects the AWS Role ARN and the path to a web identity token file into the Pod as environment variables. These values can also be supplied manually. AWS_ROLE_ARN = arn : aws : iam :: AWS_ACCOUNT_ID : role / IAM_ROLE_NAME AWS_WEB_IDENTITY_TOKEN_FILE =/ var / run / secrets / eks . amazonaws . com / serviceaccount / token The kubelet will automatically rotate the projected token when it is older than 80% of its total TTL, or after 24 hours. The AWS SDKs are responsible for reloading the token when it rotates. For further information about IRSA, see https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts-technical-overview.html . Recommendations \u00b6 Update the aws-node daemonset to use IRSA \u00b6 At present, the aws-node daemonset is configured to use a role assigned to the EC2 instances to assign IPs to pods. This role includes several AWS managed policies, e.g. AmazonEKS_CNI_Policy and EC2ContainerRegistryReadOnly that effectly allow all pods running on a node to attach/detach ENIs, assign/unassign IP addresses, or pull images from ECR. Since this presents a risk to your cluster, it is recommended that you update the aws-node daemonset to use IRSA. A script for doing this can be found in the repository for this guide. Restrict access to the instance profile assigned to the worker node \u00b6 When you use IRSA, it updates the credential chain of the pod to use the IRSA token, however, the pod can still inherit the rights of the instance profile assigned to the worker node . When using IRSA, it is strongly recommended that you block access instance metadata to minimize the blast radius of a breach. Caution Blocking access to instance metadata will prevent pods that do not use IRSA from inheriting the role assigned to the worker node. You can block access to instance metadata by requiring the instance to use IMDSv2 only and updating the hop count to 1 as in the example below. You can also include these settings in the node group's launch template. Do not disable instance metadata as this will prevent components like the node termination handler and other things that rely on instance metadata from working properly. aws ec2 modify-instance-metadata-options --instance-id <value> --http-tokens required --http-put-response-hop-limit 1 You can also block a pod's access to EC2 metadata by manipulating iptables on the node. For further information about this method, see https://docs.aws.amazon.com/eks/latest/userguide/restrict-ec2-credential-access.html . If you have an application that is using an older version of the AWS SDK that doesn't support IRSA, and you want the pod to inherit the role assigned to the instance, consider using Kubernetes network policies to selectively allow access EC2 metadata. Start with a policy that blocks access to the metadata service from all Pods: apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : deny-metadata-access namespace : example spec : podSelector : {} policyTypes : - Egress egress : - to : - ipBlock : cidr : 0.0.0.0/0 except : - 169.254.169.254/32 Then allow access from select pods by adding following policy, modifying the PodSelector as appropriate. apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : allow-metadata-access namespace : example spec : podSelector : matchLabels : app : myapp policyTypes : - Egress egress : - to : - ipBlock : cidr : 169.254.169.254/32 Scope the IAM Role trust policy for IRSA to the service account name \u00b6 The trust policy can be scoped to a Namespace or a specific service account within a Namespace. When using IRSA it's best to make the role trust policy as explicit as possible by including the service account name. This will effectively prevent other Pods within the same Namespace from assuming the role. The CLI eksctl will do this automatically when you use it to create service accounts/IAM roles. See https://eksctl.io/usage/iamserviceaccounts/ for further information. When your application needs access to IDMS, use IMDSv2 and increase the hop limit on EC2 instances to 2 \u00b6 IMDSv2 requires you use a PUT request to get a session token. The initial PUT request has to include a TTL for the session token. Newer versions of the AWS SDKs will handle this and the renewal of said token automatically. It's also important to be aware that the default hop limit on EC2 instances is intentionally set to 1 to prevent IP forwarding. As a consequence, Pods that request a session token that are run on EC2 instances may eventually time out and fallback to using the IMDSv1 data flow. EKS adds support IMDSv2 by enabling both v1 and v2 and changing the hop limit to 2 on nodes provisioned by eksctl or with the official CloudFormation templates. Disable auto-mounting of service account tokens \u00b6 If your application doesn't need to call the Kubernetes API set the automountServiceAccountToken attribute to false in the PodSpec for your application or patch the default service account in each namespace so that it's no longer mounted to pods automatically. For example: kubectl patch serviceaccount default -p $'automountServiceAccountToken: false' Use dedicated service accounts for each application \u00b6 Each application should have its own dedicated service account. This applies to service accounts for the Kubernetes API as well as IRSA. Attention If you employ a blue/green approach to cluster upgrades instead of performing an in-place cluster upgrade, you will need to update the trust policy of each of the IRSA IAM roles with the OIDC endpoint of the new cluster. A blue/green cluster upgrade is where you create a cluster running a newer version of Kubernetes alongside the old cluster and use a load balancer or a service mesh to seamlessly shift traffic from services running on the old cluster to the new cluster. Run the application as a non-root user \u00b6 Containers run as root by default. While this allows them to read the web identity token file, running a container as root is not considered a best practice. As an alternative, consider adding the spec.securityContext.runAsUser attribute to the PodSpec. The value of runAsUser is arbitrary value. In the following example, all processes within the Pod will run under the user ID specified in the runAsUser field. apiVersion : v1 kind : Pod metadata : name : security-context-demo spec : securityContext : runAsUser : 1000 runAsGroup : 3000 containers : - name : sec-ctx-demo image : busybox command : [ \"sh\" , \"-c\" , \"sleep 1h\" ] When you run a container as a non-root user, it prevents the container from reading the IRSA service account token because the token is assigned 0600 [root] permissions by default. If you update the securityContext for your container to include fsgroup=65534 [Nobody] it will allow the container to read the token. spec : securityContext : fsGroup : 65534 In Kubernetes 1.19 and above, this change is no longer required. Grant least privileged access to applications \u00b6 Action Hero is a utility that you can run alongside your application to identify the AWS API calls and corresponding IAM permissions your application needs to function properly. It is similar to IAM Access Advisor in that it helps you gradually limit the scope of IAM roles assigned to applications. Consult the documentation on granting least privileged access to AWS resources for further information. Alternative approaches \u00b6 While IRSA is the preferred way to assign an AWS \"identity\" to a pod, it requires that you include recent version of the AWS SDKs in your application. For a complete listing of the SDKs that currently support IRSA, see https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts-minimum-sdk.html . If you have an application that you can't immediately update with a IRSA-compatible SDK, there are several community-built solutions available for assigning IAM roles to Kubernetes pods, including kube2iam and kiam . Although AWS doesn't endorse or condone the use of these solutions, they are frequently used by the community at large to achieve similar results as IRSA.","title":"Identity and Access Management"},{"location":"security/docs/iam/#identity-and-access-management","text":"Identity and Access Management (IAM) is an AWS service that performs two essential functions: Authentication and Authorization. Authentication involves the verification of a identity whereas authorization governs the actions that can be performed by AWS resources. Within AWS, a resource can be another AWS service, e.g. EC2, or an AWS principal such as an IAM User or Role . The rules governing the actions that a resource is allowed to perform are expressed as IAM policies .","title":"Identity and Access Management"},{"location":"security/docs/iam/#controlling-access-to-eks-clusters","text":"The Kubernetes project supports a variety of different strategies to authenticate requests to the kube-apiserver service, e.g. Bearer Tokens, X.509 certificates, OIDC, etc. EKS currently has native support for webhook token authentication , service account tokens , and as of February 21, 2021, OIDC authentication. The webhook authentication strategy calls a webhook that verifies bearer tokens. On EKS, these bearer tokens are generated by the AWS CLI or the aws-iam-authenticator client when you run kubectl commands. As you execute commands, the token is passed to the kube-apiserver which forwards it to the authentication webhook. If the request is well-formed, the webhook calls a pre-signed URL embedded in the token's body. This URL validates the request's signature and returns information about the user, e.g. the user's account, Arn, and UserId to the kube-apiserver. To manually generate a authentication token, type the following command in a terminal window: aws eks get-token --cluster <cluster_name> You can also get a token programmatically. Below is an example written in Go: package main import ( \"fmt\" \"log\" \"sigs.k8s.io/aws-iam-authenticator/pkg/token\" ) func main () { g , _ := token . NewGenerator ( false , false ) tk , err := g . Get ( \"<cluster_name>\" ) if err != nil { log . Fatal ( err ) } fmt . Println ( tk ) } The output should resemble this: { \"kind\" : \"ExecCredential\" , \"apiVersion\" : \"client.authentication.k8s.io/v1alpha1\" , \"spec\" : {}, \"status\" : { \"expirationTimestamp\" : \"2020-02-19T16:08:27Z\" , \"token\" : \"k8s-aws-v1.aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFKTkdSSUxLTlNSQzJXNVFBJTJGMjAyMDAyMTklMkZ1cy1lYXN0LTElMkZzdHMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDIwMDIxOVQxNTU0MjdaJlgtQW16LUV4cGlyZXM9NjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JTNCeC1rOHMtYXdzLWlkJlgtQW16LVNpZ25hdHVyZT0yMjBmOGYzNTg1ZTMyMGRkYjVlNjgzYTVjOWE0MDUzMDFhZDc2NTQ2ZjI0ZjI4MTExZmRhZDA5Y2Y2NDhhMzkz\" } } Each token starts with k8s-aws-v1. followed by a base64 encoded string. The string, when decoded, should resemble this: https://sts.amazonaws.com/?Action = GetCallerIdentity & Version = 2011 -06-15 & X-Amz-Algorithm = AWS4-HMAC-SHA256 & X-Amz-Credential = AKIAJPFRILKNSRC2W5QA%2F20200219%2Fus-east-1%2Fsts%2Faws4_request & X-Amz-Date = 20200219T155427Z & X-Amz-Expires = 60 & X-Amz-SignedHeaders = host%3Bx-k8s-aws-id & X-Amz-Signature = 220f8f3285e320ddb5e683a5c9a405301ad76546f24f28111fdad09cf648a393 The token consists of a pre-signed URL that includes an Amazon credential and signature. For additional details see https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html . The token has a time to live (TTL) of 15 minutes after which a new token will need to be generated. This is handled automatically when you use a client like kubectl , however, if you're using the Kubernetes dashboard, you will need to generate a new token and re-authenticate each time the token expires. Once the user's identity has been authenticated by the AWS IAM service, the kube-apiserver reads the aws-auth ConfigMap in the kube-system Namespace to determine the RBAC group to associate with the user. The aws-auth ConfigMap is used to create a static mapping between IAM principals, i.e. IAM Users and Roles, and Kubernetes RBAC groups. RBAC groups can be referenced in Kubernetes RoleBindings or ClusterRoleBindings. They are similar to IAM Roles in that they define a set of actions (verbs) that can be performed against a collection of Kubernetes resources (objects).","title":"Controlling Access to EKS Clusters"},{"location":"security/docs/iam/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/iam/#dont-use-a-service-account-token-for-authentication","text":"A service account token is a long-lived, static credential. If it is compromised, lost, or stolen, an attacker may be able to perform all the actions associated with that token until the service account is deleted. At times, you may need to grant an exception for applications that have to consume the Kubernetes API from outside the cluster, e.g. a CI/CD pipeline application. If such applications run on AWS infrastructure, like EC2 instances, consider using an instance profile and mapping that to a Kubernetes RBAC role in the aws-auth ConfigMap instead.","title":"Don't use a service account token for authentication"},{"location":"security/docs/iam/#employ-least-privileged-access-to-aws-resources","text":"An IAM User does not need to be assigned privileges to AWS resources to access the Kubernetes API. If you need to grant an IAM user access to an EKS cluster, create an entry in the aws-auth ConfigMap for that user that maps to a specific Kubernetes RBAC group.","title":"Employ least privileged access to AWS Resources"},{"location":"security/docs/iam/#use-iam-roles-when-multiple-users-need-identical-access-to-the-cluster","text":"Rather than creating an entry for each individual IAM User in the aws-auth ConfigMap, allow those users to assume an IAM Role and map that role to a Kubernetes RBAC group. This will be easier to maintain, especially as the number of users that require access grows. Attention When accessing the EKS cluster with the IAM entity mapped by aws-auth ConfigMap, the username described in aws-auth ConfigMap is recorded in the user field of the Kubernetes audit log. If you're using an IAM role, the actual users who assume that role aren't recorded and can't be audited. When assigning K8s RBAC permissions to an IAM role using mapRoles in aws-auth ConfigMap, you should include {{SessionName}} in your username. That way, the audit log will record the session name so you can track who the actual user assume this role along with the CloudTrail log. - rolearn : arn:aws:iam::XXXXXXXXXXXX:role/testRole username : testRole:{{SessionName}} groups : - system:masters","title":"Use IAM Roles when multiple users need identical access to the cluster"},{"location":"security/docs/iam/#employ-least-privileged-access-when-creating-rolebindings-and-clusterrolebindings","text":"Like the earlier point about granting access to AWS Resources, RoleBindings and ClusterRoleBindings should only include the set of permissions necessary to perform a specific function. Avoid using [\"*\"] in your Roles and ClusterRoles unless it's absolutely necessary. If you're unsure what permissions to assign, consider using a tool like audit2rbac to automatically generate Roles and binding based on the observed API calls in the Kubernetes Audit Log.","title":"Employ least privileged access when creating RoleBindings and ClusterRoleBindings"},{"location":"security/docs/iam/#make-the-eks-cluster-endpoint-private","text":"By default when you provision an EKS cluster, the API cluster endpoint is set to public, i.e. it can be accessed from the Internet. Despite being accessible from the Internet, the endpoint is still considered secure because it requires all API requests to be authenticated by IAM and then authorized by Kubernetes RBAC. That said, if your corporate security policy mandates that you restrict access to the API from the Internet or prevents you from routing traffic outside the cluster VPC, you can: Configure the EKS cluster endpoint to be private. See Modifying Cluster Endpoint Access for further information on this topic. Leave the cluster endpoint public and specify which CIDR blocks can communicate with the cluster endpoint. The blocks are effectively a whitelisted set of public IP addresses that are allowed to access the cluster endpoint. Configure public access with a set of whitelisted CIDR blocks and set private endpoint access to enabled. This will allow public access from a specific range of public IPs while forcing all network traffic between the kubelets (workers) and the Kubernetes API through the cross-account ENIs that get provisioned into the cluster VPC when the control plane is provisioned.","title":"Make the EKS Cluster Endpoint private"},{"location":"security/docs/iam/#create-the-cluster-with-a-dedicated-iam-role","text":"When you create an Amazon EKS cluster, the IAM entity user or role, such as a federated user that creates the cluster, is automatically granted system:masters permissions in the cluster's RBAC configuration. This access cannot be removed and is not managed through the aws-auth ConfigMap. Therefore it is a good idea to create the cluster with a dedicated IAM role and regularly audit who can assume this role. This role should not be used to perform routine actions on the cluster, and instead additional users should be granted access to the cluster through the aws-auth ConfigMap for this purpose. After the aws-auth ConfigMap is configured, the role can be deleted and only recreated in an emergency / break glass scenario where the aws-auth ConfigMap is corrupted and the cluster is otherwise inaccessible. This can be particularly useful in production clusters which do not usually have direct user access configured.","title":"Create the cluster with a dedicated IAM role"},{"location":"security/docs/iam/#regularly-audit-access-to-the-cluster","text":"Who requires access is likely to change over time. Plan to periodically audit the aws-auth ConfigMap to see who has been granted access and the rights they've been assigned. You can also use open source tooling like kubectl-who-can , or rbac-lookup to examine the roles bound to a particular service account, user, or group. We'll explore this topic further when we get to the section on auditing . Additional ideas can be found in this article from NCC Group.","title":"Regularly audit access to the cluster"},{"location":"security/docs/iam/#alternative-approaches-to-authentication-and-access-management","text":"While IAM is the preferred way to authenticate users who need access to an EKS cluster, it is possible to use an OIDC identity provider such as GitHub using an authentication proxy and Kubernetes impersonation . Posts for two such solutions have been published on the AWS Open Source blog: Authenticating to EKS Using GitHub Credentials with Teleport Consistent OIDC authentication across multiple EKS clusters using kube-oidc-proxy Attention EKS navitely supports OIDC authentication without using a proxy. For further information, please read the launch blog, Introducing OIDC identity provider authentication for Amazon EKS . For an example showing how to configure EKS with Dex, a popular open source OIDC provider with connectors for a variety of different authention methods, see Using Dex & dex-k8s-authenticator to authenticate to Amazon EKS . As described in the blogs, the username/group of users authenticated by an OIDC provider will appear in the Kubernetes audit log. You can also use AWS SSO to federate AWS with an external identity provider, e.g. Azure AD. If you decide to use this, the AWS CLI v2.0 includes an option to create a named profile that makes it easy to associate an SSO session with your current CLI session and assume an IAM role. Know that you must assume a role prior to running kubectl as the IAM role is used to determine the user's Kubernetes RBAC group.","title":"Alternative Approaches to Authentication and Access Management"},{"location":"security/docs/iam/#additional-resources","text":"rbac.dev A list of additional resources, including blogs and tools, for Kubernetes RBAC","title":"Additional Resources"},{"location":"security/docs/iam/#pods-identities","text":"Certain applications that run within a Kubernetes cluster need permission to call the Kubernetes API to function properly. For example, the AWS Load Balancer Controller needs to be able to list a Service's Endpoints. The controller also needs to be able to invoke AWS APIs to provision and configure an ALB. In this section we will explore the best practices for assigning rights and privileges to Pods.","title":"Pods Identities"},{"location":"security/docs/iam/#kubernetes-service-accounts","text":"A service account is a special type of object that allows you to assign a Kubernetes RBAC role to a pod. A default service account is created automatically for each Namespace within a cluster. When you deploy a pod into a Namespace without referencing a specific service account, the default service account for that Namespace will automatically get assigned to the Pod and the Secret, i.e. the service account (JWT) token for that service account, will get mounted to the pod as a volume at /var/run/secrets/kubernetes.io/serviceaccount . Decoding the service account token in that directory will reveal the following metadata: { \"iss\" : \"kubernetes/serviceaccount\" , \"kubernetes.io/serviceaccount/namespace\" : \"default\" , \"kubernetes.io/serviceaccount/secret.name\" : \"default-token-5pv4z\" , \"kubernetes.io/serviceaccount/service-account.name\" : \"default\" , \"kubernetes.io/serviceaccount/service-account.uid\" : \"3b36ddb5-438c-11ea-9438-063a49b60fba\" , \"sub\" : \"system:serviceaccount:default:default\" } The default service account has the following permissions to the Kubernetes API. apiVersion : rbac.authorization.k8s.io/v1 kind : ClusterRole metadata : annotations : rbac.authorization.kubernetes.io/autoupdate : \"true\" creationTimestamp : \"2020-01-30T18:13:25Z\" labels : kubernetes.io/bootstrapping : rbac-defaults name : system:discovery resourceVersion : \"43\" selfLink : /apis/rbac.authorization.k8s.io/v1/clusterroles/system%3Adiscovery uid : 350d2ab8-438c-11ea-9438-063a49b60fba rules : - nonResourceURLs : - /api - /api/* - /apis - /apis/* - /healthz - /openapi - /openapi/* - /version - /version/ verbs : - get This role authorizes unauthenticated and authenticated users to read API information and is deemed safe to be publicly accessible. When an application running within a Pod calls the Kubernetes APIs, the Pod needs to be assigned a service account that explicitly grants it permission to call those APIs. Similar to guidelines for user access, the Role or ClusterRole bound to a service account should be restricted to the API resources and methods that the application needs to function and nothing else. To use a non-default service account simply set the spec.serviceAccountName field of a Pod to the name of the service account you wish to use. For additional information about creating service accounts, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#service-account-permissions .","title":"Kubernetes Service Accounts"},{"location":"security/docs/iam/#iam-roles-for-service-accounts-irsa","text":"IRSA is a feature that allows you to assign an IAM role to a Kubernetes service account. It works by leveraging a Kubernetes feature known as Service Account Token Volume Projection . Pods with service accounts that reference an IAM Role call a public OIDC discovery endpoint for AWS IAM upon startup. The endpoint cryptographically signs the OIDC token issued by Kubernetes which ultimately allows the Pod to call the AWS APIs associated IAM role. When an AWS API is invoked, the AWS SDKs calls sts:AssumeRoleWithWebIdentity and automatically exchanges the Kubernetes issued token for a AWS role credential. Decoding the (JWT) token for IRSA will produce output similar to the example you see below: { \"aud\" : [ \"sts.amazonaws.com\" ], \"exp\" : 1582306514 , \"iat\" : 1582220114 , \"iss\" : \"https://oidc.eks.us-west-2.amazonaws.com/id/D43CF17C27A865933144EA99A26FB128\" , \"kubernetes.io\" : { \"namespace\" : \"default\" , \"pod\" : { \"name\" : \"alpine-57b5664646-rf966\" , \"uid\" : \"5a20f883-5407-11ea-a85c-0e62b7a4a436\" }, \"serviceaccount\" : { \"name\" : \"s3-read-only\" , \"uid\" : \"a720ba5c-5406-11ea-9438-063a49b60fba\" } }, \"nbf\" : 1582220114 , \"sub\" : \"system:serviceaccount:default:s3-read-only\" } This particular token grants the Pod view-only privileges to S3. When the application attempts to read from S3, the token is exchanged for a temporary set of IAM credentials that resembles this: { \"AssumedRoleUser\" : { \"AssumedRoleId\" : \"AROA36C6WWEJULFUYMPB6:abc\" , \"Arn\" : \"arn:aws:sts::123456789012:assumed-role/eksctl-winterfell-addon-iamserviceaccount-de-Role1-1D61LT75JH3MB/abc\" }, \"Audience\" : \"sts.amazonaws.com\" , \"Provider\" : \"arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/D43CF17C27A865933144EA99A26FB128\" , \"SubjectFromWebIdentityToken\" : \"system:serviceaccount:default:s3-read-only\" , \"Credentials\" : { \"SecretAccessKey\" : \"ORJ+8Adk+wW+nU8FETq7+mOqeA8Z6jlPihnV8hX1\" , \"SessionToken\" : \"FwoGZXIvYXdzEGMaDMLxAZkuLpmSwYXShiL9A1S0X87VBC1mHCrRe/pB2oes+l1eXxUYnPJyC9ayOoXMvqXQsomq0xs6OqZ3vaa5Iw1HIyA4Cv1suLaOCoU3hNvOIJ6C94H1vU0siQYk7DIq9Av5RZe+uE2FnOctNBvYLd3i0IZo1ajjc00yRK3v24VRq9nQpoPLuqyH2jzlhCEjXuPScPbi5KEVs9fNcOTtgzbVf7IG2gNiwNs5aCpN4Bv/Zv2A6zp5xGz9cWj2f0aD9v66vX4bexOs5t/YYhwuwAvkkJPSIGvxja0xRThnceHyFHKtj0H+bi/PWAtlI8YJcDX69cM30JAHDdQH+ltm/4scFptW1hlvMaP+WReCAaCrsHrAT+yka7ttw5YlUyvZ8EPog+j6fwHlxmrXM9h1BqdikomyJU00gm1++FJelfP+1zAwcyrxCnbRl3ARFrAt8hIlrT6Vyu8WvWtLxcI8KcLcJQb/LgkW+sCTGlYcY8z3zkigJMbYn07ewTL5Ss7LazTJJa758I7PZan/v3xQHd5DEc5WBneiV3iOznDFgup0VAMkIviVjVCkszaPSVEdK2NU7jtrh6Jfm7bU/3P6ZG+CkyDLIa8MBn9KPXeJd/y+jTk5Ii+fIwO/+mDpGNUribg6TPxhzZ8b/XdZO1kS1gVgqjXyVC+M+BRBh6C4H21w/eMzjCtDIpoxt5rGKL6Nu/IFMipoC4fgx6LIIHwtGYMG7SWQi7OsMAkiwZRg0n68/RqWgLzBt/4pfjSRYuk=\" , \"Expiration\" : \"2020-02-20T18:49:50Z\" , \"AccessKeyId\" : \"ASIA36C6WWEJUMHA3L7Z\" } } A mutating webhook that runs as part of the EKS control plane injects the AWS Role ARN and the path to a web identity token file into the Pod as environment variables. These values can also be supplied manually. AWS_ROLE_ARN = arn : aws : iam :: AWS_ACCOUNT_ID : role / IAM_ROLE_NAME AWS_WEB_IDENTITY_TOKEN_FILE =/ var / run / secrets / eks . amazonaws . com / serviceaccount / token The kubelet will automatically rotate the projected token when it is older than 80% of its total TTL, or after 24 hours. The AWS SDKs are responsible for reloading the token when it rotates. For further information about IRSA, see https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts-technical-overview.html .","title":"IAM Roles for Service Accounts (IRSA)"},{"location":"security/docs/iam/#recommendations_1","text":"","title":"Recommendations"},{"location":"security/docs/iam/#update-the-aws-node-daemonset-to-use-irsa","text":"At present, the aws-node daemonset is configured to use a role assigned to the EC2 instances to assign IPs to pods. This role includes several AWS managed policies, e.g. AmazonEKS_CNI_Policy and EC2ContainerRegistryReadOnly that effectly allow all pods running on a node to attach/detach ENIs, assign/unassign IP addresses, or pull images from ECR. Since this presents a risk to your cluster, it is recommended that you update the aws-node daemonset to use IRSA. A script for doing this can be found in the repository for this guide.","title":"Update the aws-node daemonset to use IRSA"},{"location":"security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node","text":"When you use IRSA, it updates the credential chain of the pod to use the IRSA token, however, the pod can still inherit the rights of the instance profile assigned to the worker node . When using IRSA, it is strongly recommended that you block access instance metadata to minimize the blast radius of a breach. Caution Blocking access to instance metadata will prevent pods that do not use IRSA from inheriting the role assigned to the worker node. You can block access to instance metadata by requiring the instance to use IMDSv2 only and updating the hop count to 1 as in the example below. You can also include these settings in the node group's launch template. Do not disable instance metadata as this will prevent components like the node termination handler and other things that rely on instance metadata from working properly. aws ec2 modify-instance-metadata-options --instance-id <value> --http-tokens required --http-put-response-hop-limit 1 You can also block a pod's access to EC2 metadata by manipulating iptables on the node. For further information about this method, see https://docs.aws.amazon.com/eks/latest/userguide/restrict-ec2-credential-access.html . If you have an application that is using an older version of the AWS SDK that doesn't support IRSA, and you want the pod to inherit the role assigned to the instance, consider using Kubernetes network policies to selectively allow access EC2 metadata. Start with a policy that blocks access to the metadata service from all Pods: apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : deny-metadata-access namespace : example spec : podSelector : {} policyTypes : - Egress egress : - to : - ipBlock : cidr : 0.0.0.0/0 except : - 169.254.169.254/32 Then allow access from select pods by adding following policy, modifying the PodSelector as appropriate. apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : allow-metadata-access namespace : example spec : podSelector : matchLabels : app : myapp policyTypes : - Egress egress : - to : - ipBlock : cidr : 169.254.169.254/32","title":"Restrict access to the instance profile assigned to the worker node"},{"location":"security/docs/iam/#scope-the-iam-role-trust-policy-for-irsa-to-the-service-account-name","text":"The trust policy can be scoped to a Namespace or a specific service account within a Namespace. When using IRSA it's best to make the role trust policy as explicit as possible by including the service account name. This will effectively prevent other Pods within the same Namespace from assuming the role. The CLI eksctl will do this automatically when you use it to create service accounts/IAM roles. See https://eksctl.io/usage/iamserviceaccounts/ for further information.","title":"Scope the IAM Role trust policy for IRSA to the service account name"},{"location":"security/docs/iam/#when-your-application-needs-access-to-idms-use-imdsv2-and-increase-the-hop-limit-on-ec2-instances-to-2","text":"IMDSv2 requires you use a PUT request to get a session token. The initial PUT request has to include a TTL for the session token. Newer versions of the AWS SDKs will handle this and the renewal of said token automatically. It's also important to be aware that the default hop limit on EC2 instances is intentionally set to 1 to prevent IP forwarding. As a consequence, Pods that request a session token that are run on EC2 instances may eventually time out and fallback to using the IMDSv1 data flow. EKS adds support IMDSv2 by enabling both v1 and v2 and changing the hop limit to 2 on nodes provisioned by eksctl or with the official CloudFormation templates.","title":"When your application needs access to IDMS, use IMDSv2 and increase the hop limit on EC2 instances to 2"},{"location":"security/docs/iam/#disable-auto-mounting-of-service-account-tokens","text":"If your application doesn't need to call the Kubernetes API set the automountServiceAccountToken attribute to false in the PodSpec for your application or patch the default service account in each namespace so that it's no longer mounted to pods automatically. For example: kubectl patch serviceaccount default -p $'automountServiceAccountToken: false'","title":"Disable auto-mounting of service account tokens"},{"location":"security/docs/iam/#use-dedicated-service-accounts-for-each-application","text":"Each application should have its own dedicated service account. This applies to service accounts for the Kubernetes API as well as IRSA. Attention If you employ a blue/green approach to cluster upgrades instead of performing an in-place cluster upgrade, you will need to update the trust policy of each of the IRSA IAM roles with the OIDC endpoint of the new cluster. A blue/green cluster upgrade is where you create a cluster running a newer version of Kubernetes alongside the old cluster and use a load balancer or a service mesh to seamlessly shift traffic from services running on the old cluster to the new cluster.","title":"Use dedicated service accounts for each application"},{"location":"security/docs/iam/#run-the-application-as-a-non-root-user","text":"Containers run as root by default. While this allows them to read the web identity token file, running a container as root is not considered a best practice. As an alternative, consider adding the spec.securityContext.runAsUser attribute to the PodSpec. The value of runAsUser is arbitrary value. In the following example, all processes within the Pod will run under the user ID specified in the runAsUser field. apiVersion : v1 kind : Pod metadata : name : security-context-demo spec : securityContext : runAsUser : 1000 runAsGroup : 3000 containers : - name : sec-ctx-demo image : busybox command : [ \"sh\" , \"-c\" , \"sleep 1h\" ] When you run a container as a non-root user, it prevents the container from reading the IRSA service account token because the token is assigned 0600 [root] permissions by default. If you update the securityContext for your container to include fsgroup=65534 [Nobody] it will allow the container to read the token. spec : securityContext : fsGroup : 65534 In Kubernetes 1.19 and above, this change is no longer required.","title":"Run the application as a non-root user"},{"location":"security/docs/iam/#grant-least-privileged-access-to-applications","text":"Action Hero is a utility that you can run alongside your application to identify the AWS API calls and corresponding IAM permissions your application needs to function properly. It is similar to IAM Access Advisor in that it helps you gradually limit the scope of IAM roles assigned to applications. Consult the documentation on granting least privileged access to AWS resources for further information.","title":"Grant least privileged access to applications"},{"location":"security/docs/iam/#alternative-approaches","text":"While IRSA is the preferred way to assign an AWS \"identity\" to a pod, it requires that you include recent version of the AWS SDKs in your application. For a complete listing of the SDKs that currently support IRSA, see https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts-minimum-sdk.html . If you have an application that you can't immediately update with a IRSA-compatible SDK, there are several community-built solutions available for assigning IAM roles to Kubernetes pods, including kube2iam and kiam . Although AWS doesn't endorse or condone the use of these solutions, they are frequently used by the community at large to achieve similar results as IRSA.","title":"Alternative approaches"},{"location":"security/docs/image/","text":"Image security \u00b6 You should consider the container image as your first line of defense against an attack. An insecure, poorly constructed image can allow an attacker to escape the bounds of the container and gain access to the host. Once on the host, an attacker can gain access to sensitive information or move laterally within the cluster or with your AWS account. The following best practices will help mitigate risk of this happening. Recommendations \u00b6 Create minimal images \u00b6 Start by removing all extraneous binaries from the container image. If you\u2019re using an unfamiliar image from Dockerhub, inspect the image using an application like Dive which can show you the contents of each of the container\u2019s layers. Remove all binaries with the SETUID and SETGID bits as they can be used to escalate privilege and consider removing all shells and utilities like nc and curl that can be used for nefarious purposes. You can find the files with SETUID and SETGID bits with the following command: find / -perm /6000 -type f -exec ls -ld {} \\; To remove the special permissions from these files, add the following directive to your container image: RUN find / -xdev -perm /6000 -type f -exec chmod a-s {} \\; || true Colloquially, this is known as de-fanging your image. Use multi-stage builds \u00b6 Using multi-stage builds is a way to create minimal images. Oftentimes, multi-stage builds are used to automate parts of the Continuous Integration cycle. For example, multi-stage builds can be used to lint your source code or perform static code analysis. This affords developers an opportunity to get near immediate feedback instead of waiting for a pipeline to execute. Multi-stage builds are attractive from a security standpoint because they allow you to minimize the size of the final image pushed to your container registry. Container images devoid of build tools and other extraneous binaries improves your security posture by reducing the attack surface of the image. For additional information about multi-stage builds, see https://docs.docker.com/develop/develop-images/multistage-build/ . Scan images for vulnerabilities regularly \u00b6 Like their virtual machine counterparts, container images can contain binaries and application libraries with vulnerabilities or develop vulnerabilities over time. The best way to safeguard against exploits is by regularly scanning your images with an image scanner. Images that are stored in Amazon ECR can be scanned on push or on-demand (once during a 24 hour period). ECR currently leverages Clair an open source image scanning solution. After an image is scanned, the results are logged to the event stream for ECR in EventBridge. You can also see the results of a scan from within the ECR console. Images with a HIGH or CRITICAL vulnerability should be deleted or rebuilt. If an image that has been deployed develops a vulnerability, it should be replaced as soon as possible. Knowing where images with vulnerabilities have been deployed is essential to keeping your environment secure. While you could conceivably build an image tracking solution yourself, there are already several commercial offerings that provide this and other advanced capabilities out of the box, including: Anchore Palo Alto - Prisma Cloud (twistcli) Aqua Kubei Trivy Snyk A Kubernetes validation webhook could also be used to validate that images are free of critical vulnerabilities. Validation webhooks are invoked prior to the Kubernetes API. They are typically used to reject requests that don't comply with the validation criteria defined in the webhook. This is an example of a serverless webhook that calls the ECR describeImageScanFindings API to determine whether a pod is pulling an image with critical vulnerabilities. If vulnerabilities are found, the pod is rejected and a message with list of CVEs is returned as an Event. Create IAM policies for ECR repositories \u00b6 Nowadays, it is not uncommon for an organization to have multiple development teams operating independently within a shared AWS account. If these teams don't need to share assets, you may want to create a set of IAM policies that restrict access to the repositories each team can interact with. A good way to implement this is by using ECR namespaces . Namespaces are a way to group similar repositories together. For example, all of the registries for team A can be prefaced with the team-a/ while those for team B can use the team-b/ prefix. The policy to restrict access might look like the following: { \"Version\" : \"2012-10-17\" , \"Statement\" : [{ \"Sid\" : \"AllowPushPull\" , \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"arn:aws:iam::123456789012:role/<team_a_role_name>\" }, \"Action\" : [ \"ecr:GetDownloadUrlForLayer\" , \"ecr:BatchGetImage\" , \"ecr:BatchCheckLayerAvailability\" , \"ecr:PutImage\" , \"ecr:InitiateLayerUpload\" , \"ecr:UploadLayerPart\" , \"ecr:CompleteLayerUpload\" ], \"Resource\" : [ \"arn:aws:ecr:region:123456789012:repository/team-a/*\" ] }] } Consider using ECR private endpoints \u00b6 The ECR API has a public endpoint. Consequently, ECR registries can be accessed from the Internet so long as the request has been authenticated and authorized by IAM. For those who need to operate in a sandboxed environment where the cluster VPC lacks an Internet Gateway (IGW), you can configure a private endpoint for ECR. Creating a private endpoint enables you to privately access the ECR API through a private IP address instead of routing traffic across the Internet. For additional information on this topic, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html. Implement endpoint policies for ECR \u00b6 The default endpoint policy for allows access to all ECR repositories within a region. This might allow an attacker/insider to exfiltrate data by packaging it as a container image and pushing it to a registry in another AWS account. Mitigating this risk involves creating an endpoint policy that limits API access to ECR respositories. For example, the following policy allows all AWS principles in your account to perform all actions against your and only your ECR repositories: { \"Statement\" : [{ \"Sid\" : \"LimitECRAccess\" , \"Principal\" : \"*\" , \"Action\" : \"*\" , \"Effect\" : \"Allow\" , \"Resource\" : \"arn:aws:ecr:region:<your_account_id>:repository/*\" }, ] } You can enhance this further by setting a condition that uses the new PrincipalOrgID attribute which will prevent pushing/pulling of images by an IAM principle that is not part of your AWS Organization. See, aws:PrincipalOrgID for additional details. We recommended applying the same policy to both the com.amazonaws.<region>.ecr.dkr and the com.amazonaws.<region>.ecr.api endpoints. Since EKS pulls images for kube-proxy, coredns, and aws-node from ECR, you will need to add the account ID of the registry, e.g. 602401143452.dkr.ecr.us-west-2.amazonaws.com/* to the list of resources in the endpoint policy or alter the policy to allow pulls from \"*\" and restrict pushes to your account ID. The table below reveals the mapping between the AWS accounts where EKS images are vended from and cluster region. Account Number Region 602401143452 All commercial regions except for those listed below 800184023465 HKG 558608220178 BAH 918309763551 BJS 961992271922 ZHY For further information about using endpoint policies, see Using VPC endpoint policies to control Amazon ECR access . Create a set of curated images \u00b6 Rather than allowing developers to create their own images, consider creating a set of vetted images for the different application stacks in your organization. By doing so, developers can forego learning how to compose Dockerfiles and concentrate on writing code. As changes are merged into Master, a CI/CD pipeline can automatically compile the asset, store it in an artifact repository and copy the artifact into the appropriate image before pushing it to a Docker registry like ECR. At the very least you should create a set of base images from which developers to create their own Dockerfiles. Ideally, you want to avoid pulling images from Dockerhub because a) you don't always know what is in the image and b) about a fifth of the top 1000 images have vulnerabilties. A list of those images and their vulnerabilities can be found at https://vulnerablecontainers.org/. Add the USER directive to your Dockerfiles to run as a non-root user \u00b6 As was mentioned in the pod security section, you should avoid running container as root. While you can configure this as part of the podSpec, it is a good habit to use the USER directive to your Dockerfiles. The USER directive sets the UID to use when running RUN , ENTRYPOINT , or CMD instruction that appears after the USER directive. Lint your Dockerfiles \u00b6 Linting can be used to verify that your Dockerfiles are adhering to a set of predefined guidelines, e.g. the inclusion of the USER directive or the requirement that all images be tagged. dockerfile_lint is an open source project from RedHat that verifies common best practices and includes a rule engine that you can use to build your own rules for linting Dockerfiles. It can be incorporated into a CI pipeline, in that builds with Dockerfiles that violate a rule will automatically fail. Build images from Scratch \u00b6 Reducing the attack surface of your container images should be primary aim when building images. The ideal way to do this is by creating minimal images that are devoid of binaries that can be used to exploit vulnerabilities. Fortunately, Docker has a mechanism to create images from scratch . With langages like Go, you can create a static linked binary and reference it in your Dockerfile as in this example: ############################ # STEP 1 build executable binary ############################ FROM golang:alpine AS builder # Install git. # Git is required for fetching the dependencies. RUN apk update && apk add --no-cache git WORKDIR $GOPATH/src/mypackage/myapp/ COPY . . # Fetch dependencies. # Using go get. RUN go get -d -v # Build the binary. RUN go build -o /go/bin/hello ############################ # STEP 2 build a small image ############################ FROM scratch # Copy our static executable. COPY --from = builder /go/bin/hello /go/bin/hello # Run the hello binary. ENTRYPOINT [ \"/go/bin/hello\" ] This creates a container image that consists of your application and nothing else, making it extremely secure. Use immutable tags with ECR \u00b6 Immutable tags force you to update the image tag on each push to the image repository. This can thwart an attacker from overwriting an image with a malicious version without changing the image's tags. Additionally, it gives you a way to easily and uniquely identify an image. Sign your images \u00b6 When Docker was first introduced, there was no cryptographic model for verifying container images. With v2, Docker added digests to the image manifest. This allowed an image\u2019s configuration to be hashed and for the hash to be used to generate an ID for the image. When image signing is enabled, the [Docker] engine verifies the manifest\u2019s signature, ensuring that the content was produced from a trusted source and no tampering has occurred. After each layer is downloaded, the engine verifies the digest of the layer, ensuring that the content matches the content specified in the manifest. Image signing effectively allows you to create a secure supply chain, through the verification of digital signatures associated with the image. In a Kubernetes environment, you can use a dynamic admission controller to verify that an image has been signed, as in these examples: https://github.com/IBM/portieris and https://github.com/kelseyhightower/grafeas-tutorial. By signing your images, you're verifying the publisher (source) ensuring that the image hasn't been tampered with (integrity). Note ECR intends to support image signing in the future. The issue is being tracked on the container roadmap. Update the packages in your container images \u00b6 You should include RUN apt-get upgrade in your Dockerfiles to upgrade the packages in your images. Although upgrading requires you to run as root, this occurs during image build phase. The application doesn't need to run as root. You can install the updates and then switch to a different user with the USER directive. If your base image runs as a non-root user, switch to root and back; don't solely rely on the maintainers of the base image to install the latest security udpates. Configure your images with read-only root file system \u00b6 Configuring your images with a read-only root file system prevents an attacker from overwriting a binary on the file system that your application uses. If your application has to write to the file system, consider writing to a temporary directory or attach and mount a volume. You can enforce this by setting the a pod's SecurityContext as follows: ... securityContext : readOnlyRootFilesystem : true ... Tools \u00b6 Bane An AppArmor profile generator for Docker containers docker-slim Build secure minimal images dockerfile-lint Rule based linter for Dockerfiles hadolint A smart dockerfile linter Gatekeeper and OPA A policy based admission controller in-toto Allows the user to verify if a step in the supply chain was intended to be performed, and if the step was performed by the right actor Notary A project for signing container images Grafeas An open artifact metadata API to audit and govern your software supply chain","title":"Image Security"},{"location":"security/docs/image/#image-security","text":"You should consider the container image as your first line of defense against an attack. An insecure, poorly constructed image can allow an attacker to escape the bounds of the container and gain access to the host. Once on the host, an attacker can gain access to sensitive information or move laterally within the cluster or with your AWS account. The following best practices will help mitigate risk of this happening.","title":"Image security"},{"location":"security/docs/image/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/image/#create-minimal-images","text":"Start by removing all extraneous binaries from the container image. If you\u2019re using an unfamiliar image from Dockerhub, inspect the image using an application like Dive which can show you the contents of each of the container\u2019s layers. Remove all binaries with the SETUID and SETGID bits as they can be used to escalate privilege and consider removing all shells and utilities like nc and curl that can be used for nefarious purposes. You can find the files with SETUID and SETGID bits with the following command: find / -perm /6000 -type f -exec ls -ld {} \\; To remove the special permissions from these files, add the following directive to your container image: RUN find / -xdev -perm /6000 -type f -exec chmod a-s {} \\; || true Colloquially, this is known as de-fanging your image.","title":"Create minimal images"},{"location":"security/docs/image/#use-multi-stage-builds","text":"Using multi-stage builds is a way to create minimal images. Oftentimes, multi-stage builds are used to automate parts of the Continuous Integration cycle. For example, multi-stage builds can be used to lint your source code or perform static code analysis. This affords developers an opportunity to get near immediate feedback instead of waiting for a pipeline to execute. Multi-stage builds are attractive from a security standpoint because they allow you to minimize the size of the final image pushed to your container registry. Container images devoid of build tools and other extraneous binaries improves your security posture by reducing the attack surface of the image. For additional information about multi-stage builds, see https://docs.docker.com/develop/develop-images/multistage-build/ .","title":"Use multi-stage builds"},{"location":"security/docs/image/#scan-images-for-vulnerabilities-regularly","text":"Like their virtual machine counterparts, container images can contain binaries and application libraries with vulnerabilities or develop vulnerabilities over time. The best way to safeguard against exploits is by regularly scanning your images with an image scanner. Images that are stored in Amazon ECR can be scanned on push or on-demand (once during a 24 hour period). ECR currently leverages Clair an open source image scanning solution. After an image is scanned, the results are logged to the event stream for ECR in EventBridge. You can also see the results of a scan from within the ECR console. Images with a HIGH or CRITICAL vulnerability should be deleted or rebuilt. If an image that has been deployed develops a vulnerability, it should be replaced as soon as possible. Knowing where images with vulnerabilities have been deployed is essential to keeping your environment secure. While you could conceivably build an image tracking solution yourself, there are already several commercial offerings that provide this and other advanced capabilities out of the box, including: Anchore Palo Alto - Prisma Cloud (twistcli) Aqua Kubei Trivy Snyk A Kubernetes validation webhook could also be used to validate that images are free of critical vulnerabilities. Validation webhooks are invoked prior to the Kubernetes API. They are typically used to reject requests that don't comply with the validation criteria defined in the webhook. This is an example of a serverless webhook that calls the ECR describeImageScanFindings API to determine whether a pod is pulling an image with critical vulnerabilities. If vulnerabilities are found, the pod is rejected and a message with list of CVEs is returned as an Event.","title":"Scan images for vulnerabilities regularly"},{"location":"security/docs/image/#create-iam-policies-for-ecr-repositories","text":"Nowadays, it is not uncommon for an organization to have multiple development teams operating independently within a shared AWS account. If these teams don't need to share assets, you may want to create a set of IAM policies that restrict access to the repositories each team can interact with. A good way to implement this is by using ECR namespaces . Namespaces are a way to group similar repositories together. For example, all of the registries for team A can be prefaced with the team-a/ while those for team B can use the team-b/ prefix. The policy to restrict access might look like the following: { \"Version\" : \"2012-10-17\" , \"Statement\" : [{ \"Sid\" : \"AllowPushPull\" , \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"arn:aws:iam::123456789012:role/<team_a_role_name>\" }, \"Action\" : [ \"ecr:GetDownloadUrlForLayer\" , \"ecr:BatchGetImage\" , \"ecr:BatchCheckLayerAvailability\" , \"ecr:PutImage\" , \"ecr:InitiateLayerUpload\" , \"ecr:UploadLayerPart\" , \"ecr:CompleteLayerUpload\" ], \"Resource\" : [ \"arn:aws:ecr:region:123456789012:repository/team-a/*\" ] }] }","title":"Create IAM policies for ECR repositories"},{"location":"security/docs/image/#consider-using-ecr-private-endpoints","text":"The ECR API has a public endpoint. Consequently, ECR registries can be accessed from the Internet so long as the request has been authenticated and authorized by IAM. For those who need to operate in a sandboxed environment where the cluster VPC lacks an Internet Gateway (IGW), you can configure a private endpoint for ECR. Creating a private endpoint enables you to privately access the ECR API through a private IP address instead of routing traffic across the Internet. For additional information on this topic, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html.","title":"Consider using ECR private endpoints"},{"location":"security/docs/image/#implement-endpoint-policies-for-ecr","text":"The default endpoint policy for allows access to all ECR repositories within a region. This might allow an attacker/insider to exfiltrate data by packaging it as a container image and pushing it to a registry in another AWS account. Mitigating this risk involves creating an endpoint policy that limits API access to ECR respositories. For example, the following policy allows all AWS principles in your account to perform all actions against your and only your ECR repositories: { \"Statement\" : [{ \"Sid\" : \"LimitECRAccess\" , \"Principal\" : \"*\" , \"Action\" : \"*\" , \"Effect\" : \"Allow\" , \"Resource\" : \"arn:aws:ecr:region:<your_account_id>:repository/*\" }, ] } You can enhance this further by setting a condition that uses the new PrincipalOrgID attribute which will prevent pushing/pulling of images by an IAM principle that is not part of your AWS Organization. See, aws:PrincipalOrgID for additional details. We recommended applying the same policy to both the com.amazonaws.<region>.ecr.dkr and the com.amazonaws.<region>.ecr.api endpoints. Since EKS pulls images for kube-proxy, coredns, and aws-node from ECR, you will need to add the account ID of the registry, e.g. 602401143452.dkr.ecr.us-west-2.amazonaws.com/* to the list of resources in the endpoint policy or alter the policy to allow pulls from \"*\" and restrict pushes to your account ID. The table below reveals the mapping between the AWS accounts where EKS images are vended from and cluster region. Account Number Region 602401143452 All commercial regions except for those listed below 800184023465 HKG 558608220178 BAH 918309763551 BJS 961992271922 ZHY For further information about using endpoint policies, see Using VPC endpoint policies to control Amazon ECR access .","title":"Implement endpoint policies for ECR"},{"location":"security/docs/image/#create-a-set-of-curated-images","text":"Rather than allowing developers to create their own images, consider creating a set of vetted images for the different application stacks in your organization. By doing so, developers can forego learning how to compose Dockerfiles and concentrate on writing code. As changes are merged into Master, a CI/CD pipeline can automatically compile the asset, store it in an artifact repository and copy the artifact into the appropriate image before pushing it to a Docker registry like ECR. At the very least you should create a set of base images from which developers to create their own Dockerfiles. Ideally, you want to avoid pulling images from Dockerhub because a) you don't always know what is in the image and b) about a fifth of the top 1000 images have vulnerabilties. A list of those images and their vulnerabilities can be found at https://vulnerablecontainers.org/.","title":"Create a set of curated images"},{"location":"security/docs/image/#add-the-user-directive-to-your-dockerfiles-to-run-as-a-non-root-user","text":"As was mentioned in the pod security section, you should avoid running container as root. While you can configure this as part of the podSpec, it is a good habit to use the USER directive to your Dockerfiles. The USER directive sets the UID to use when running RUN , ENTRYPOINT , or CMD instruction that appears after the USER directive.","title":"Add the USER directive to your Dockerfiles to run as a non-root user"},{"location":"security/docs/image/#lint-your-dockerfiles","text":"Linting can be used to verify that your Dockerfiles are adhering to a set of predefined guidelines, e.g. the inclusion of the USER directive or the requirement that all images be tagged. dockerfile_lint is an open source project from RedHat that verifies common best practices and includes a rule engine that you can use to build your own rules for linting Dockerfiles. It can be incorporated into a CI pipeline, in that builds with Dockerfiles that violate a rule will automatically fail.","title":"Lint your Dockerfiles"},{"location":"security/docs/image/#build-images-from-scratch","text":"Reducing the attack surface of your container images should be primary aim when building images. The ideal way to do this is by creating minimal images that are devoid of binaries that can be used to exploit vulnerabilities. Fortunately, Docker has a mechanism to create images from scratch . With langages like Go, you can create a static linked binary and reference it in your Dockerfile as in this example: ############################ # STEP 1 build executable binary ############################ FROM golang:alpine AS builder # Install git. # Git is required for fetching the dependencies. RUN apk update && apk add --no-cache git WORKDIR $GOPATH/src/mypackage/myapp/ COPY . . # Fetch dependencies. # Using go get. RUN go get -d -v # Build the binary. RUN go build -o /go/bin/hello ############################ # STEP 2 build a small image ############################ FROM scratch # Copy our static executable. COPY --from = builder /go/bin/hello /go/bin/hello # Run the hello binary. ENTRYPOINT [ \"/go/bin/hello\" ] This creates a container image that consists of your application and nothing else, making it extremely secure.","title":"Build images from Scratch"},{"location":"security/docs/image/#use-immutable-tags-with-ecr","text":"Immutable tags force you to update the image tag on each push to the image repository. This can thwart an attacker from overwriting an image with a malicious version without changing the image's tags. Additionally, it gives you a way to easily and uniquely identify an image.","title":"Use immutable tags with ECR"},{"location":"security/docs/image/#sign-your-images","text":"When Docker was first introduced, there was no cryptographic model for verifying container images. With v2, Docker added digests to the image manifest. This allowed an image\u2019s configuration to be hashed and for the hash to be used to generate an ID for the image. When image signing is enabled, the [Docker] engine verifies the manifest\u2019s signature, ensuring that the content was produced from a trusted source and no tampering has occurred. After each layer is downloaded, the engine verifies the digest of the layer, ensuring that the content matches the content specified in the manifest. Image signing effectively allows you to create a secure supply chain, through the verification of digital signatures associated with the image. In a Kubernetes environment, you can use a dynamic admission controller to verify that an image has been signed, as in these examples: https://github.com/IBM/portieris and https://github.com/kelseyhightower/grafeas-tutorial. By signing your images, you're verifying the publisher (source) ensuring that the image hasn't been tampered with (integrity). Note ECR intends to support image signing in the future. The issue is being tracked on the container roadmap.","title":"Sign your images"},{"location":"security/docs/image/#update-the-packages-in-your-container-images","text":"You should include RUN apt-get upgrade in your Dockerfiles to upgrade the packages in your images. Although upgrading requires you to run as root, this occurs during image build phase. The application doesn't need to run as root. You can install the updates and then switch to a different user with the USER directive. If your base image runs as a non-root user, switch to root and back; don't solely rely on the maintainers of the base image to install the latest security udpates.","title":"Update the packages in your container images"},{"location":"security/docs/image/#configure-your-images-with-read-only-root-file-system","text":"Configuring your images with a read-only root file system prevents an attacker from overwriting a binary on the file system that your application uses. If your application has to write to the file system, consider writing to a temporary directory or attach and mount a volume. You can enforce this by setting the a pod's SecurityContext as follows: ... securityContext : readOnlyRootFilesystem : true ...","title":"Configure your images with read-only root file system"},{"location":"security/docs/image/#tools","text":"Bane An AppArmor profile generator for Docker containers docker-slim Build secure minimal images dockerfile-lint Rule based linter for Dockerfiles hadolint A smart dockerfile linter Gatekeeper and OPA A policy based admission controller in-toto Allows the user to verify if a step in the supply chain was intended to be performed, and if the step was performed by the right actor Notary A project for signing container images Grafeas An open artifact metadata API to audit and govern your software supply chain","title":"Tools"},{"location":"security/docs/incidents/","text":"Incident response and forensics \u00b6 Your ability to react quickly to an incident can help minimize damage caused from a breach. Having a reliable alerting system that can warn you of suspicious behavior is the first step in a good incident response plan. When an incident does arise, you have to quickly decide whether to destroy and replace the effected container, or isolate and inspect the container. If you choose to isolate the container as part of a forensic investigation and root cause analysis, then the following set of activities should be followed: Sample incident response plan \u00b6 Identify the offending Pod and worker node \u00b6 Your first course of action should be to isolate the damage. Start by identifying where the breach occurred and isolate that Pod and its node from the rest of the infrastructure. Isolate the Pod by creating a Network Policy that denies all ingress and egress traffic to the pod \u00b6 A deny all traffic rule may help stop an attack that is already underway by severing all connections to the pod. The following Network Policy will apply to a pod with the label app=web . apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : default-deny spec : podSelector : matchLabels : app : web policyTypes : - Ingress - Egress Attention A Network Policy may prove ineffective if an attacker has gained access to underlying host. If you suspect that has happened, you can use AWS Security Groups to isolate a compromised host from other hosts. When changing a host's security group, be aware that it will impact all containers running on that host. Revoke temporary security credentials assigned to the pod or worker node if necessary \u00b6 If the worker node has been assigned an IAM role that allows Pods to gain access to other AWS resources, remove those roles from the instance to prevent further damage from the attack. Similarly, if the Pod has been assigned an IAM role, evaluate whether you can safely remove the IAM policies from the role without impacting other workloads. Cordon the worker node \u00b6 By cordoning the impacted worker node, you're informing the scheduler to avoid scheduling pods onto the affected node. This will allow you to remove the node for forensic study without disrupting other workloads. Info This guidance is not applicable to Fargate where each Fargate pod run in its own sandboxed environment. Instead of cordoning, sequester the affected Fargate pods by applying a network policy that denies all ingress and egress traffic. Enable termination protection on impacted worker node \u00b6 An attacker may attempt to erase their misdeeds by terminating an affected node. Enabling termination protection can prevent this from happening. Instance scale-in protection will protect the node from a scale-in event. Warning You cannot enable termination protection on a Spot instance. Label the offending Pod/Node with a label indicating that it is part of an active investigation \u00b6 This will serve as a warning to cluster administrators not to tamper with the affected Pods/Nodes until the investigation is complete. Capture volatile artifacts on the worker node \u00b6 Capture the operating system memory . This will capture the Docker daemon and its subprocess per container. MargaritaShotgun , a remote memory acquisition tool, can aid in this effort. Perform a netstat tree dump of the processes running and the open ports . This will capture the docker daemon and its subprocess per container. Run docker commands before evidence is altered on the worker node . docker container top CONTAINER for processes running. docker container logs CONTAINER for daemon level held logs. docker container port CONTAINER for list of open ports. docker container diff CONTAINER to capture changes to files and directories to container's filesystem since its initial launch. Pause the container for forensic capture . Snapshot the instance's EBS volumes . Recommendations \u00b6 Review the AWS Security Incident Response Whitepaper \u00b6 While this section gives a brief overview along with a few recommendations for handling suspected security breaches, the topic is exhaustively covered in the white paper, AWS Security Incident Response . Practice security game days \u00b6 Divide your security practitioners into 2 teams: red and blue. The red team will be focused on probing different systems for vulnerabilities while the blue team will be responsible for defending against them. If you don't have enough security practitioners to create separate teams, consider hiring an outside entity that has knowledge of Kubernetes exploits. Kubesploit is a penetration testing framework from CyberArk that you can use to conduct game days. Unlike other tools which scan your cluster for vulnerabilities, kubesploit simulates a real-world attack. This gives your blue team an opportunity to practice its response to an attack and gauge its effectiveness. Run penetration tests against your cluster \u00b6 Periodically attacking your own cluster can help you discover vulnerabilities and misconfigurations. Before getting started, follow the penetration test guidelines before conducting a test against your cluster. Tools \u00b6 kube-hunter , a penetration testing tool for Kubernetes. Gremlin , a chaos engineering toolkit that you can use to simulate attacks against your applications and infrastructure. kube-forensics , a Kubernetes controller that triggers a job that collects the state of a running pod and dumps it in an S3 bucket. Attacking and Defending Kubernetes Installations kubesploit Videos \u00b6 Advanced Persistent Threats Kubernetes Practical Attack and Defense Compromising Kubernetes Cluster by Exploiting RBAC Permissions","title":"Incident Response and Forensics"},{"location":"security/docs/incidents/#incident-response-and-forensics","text":"Your ability to react quickly to an incident can help minimize damage caused from a breach. Having a reliable alerting system that can warn you of suspicious behavior is the first step in a good incident response plan. When an incident does arise, you have to quickly decide whether to destroy and replace the effected container, or isolate and inspect the container. If you choose to isolate the container as part of a forensic investigation and root cause analysis, then the following set of activities should be followed:","title":"Incident response and forensics"},{"location":"security/docs/incidents/#sample-incident-response-plan","text":"","title":"Sample incident response plan"},{"location":"security/docs/incidents/#identify-the-offending-pod-and-worker-node","text":"Your first course of action should be to isolate the damage. Start by identifying where the breach occurred and isolate that Pod and its node from the rest of the infrastructure.","title":"Identify the offending Pod and worker node"},{"location":"security/docs/incidents/#isolate-the-pod-by-creating-a-network-policy-that-denies-all-ingress-and-egress-traffic-to-the-pod","text":"A deny all traffic rule may help stop an attack that is already underway by severing all connections to the pod. The following Network Policy will apply to a pod with the label app=web . apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : default-deny spec : podSelector : matchLabels : app : web policyTypes : - Ingress - Egress Attention A Network Policy may prove ineffective if an attacker has gained access to underlying host. If you suspect that has happened, you can use AWS Security Groups to isolate a compromised host from other hosts. When changing a host's security group, be aware that it will impact all containers running on that host.","title":"Isolate the Pod by creating a Network Policy that denies all ingress and egress traffic to the pod"},{"location":"security/docs/incidents/#revoke-temporary-security-credentials-assigned-to-the-pod-or-worker-node-if-necessary","text":"If the worker node has been assigned an IAM role that allows Pods to gain access to other AWS resources, remove those roles from the instance to prevent further damage from the attack. Similarly, if the Pod has been assigned an IAM role, evaluate whether you can safely remove the IAM policies from the role without impacting other workloads.","title":"Revoke temporary security credentials assigned to the pod or worker node if necessary"},{"location":"security/docs/incidents/#cordon-the-worker-node","text":"By cordoning the impacted worker node, you're informing the scheduler to avoid scheduling pods onto the affected node. This will allow you to remove the node for forensic study without disrupting other workloads. Info This guidance is not applicable to Fargate where each Fargate pod run in its own sandboxed environment. Instead of cordoning, sequester the affected Fargate pods by applying a network policy that denies all ingress and egress traffic.","title":"Cordon the worker node"},{"location":"security/docs/incidents/#enable-termination-protection-on-impacted-worker-node","text":"An attacker may attempt to erase their misdeeds by terminating an affected node. Enabling termination protection can prevent this from happening. Instance scale-in protection will protect the node from a scale-in event. Warning You cannot enable termination protection on a Spot instance.","title":"Enable termination protection on impacted worker node"},{"location":"security/docs/incidents/#label-the-offending-podnode-with-a-label-indicating-that-it-is-part-of-an-active-investigation","text":"This will serve as a warning to cluster administrators not to tamper with the affected Pods/Nodes until the investigation is complete.","title":"Label the offending Pod/Node with a label indicating that it is part of an active investigation"},{"location":"security/docs/incidents/#capture-volatile-artifacts-on-the-worker-node","text":"Capture the operating system memory . This will capture the Docker daemon and its subprocess per container. MargaritaShotgun , a remote memory acquisition tool, can aid in this effort. Perform a netstat tree dump of the processes running and the open ports . This will capture the docker daemon and its subprocess per container. Run docker commands before evidence is altered on the worker node . docker container top CONTAINER for processes running. docker container logs CONTAINER for daemon level held logs. docker container port CONTAINER for list of open ports. docker container diff CONTAINER to capture changes to files and directories to container's filesystem since its initial launch. Pause the container for forensic capture . Snapshot the instance's EBS volumes .","title":"Capture volatile artifacts on the worker node"},{"location":"security/docs/incidents/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/incidents/#review-the-aws-security-incident-response-whitepaper","text":"While this section gives a brief overview along with a few recommendations for handling suspected security breaches, the topic is exhaustively covered in the white paper, AWS Security Incident Response .","title":"Review the AWS Security Incident Response Whitepaper"},{"location":"security/docs/incidents/#practice-security-game-days","text":"Divide your security practitioners into 2 teams: red and blue. The red team will be focused on probing different systems for vulnerabilities while the blue team will be responsible for defending against them. If you don't have enough security practitioners to create separate teams, consider hiring an outside entity that has knowledge of Kubernetes exploits. Kubesploit is a penetration testing framework from CyberArk that you can use to conduct game days. Unlike other tools which scan your cluster for vulnerabilities, kubesploit simulates a real-world attack. This gives your blue team an opportunity to practice its response to an attack and gauge its effectiveness.","title":"Practice security game days"},{"location":"security/docs/incidents/#run-penetration-tests-against-your-cluster","text":"Periodically attacking your own cluster can help you discover vulnerabilities and misconfigurations. Before getting started, follow the penetration test guidelines before conducting a test against your cluster.","title":"Run penetration tests against your cluster"},{"location":"security/docs/incidents/#tools","text":"kube-hunter , a penetration testing tool for Kubernetes. Gremlin , a chaos engineering toolkit that you can use to simulate attacks against your applications and infrastructure. kube-forensics , a Kubernetes controller that triggers a job that collects the state of a running pod and dumps it in an S3 bucket. Attacking and Defending Kubernetes Installations kubesploit","title":"Tools"},{"location":"security/docs/incidents/#videos","text":"Advanced Persistent Threats Kubernetes Practical Attack and Defense Compromising Kubernetes Cluster by Exploiting RBAC Permissions","title":"Videos"},{"location":"security/docs/multitenancy/","text":"Tenant Isolation \u00b6 When we think of multi-tenancy, we often want to isolate a user or application from other users or applications running on a shared infrastructure. Kubernetes is a single tenant orchestrator , i.e. a single instance of the control plane is shared among all the tenants within a cluster. There are, however, various Kubernetes objects that you can use to create the semblance of multi-tenancy. For example, Namespaces and Role-based access controls (RBAC) can be implemented to logically isolate tenants from each other. Similarly, Quotas and Limit Ranges can be used to control the amount of cluster resources each tenant can consume. Nevertheless, the cluster is the only construct that provides a strong security boundary. This is because an attacker that manages to gain access to a host within the cluster can retrieve all Secrets, ConfigMaps, and Volumes, mounted on that host. They could also impersonate the Kubelet which would allow them to manipulate the attributes of the node and/or move laterally within the cluster. The following sections will explain how to implement tenant isolation while mitigating the risks of using a single tenant orchestrator like Kubernetes. Soft multi-tenancy \u00b6 With soft multi-tenancy, you use native Kubernetes constructs, e.g. namespaces, roles and role bindings, and network policies, to create logical separation between tenants. RBAC, for example, can prevent tenants from accessing or manipulate each other's resources. Quotas and limit ranges control the amount of cluster resources each tenant can consume while network policies can help prevent applications deployed into different namespaces from communicating with each other. None of these controls, however, prevent pods from different tenants from sharing a node. If stronger isolation is required, you can use a node selector, anti-affinity rules, and/or taints and tolerations to force pods from different tenants to be scheduled onto separate nodes; often referred to as sole tenant nodes . This could get rather complicated, and cost prohibitive, in an environment with many tenants. Attention Soft multi-tenancy implemented with Namespaces does not allow you to provide tenants with a filtered list of Namespaces because Namespaces are a globaly scoped Type. If a tenant has the ability to view a particular Namespace, it can view all Namespaces within the cluster. Warning With soft-multi-tenancy, tenants retain the ability to query CoreDNS for all services that run within the cluster by default. An attacker could exploit this by running dig SRV . .svc.cluster.local from any pod in the cluster. If you need to restrict access to DNS records of services that run within your clusters, consider using the Firewall or Policy plugins for CoreDNS. For additional information, see https://github.com/coredns/policy#kubernetes-metadata-multi-tenancy-policy . Kiosk is an open source project that can aid in the implementation of soft multi-tenancy. It is implemented as a series of CRDs and controllers that provide the following capabilities: Accounts & Account Users to separate tenants in a shared Kubernetes cluster Self-Service Namespace Provisioning for account users Account Limits to ensure quality of service and fairness when sharing a cluster Namespace Templates for secure tenant isolation and self-service namespace initialization Loft is a commerical offering from the maintainers of Kiosk and DevSpace that adds the following capabilities: Mutli-cluster access for granting access to spaces in different clusters Sleep mode scales down deployments in a space during periods of inactivity Single sign-on with OIDC authentication providers like GitHub There are three primary use cases that can be addressed by soft multi-tenancy. Enterprise Setting \u00b6 The first is in an Enterprise setting where the \"tenants\" are semi-trusted in that they are employees, contractors, or are otherwise authorized by the organization. Each tenant will typically align to an administrative division such as a department or team. In this type of setting, a cluster administrator will usually be responsible for creating namespaces and managing policies. They may also implement a delegated adminstration model where certain individuals are given oversight of a namespace, allowing them to perform CRUD operations for non-policy related objects like deployments, services, pods, jobs, etc. The isolation provided by Docker may be acceptable within this setting or it may need to be augmented with additional controls such as Pod Security Policies (PSPs). It may also be necessary to restrict communication between services in different namespaces if stricter isolation is required. Kubernetes as a Service \u00b6 By constrast, soft multi-tenancy can be used in settings where you want to offer Kubernetes as a service (KaaS). With KaaS, your application is hosted in a shared cluster along with a collection of controllers and CRDs that provide a set of PaaS services. Tenants interact directly with the Kubernetes API server and are permitted to perform CRUD operations on non-policy objects. There is also an element of self-service in that tenants may be allowed to create and manage their own namespaces. In this type of environment, tenants are assumed to be running untrusted code. To isolate tenants in this type of environment, you will likely need to implement strict network policies as well as pod sandboxing . Sandboxing is where you run the containers of a pod inside a micro VM like Firecracker or in a user-space kernel. Today, you can create sandboxed pods with EKS Fargate. Software as a Service (SaaS) \u00b6 The final use case for soft multi-tenancy is in a Software-as-a-Service (SaaS) setting. In this environment, each tenant is associated with a particular instance of an application that's running within the cluster. Each instance often has its own data and uses separate access controls that are usually independent of Kubernetes RBAC. Unlike the other use cases, the tenant in a SaaS setting does not directly interface with the Kubernetes API. Instead, the SaaS application is responsible for interfacing with the Kubernetes API to create the necessary objects to support each tenant. Kubernetes Constructs \u00b6 In each of these instances the following constructs are used to isolate tenants from each other: Namespaces \u00b6 Namespaces are fundamental to implementing soft multi-tenancy. They allow you to divide the cluster into logical partitions. Quotas, network policies, service accounts, and other objects needed to implement multi-tenancy are scoped to a namespace. Network policies \u00b6 By default, all pods in a Kubernetes cluster are allowed to communicate with each other. This behavior can be altered using network policies. Network policies restrict communication between pods using labels or IP address ranges. In a multi-tenant environment where strict network isolation between tenants is required, we recommend starting with a default rule that denies communication between pods, and another rule that allows all pods to query the DNS server for name resolution. With that in place, you can begin adding more permissive rules that allow for communication within a namespace. This can be further refined as required. Attention Network policies are necessary but not sufficient. The enforcement of network policies requires a policy engine such as Calico or Cilium. Role-based access control (RBAC) \u00b6 Roles and role bindings are the Kubernetes objects used to enforce role-based access control (RBAC) in Kubernetes. Roles contain lists of actions that can be performed against objects in your cluster. Role bindings specify the individuals or groups to whom the roles apply. In the enterprise and KaaS settings, RBAC can be used to permit administration of objects by selected groups or individuals. Quotas \u00b6 Quotas are used to define limits on workloads hosted in your cluster. With quotas, you can specify the maximum amount of CPU and memory that a pod can consume, or you can limit the number of resources that can be allocated in a cluster or namespace. Limit ranges allow you to declare minimum, maximum, and default values for each limit. Overcommitting resources in a shared cluster is often beneficial because it allows you maximize your resources. However, unbounded access to a cluster can cause resource starvation, which can lead to performance degradation and loss of application availability. If a pod's requests are set too low and the actual resource utilization exceeds the capacity of the node, the node will begin to experience CPU or memory pressure. When this happens, pods may be restarted and/or evicted from the node. To prevent this from happening, you should plan to impose quotas on namespaces in a multi-tenant environment to force tenants to specify requests and limits when scheduling their pods on the cluster. It will also mitigate a potential denial of service by constraining the amount of resources a pod can consume. You can also use quotas to apportion the cluster's resources to align with a tenant's spend. This is particularly useful in the KaaS scenario. Pod priority and pre-emption \u00b6 Pod priority and pre-emption can be useful when you want to provide different qualities of services (QoS) for different customers. For example, with pod priority you can configure pods from customer A to run at a higher priority than customer B. When there's insufficient capacity available, the Kubelet will evict the lower-priority pods from customer B to accommodate the higher-priority pods from customer A. This can be especially handy in a SaaS environment where customers willing to pay a premium receive a higher quality of service. Mitigating controls \u00b6 Your chief concern as an administrator of a multi-tenant environment is preventing an attacker from gaining access to the underlying host. The following controls should be considered to mitigate this risk: Pod Security Policies (PSPs) \u00b6 PSPs should be used to curtail the actions that can be performed by a container and to reduce a container's privileges, e.g. running as a non-root user. Sandboxed execution environments for containers \u00b6 Sandboxing is a technique by which each container is run in its own isolated virtual machine. Technologies that perform pod sandboxing include Firecracker and Weave's Firekube . If you are building your own self-managed Kubernetes cluster on AWS, you may be able to configure alternate container runtimes such as Kata Containers . For additional information about the effort to make Firecracker a supported runtime for EKS, see https://threadreaderapp.com/thread/1238496944684597248.html . Open Policy Agent (OPA) & Gatekeeper \u00b6 Gatekeeper is a Kubernetes admission controller that enforces policies created with OPA . With OPA you can create a policy that runs pods from tenants on separate instances or at a higher priority than other tenants. A collection of common OPA policies can be found in the GitHub repository for this project. There is also an experimental OPA plugin for CoreDNS that allows you to use OPA to filter/control the records returned by CoreDNS. Kyverno \u00b6 Kyverno is a Kubernetes native policy engine that can validate, mutate, and generate configurations with policies as Kubernetes resources. Kyverno uses Kustomize-style overlays for validation, supports JSON Patch and strategic merge patch for mutation, and can clone resources across namespaces based on flexible triggers. You can use Kyverno to isolate namespaces, enforce pod security and other best practices, and generate default configurations such as network policies. Several examples are included in the GitHub respository for this project. Tools \u00b6 k-rail Designed to help you secure a multi-tenant environment through the enforcement of certain policies. Hard multi-tenancy \u00b6 Hard multi-tenancy can be implemented by provisioning separate clusters for each tenant. While this provides very strong isolation between tenants, it has several drawbacks. First, when you have many tenants, this approach can quickly become expensive. Not only will you have to pay for the control plane costs for each cluster, you will not be able to share compute resources between clusters. This will eventually cause fragmentation where a subset of your clusters are underutilized while others are overutilized. Second, you will likely need to buy or build special tooling to manage all of these clusters. In time, managing hundreds or thousands of clusters may simply become too unweildy. Finally, creating a cluster per tenant will be slow relative to a creating a namespace. Nevertheless, a hard-tenancy approach may be necessary in highly-regulated industries or in SaaS environments where strong isolation is required. Future directions \u00b6 The Kubernetes community has recognized the current shortcomings of soft multi-tenancy and the challenges with hard multi-tenancy. The Multi-Tenancy Special Interest Group (SIG) is attempting to address these shortcomings through several incubation projects, including Hierarchical Namespace Controller (HNC) and Virtual Cluster. The HNC proposal (KEP) describes a way to create parent-child relationships between namespaces with [policy] object inheritance along with an ability for tenant administrators to create subnamespaces. The Virtual Cluster proposal describes a mechanism for creating separate instances of the control plane services, including the API server, the controller manager, and scheduler, for each tenant within the cluster (also known as \"Kubernetes on Kubernetes\"). The Multi-Tenancy Benchmarks proposal provides guidelines for sharing clusters using namespaces for isolation and segmentation, and a command line tool kubectl-mtb to validate conformance to the guidelines. Multi-cluster management resources \u00b6 Banzai Cloud Kommander Lens Nirmata Rafay Rancher Weave Flux","title":"Multi-tenancy"},{"location":"security/docs/multitenancy/#tenant-isolation","text":"When we think of multi-tenancy, we often want to isolate a user or application from other users or applications running on a shared infrastructure. Kubernetes is a single tenant orchestrator , i.e. a single instance of the control plane is shared among all the tenants within a cluster. There are, however, various Kubernetes objects that you can use to create the semblance of multi-tenancy. For example, Namespaces and Role-based access controls (RBAC) can be implemented to logically isolate tenants from each other. Similarly, Quotas and Limit Ranges can be used to control the amount of cluster resources each tenant can consume. Nevertheless, the cluster is the only construct that provides a strong security boundary. This is because an attacker that manages to gain access to a host within the cluster can retrieve all Secrets, ConfigMaps, and Volumes, mounted on that host. They could also impersonate the Kubelet which would allow them to manipulate the attributes of the node and/or move laterally within the cluster. The following sections will explain how to implement tenant isolation while mitigating the risks of using a single tenant orchestrator like Kubernetes.","title":"Tenant Isolation"},{"location":"security/docs/multitenancy/#soft-multi-tenancy","text":"With soft multi-tenancy, you use native Kubernetes constructs, e.g. namespaces, roles and role bindings, and network policies, to create logical separation between tenants. RBAC, for example, can prevent tenants from accessing or manipulate each other's resources. Quotas and limit ranges control the amount of cluster resources each tenant can consume while network policies can help prevent applications deployed into different namespaces from communicating with each other. None of these controls, however, prevent pods from different tenants from sharing a node. If stronger isolation is required, you can use a node selector, anti-affinity rules, and/or taints and tolerations to force pods from different tenants to be scheduled onto separate nodes; often referred to as sole tenant nodes . This could get rather complicated, and cost prohibitive, in an environment with many tenants. Attention Soft multi-tenancy implemented with Namespaces does not allow you to provide tenants with a filtered list of Namespaces because Namespaces are a globaly scoped Type. If a tenant has the ability to view a particular Namespace, it can view all Namespaces within the cluster. Warning With soft-multi-tenancy, tenants retain the ability to query CoreDNS for all services that run within the cluster by default. An attacker could exploit this by running dig SRV . .svc.cluster.local from any pod in the cluster. If you need to restrict access to DNS records of services that run within your clusters, consider using the Firewall or Policy plugins for CoreDNS. For additional information, see https://github.com/coredns/policy#kubernetes-metadata-multi-tenancy-policy . Kiosk is an open source project that can aid in the implementation of soft multi-tenancy. It is implemented as a series of CRDs and controllers that provide the following capabilities: Accounts & Account Users to separate tenants in a shared Kubernetes cluster Self-Service Namespace Provisioning for account users Account Limits to ensure quality of service and fairness when sharing a cluster Namespace Templates for secure tenant isolation and self-service namespace initialization Loft is a commerical offering from the maintainers of Kiosk and DevSpace that adds the following capabilities: Mutli-cluster access for granting access to spaces in different clusters Sleep mode scales down deployments in a space during periods of inactivity Single sign-on with OIDC authentication providers like GitHub There are three primary use cases that can be addressed by soft multi-tenancy.","title":"Soft multi-tenancy"},{"location":"security/docs/multitenancy/#enterprise-setting","text":"The first is in an Enterprise setting where the \"tenants\" are semi-trusted in that they are employees, contractors, or are otherwise authorized by the organization. Each tenant will typically align to an administrative division such as a department or team. In this type of setting, a cluster administrator will usually be responsible for creating namespaces and managing policies. They may also implement a delegated adminstration model where certain individuals are given oversight of a namespace, allowing them to perform CRUD operations for non-policy related objects like deployments, services, pods, jobs, etc. The isolation provided by Docker may be acceptable within this setting or it may need to be augmented with additional controls such as Pod Security Policies (PSPs). It may also be necessary to restrict communication between services in different namespaces if stricter isolation is required.","title":"Enterprise Setting"},{"location":"security/docs/multitenancy/#kubernetes-as-a-service","text":"By constrast, soft multi-tenancy can be used in settings where you want to offer Kubernetes as a service (KaaS). With KaaS, your application is hosted in a shared cluster along with a collection of controllers and CRDs that provide a set of PaaS services. Tenants interact directly with the Kubernetes API server and are permitted to perform CRUD operations on non-policy objects. There is also an element of self-service in that tenants may be allowed to create and manage their own namespaces. In this type of environment, tenants are assumed to be running untrusted code. To isolate tenants in this type of environment, you will likely need to implement strict network policies as well as pod sandboxing . Sandboxing is where you run the containers of a pod inside a micro VM like Firecracker or in a user-space kernel. Today, you can create sandboxed pods with EKS Fargate.","title":"Kubernetes as a Service"},{"location":"security/docs/multitenancy/#software-as-a-service-saas","text":"The final use case for soft multi-tenancy is in a Software-as-a-Service (SaaS) setting. In this environment, each tenant is associated with a particular instance of an application that's running within the cluster. Each instance often has its own data and uses separate access controls that are usually independent of Kubernetes RBAC. Unlike the other use cases, the tenant in a SaaS setting does not directly interface with the Kubernetes API. Instead, the SaaS application is responsible for interfacing with the Kubernetes API to create the necessary objects to support each tenant.","title":"Software as a Service (SaaS)"},{"location":"security/docs/multitenancy/#kubernetes-constructs","text":"In each of these instances the following constructs are used to isolate tenants from each other:","title":"Kubernetes Constructs"},{"location":"security/docs/multitenancy/#namespaces","text":"Namespaces are fundamental to implementing soft multi-tenancy. They allow you to divide the cluster into logical partitions. Quotas, network policies, service accounts, and other objects needed to implement multi-tenancy are scoped to a namespace.","title":"Namespaces"},{"location":"security/docs/multitenancy/#network-policies","text":"By default, all pods in a Kubernetes cluster are allowed to communicate with each other. This behavior can be altered using network policies. Network policies restrict communication between pods using labels or IP address ranges. In a multi-tenant environment where strict network isolation between tenants is required, we recommend starting with a default rule that denies communication between pods, and another rule that allows all pods to query the DNS server for name resolution. With that in place, you can begin adding more permissive rules that allow for communication within a namespace. This can be further refined as required. Attention Network policies are necessary but not sufficient. The enforcement of network policies requires a policy engine such as Calico or Cilium.","title":"Network policies"},{"location":"security/docs/multitenancy/#role-based-access-control-rbac","text":"Roles and role bindings are the Kubernetes objects used to enforce role-based access control (RBAC) in Kubernetes. Roles contain lists of actions that can be performed against objects in your cluster. Role bindings specify the individuals or groups to whom the roles apply. In the enterprise and KaaS settings, RBAC can be used to permit administration of objects by selected groups or individuals.","title":"Role-based access control (RBAC)"},{"location":"security/docs/multitenancy/#quotas","text":"Quotas are used to define limits on workloads hosted in your cluster. With quotas, you can specify the maximum amount of CPU and memory that a pod can consume, or you can limit the number of resources that can be allocated in a cluster or namespace. Limit ranges allow you to declare minimum, maximum, and default values for each limit. Overcommitting resources in a shared cluster is often beneficial because it allows you maximize your resources. However, unbounded access to a cluster can cause resource starvation, which can lead to performance degradation and loss of application availability. If a pod's requests are set too low and the actual resource utilization exceeds the capacity of the node, the node will begin to experience CPU or memory pressure. When this happens, pods may be restarted and/or evicted from the node. To prevent this from happening, you should plan to impose quotas on namespaces in a multi-tenant environment to force tenants to specify requests and limits when scheduling their pods on the cluster. It will also mitigate a potential denial of service by constraining the amount of resources a pod can consume. You can also use quotas to apportion the cluster's resources to align with a tenant's spend. This is particularly useful in the KaaS scenario.","title":"Quotas"},{"location":"security/docs/multitenancy/#pod-priority-and-pre-emption","text":"Pod priority and pre-emption can be useful when you want to provide different qualities of services (QoS) for different customers. For example, with pod priority you can configure pods from customer A to run at a higher priority than customer B. When there's insufficient capacity available, the Kubelet will evict the lower-priority pods from customer B to accommodate the higher-priority pods from customer A. This can be especially handy in a SaaS environment where customers willing to pay a premium receive a higher quality of service.","title":"Pod priority and pre-emption"},{"location":"security/docs/multitenancy/#mitigating-controls","text":"Your chief concern as an administrator of a multi-tenant environment is preventing an attacker from gaining access to the underlying host. The following controls should be considered to mitigate this risk:","title":"Mitigating controls"},{"location":"security/docs/multitenancy/#pod-security-policies-psps","text":"PSPs should be used to curtail the actions that can be performed by a container and to reduce a container's privileges, e.g. running as a non-root user.","title":"Pod Security Policies (PSPs)"},{"location":"security/docs/multitenancy/#sandboxed-execution-environments-for-containers","text":"Sandboxing is a technique by which each container is run in its own isolated virtual machine. Technologies that perform pod sandboxing include Firecracker and Weave's Firekube . If you are building your own self-managed Kubernetes cluster on AWS, you may be able to configure alternate container runtimes such as Kata Containers . For additional information about the effort to make Firecracker a supported runtime for EKS, see https://threadreaderapp.com/thread/1238496944684597248.html .","title":"Sandboxed execution environments for containers"},{"location":"security/docs/multitenancy/#open-policy-agent-opa-gatekeeper","text":"Gatekeeper is a Kubernetes admission controller that enforces policies created with OPA . With OPA you can create a policy that runs pods from tenants on separate instances or at a higher priority than other tenants. A collection of common OPA policies can be found in the GitHub repository for this project. There is also an experimental OPA plugin for CoreDNS that allows you to use OPA to filter/control the records returned by CoreDNS.","title":"Open Policy Agent (OPA) &amp; Gatekeeper"},{"location":"security/docs/multitenancy/#kyverno","text":"Kyverno is a Kubernetes native policy engine that can validate, mutate, and generate configurations with policies as Kubernetes resources. Kyverno uses Kustomize-style overlays for validation, supports JSON Patch and strategic merge patch for mutation, and can clone resources across namespaces based on flexible triggers. You can use Kyverno to isolate namespaces, enforce pod security and other best practices, and generate default configurations such as network policies. Several examples are included in the GitHub respository for this project.","title":"Kyverno"},{"location":"security/docs/multitenancy/#tools","text":"k-rail Designed to help you secure a multi-tenant environment through the enforcement of certain policies.","title":"Tools"},{"location":"security/docs/multitenancy/#hard-multi-tenancy","text":"Hard multi-tenancy can be implemented by provisioning separate clusters for each tenant. While this provides very strong isolation between tenants, it has several drawbacks. First, when you have many tenants, this approach can quickly become expensive. Not only will you have to pay for the control plane costs for each cluster, you will not be able to share compute resources between clusters. This will eventually cause fragmentation where a subset of your clusters are underutilized while others are overutilized. Second, you will likely need to buy or build special tooling to manage all of these clusters. In time, managing hundreds or thousands of clusters may simply become too unweildy. Finally, creating a cluster per tenant will be slow relative to a creating a namespace. Nevertheless, a hard-tenancy approach may be necessary in highly-regulated industries or in SaaS environments where strong isolation is required.","title":"Hard multi-tenancy"},{"location":"security/docs/multitenancy/#future-directions","text":"The Kubernetes community has recognized the current shortcomings of soft multi-tenancy and the challenges with hard multi-tenancy. The Multi-Tenancy Special Interest Group (SIG) is attempting to address these shortcomings through several incubation projects, including Hierarchical Namespace Controller (HNC) and Virtual Cluster. The HNC proposal (KEP) describes a way to create parent-child relationships between namespaces with [policy] object inheritance along with an ability for tenant administrators to create subnamespaces. The Virtual Cluster proposal describes a mechanism for creating separate instances of the control plane services, including the API server, the controller manager, and scheduler, for each tenant within the cluster (also known as \"Kubernetes on Kubernetes\"). The Multi-Tenancy Benchmarks proposal provides guidelines for sharing clusters using namespaces for isolation and segmentation, and a command line tool kubectl-mtb to validate conformance to the guidelines.","title":"Future directions"},{"location":"security/docs/multitenancy/#multi-cluster-management-resources","text":"Banzai Cloud Kommander Lens Nirmata Rafay Rancher Weave Flux","title":"Multi-cluster management resources"},{"location":"security/docs/network/","text":"Network security \u00b6 Network security has several facets. The first involves the application of rules which restrict the flow of network traffic between services. The second involves the encryption of traffic while it is in transit. The mechanisms to implement these security measures on EKS are varied but often include the following items: Traffic control \u00b6 Network Policies Security Groups Encryption in transit \u00b6 Service Mesh Container Network Interfaces (CNIs) Nitro Instances Network policy \u00b6 Within a Kubernetes cluster, all Pod to Pod communication is allowed by default. While this flexibility may help promote experimentation, it is not considered secure. Kubernetes network policies give you a mechanism to restrict network traffic between Pods (often referred to as East/West traffic) and between Pods and external services. Kubernetes network policies operate at layers 3 and 4 of the OSI model. Network policies use pod selectors and labels to identify source and destination pods, but can also include IP addresses, port numbers, protocol number, or a combination of these. Calico , is an open source policy engine from Tigera that works well with EKS. In addition to implementing the full set of Kubernetes network policy features, Calico supports extended network polices with a richer set of features, including support for layer 7 rules, e.g. HTTP, when integrated with Istio. Isovalent, the maintainers of Cilium , have also extended the network policies to include partial support for layer 7 rules, e.g. HTTP. Cilium also has support for DNS hostnames which can be useful for restricting traffic between Kubernetes Services/Pods and resources that run within or outside of your VPC. By contrast, Calico Enterprise includes a feature that allows you to map a Kubernetes network policy to an AWS security group, as well as DNS hostnames. Attention When you first provision an EKS cluster, the Calico policy engine is not installed by default. The manifests for installing Calico can be found in the VPC CNI repository at https://github.com/aws/amazon-vpc-cni-k8s/tree/master/config . Calico policies can be scoped to Namespaces, Pods, service accounts, or globally. When policies are scoped to a service account, it associates a set of ingress/egress rules with that service account. With the proper RBAC rules in place, you can prevent teams from overriding these rules, allowing IT security professionals to safely delegate administration of namespaces. You can find a list of common Kubernetes network policies at https://github.com/ahmetb/kubernetes-network-policy-recipes . A similar set of rules for Calico are available at https://docs.projectcalico.org/security/calico-network-policy . Recommendations \u00b6 Create a default deny policy \u00b6 As with RBAC policies, network policies should adhere to the policy of least privileged access. Start by creating a deny all policy that restricts all inbound and outbound traffic from a namespace or create a global policy using Calico. Kubernetes network policy apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : default-deny namespace : default spec : podSelector : {} policyTypes : - Ingress - Egress Tip The image above was created by the network policy viewer from Tufin . Calico global network policy apiVersion : crd.projectcalico.org/v1 kind : GlobalNetworkPolicy metadata : name : default-deny spec : selector : all() types : - Ingress - Egress Create a rule to allow DNS queries \u00b6 Once you have the default deny all rule in place, you can begin layering on additional rules, such as a global rule that allows pods to query CoreDNS for name resolution. You begin by labeling the namespace: kubectl label namespace kube-system name=kube-system Then add the network policy: apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : allow-dns-access namespace : default spec : podSelector : matchLabels : {} policyTypes : - Egress egress : - to : - namespaceSelector : matchLabels : name : kube-system ports : - protocol : UDP port : 53 Calico global policy equivalent apiVersion : crd.projectcalico.org/v1 kind : GlobalNetworkPolicy metadata : name : allow-dns-egress spec : selector : all() types : - Egress egress : - action : Allow protocol : UDP destination : namespaceSelector : name == \"kube-system\" ports : - 53 The following is an example of how to associate a network policy with a service account while preventing users associated with the readonly-sa-group from editing the service account my-sa in the default namespace: apiVersion : v1 kind : ServiceAccount metadata : name : my-sa namespace : default labels : name : my-sa --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : namespace : default name : readonly-sa-role rules : # Allows the subject to read a service account called my-sa - apiGroups : [ \"\" ] resources : [ \"serviceaccounts\" ] resourceNames : [ \"my-sa\" ] verbs : [ \"get\" , \"watch\" , \"list\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : namespace : default name : readonly-sa-rolebinding # Binds the readonly-sa-role to the RBAC group called readonly-sa-group. subjects : - kind : Group name : readonly-sa-group apiGroup : rbac.authorization.k8s.io roleRef : kind : Role name : readonly-sa-role apiGroup : rbac.authorization.k8s.io --- apiVersion : crd.projectcalico.org/v1 kind : NetworkPolicy metadata : name : netpol-sa-demo namespace : default # Allows all ingress traffic to services in the default namespace that reference # the service account called my-sa spec : ingress : - action : Allow source : serviceAccounts : selector : 'name == \"my-sa\"' selector : all() Incrementally add rules to selectively allow the flow of traffic between namespaces/pods \u00b6 Start by allowing Pods within a Namespace to communicate with each other and then add custom rules that further restrict Pod to Pod communication within that Namespace. Log network traffic metadata \u00b6 AWS VPC Flow Logs captures metadata about the traffic flowing through a VPC, such as source and destination IP address and port along with accepted/dropped packets. This information could be analyzed to look for suspicous or unusual activity between resources within the VPC, including Pods. However, since the IP addresses of pods frequently change as they are replaced, Flow Logs may not be sufficient on its own. Calico Enterprise extends the Flow Logs with pod labels and other metadata, making it easier to decipher the traffic flows between pods. Use encryption with AWS load balancers \u00b6 The AWS Application Load Balancer (ALB) and Network Load Balancer (NLB) both have support for transport encryption (SSL and TLS). The alb.ingress.kubernetes.io/certificate-arn annotation for the ALB lets you to specify which certificates to add to the ALB. If you omit the annotation the controller will attempt to add certificates to listeners that require it by matching the available AWS Certificate Manager (ACM) certificates using the host field. Starting with EKS v1.15 you can use the service.beta.kubernetes.io/aws-load-balancer-ssl-cert annotation with the NLB as shown in the example below. apiVersion : v1 kind : Service metadata : name : demo-app namespace : default labels : app : demo-app annotations : service.beta.kubernetes.io/aws-load-balancer-type : \"nlb\" service.beta.kubernetes.io/aws-load-balancer-ssl-cert : \"<certificate ARN>\" service.beta.kubernetes.io/aws-load-balancer-ssl-ports : \"443\" service.beta.kubernetes.io/aws-load-balancer-backend-protocol : \"http\" spec : type : LoadBalancer ports : - port : 443 targetPort : 80 protocol : TCP selector : app : demo-app --- kind : Deployment apiVersion : apps/v1 metadata : name : nginx namespace : default labels : app : demo-app spec : replicas : 1 selector : matchLabels : app : demo-app template : metadata : labels : app : demo-app spec : containers : - name : nginx image : nginx ports : - containerPort : 443 protocol : TCP - containerPort : 80 protocol : TCP Additional Resources \u00b6 Kubernetes & Tigera: Network Policies, Security, and Audit Calico Enterprise Cilium NetworkPolicy Editor an interactive policy editor from Cilium Kinvolk's Network Policy Advisor Suggests network policies based on an analysis of network traffic Security groups \u00b6 EKS uses AWS VPC Security Groups (SGs) to control the traffic between the Kubernetes control plane and the cluster's worker nodes. Security groups are also used to control the traffic between worker nodes, and other VPC resources, and external IP addresses. When you provision an EKS cluster (with Kubernetes version 1.14-eks.3 or greater), a cluster security group is automatically created for you. This security group allows unfettered communication between the EKS control plane and the nodes from managed node groups. For simplicity, it is recommended that you add the cluster SG to all node groups, including unmanaged node groups. Prior to Kubernetes version 1.14 and EKS version eks.3, there were separate security groups configured for the EKS control plane and node groups. The minimum and suggested rules for the control plane and node group security groups can be found at https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html . The minimum rules for the control plane security group allows port 443 inbound from the worker node SG. This rule is what allows the kubelets to communicate with the Kubernetes API server. It also includes port 10250 for outbound traffic to the worker node SG; 10250 is the port that the kubelets listen on. Similarly, the minimum node group rules allow port 10250 inbound from the control plane SG and 443 outbound to the control plane SG. Finally there is a rule that allows unfettered communication between nodes within a node group. If you need to control communication between services that run within the cluster and service the run outside the cluster such as an RDS database, consider security groups for pods . With security groups for pods, you can assign an existing security group to a collection of pods. Warning If you reference a security group that does not exist prior to the creation of the pods, the pods will not get scheduled. You can control which pods are assigned to a security group by creating a SecurityGroupPolicy object and specifying a PodSelector or a ServiceAccountSelector . Setting the selectors to {} will assign the SGs referenced in the SecurityGroupPolicy to all pods in a namespace or all Service Accounts in a namespace. Be sure you've familiarized youself with all the considerations before implementing security groups for pods. Important If you use SGs for pods you must create SGs that allow port 53 outbound to the cluster security group. Similarly, you must update the cluster security group to accept port 53 inbound traffic from the pod security group. Important The limits for security groups still apply when using security groups for pods so use them judiciously. Important You must create rules for inbound traffic from the cluster security group (kubelet) for all of the probes configured for pod. Warning There is a bug that currently prevents the kubelet from communicating with pods that are assigned to SGs. The current workaround involves running sudo sysctl net.ipv4.tcp_early_demux=0 on the affected worker nodes. This is fixed in CNI v1.7.3, https://github.com/aws/amazon-vpc-cni-k8s/releases/tag/v1.7.3 . Important Security groups for pods relies on a feature known as ENI trunking which was created to increase the ENI density of an EC2 instance. When a pod is assigned to an SG, a VPC controller associates a branch ENI from the node group with the pod. If there aren't enough branch ENIs available in a node group at the time the pod is scheduled, the pod will stay in pending state. The number of branch ENIs an instance can support varies by instance type/family. See https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#supported-instance-types for further details. While security groups for pods offers an AWS-native way to control network traffic within and outside of your cluster without the overhead of a policy daemon, other options are available. For example, the Cilium policy engine allows you to reference a DNS name in a network policy. Calico Enterprise includes an option for mapping network policies to AWS security groups. If you've implemented a service mesh like Istio, you can use an egress gateway to restrict network egress to specific, fully qualified domains or IP addresses. For further infomration about this option, read the three part series on egress traffic control in Istio . Encryption in transit \u00b6 Applications that need to conform to PCI, HIPAA, or other regulations may need to encrypt data while it is in transit. Nowadays TLS is the de facto choice for encrypting traffic on the wire. TLS, like it's predecessor SSL, provides secure communications over a network using cryptographic protocols. TLS uses symmetric encryption where the keys to encrypt the data are generated based on a shared secret that is negotiated at the beginning of the session. The following are a few ways that you can encrypt data in a Kubernetes environment. Nitro Instances \u00b6 Traffic exchanged between the following Nitro instance types C5n, G4, I3en, M5dn, M5n, P3dn, R5dn, and R5n, is automatically encrypted by default. When there's an intermediate hop, like a transit gateway or a load balancer, the traffic is not encrypted. See Encryption in transit and the following What's new announcement for further details. Container Network Interfaces (CNIs) \u00b6 WeaveNet can be configured to automatically encrypt all traffic using NaCl encryption for sleeve traffic, and IPsec ESP for fast datapath traffic. Service Mesh \u00b6 Encryption in transit can also be implemented with a service mesh like App Mesh, Linkerd v2, and Istio. AppMesh supports mTLS with X.509 certificates or Envoy's Secret Discovery Service(SDS). Linkerd and Istio both have support for mTLS. The aws-app-mesh-examples GitHub repository provides walkthroughs for configuring mTLS using X.509 certificates and SPIRE as SDS provider with your Envoy container: Configuring mTLS using X.509 certificates Configuring TLS using SPIRE (SDS) App Mesh also supports TLS encryption with a private certificate issued by AWS Certificate Manager (ACM) or a certificate stored on the local file system of the virtual node. The aws-app-mesh-examples GitHub repository provides walkthroughs for configuring TLS using certificates issued by ACM and certificates that are packaged with your Envoy container: + Configuring TLS with File Provided TLS Certificates + Configuring TLS with AWS Certificate Manager Ingress Controllers and Load Balancers \u00b6 Ingress controllers are a way for you to intelligently route HTTP/S traffic that emanates from outside the cluster to services running inside the cluster. Oftentimes, these Ingresses are fronted by a layer 4 load balancer, like the Classic Load Balancer or the Network Load Balancer (NLB). Encrypted traffic can be terminated at different places within the network, e.g. at the load balancer, at the ingress resource, or the Pod. How and where you terminate your SSL connection will ultimately be dictated by your organization's network security policy. For instance, if you have a policy that requires end-to-end encryption, you will have to decrypt the traffic at the Pod. This will place additional burden on your Pod as it will have to spend cycles establishing the initial handshake. Overall SSL/TLS processing is very CPU intensive. Consequently, if you have the flexibility, try performing the SSL offload at the Ingress or the load balancer. An ingress controller can be configured to terminate SSL/TLS connections. An example for how to terminate SSL/TLS connections at the NLB appears above . Additional examples for SSL/TLS termination appear below. Securing EKS Ingress With Contour And Let\u2019s Encrypt The GitOps Way How do I terminate HTTPS traffic on Amazon EKS workloads with ACM? Attention Some Ingresses, like the ALB ingress controller, implement the SSL/TLS using Annotations instead of as part of the Ingress Spec. Tooling \u00b6 Verifying Service Mesh TLS in Kubernetes, Using ksniff and Wireshark ksniff egress-operator An operator and DNS plugin to control egress traffic from your cluster without protocol inspection","title":"Network Security"},{"location":"security/docs/network/#network-security","text":"Network security has several facets. The first involves the application of rules which restrict the flow of network traffic between services. The second involves the encryption of traffic while it is in transit. The mechanisms to implement these security measures on EKS are varied but often include the following items:","title":"Network security"},{"location":"security/docs/network/#traffic-control","text":"Network Policies Security Groups","title":"Traffic control"},{"location":"security/docs/network/#encryption-in-transit","text":"Service Mesh Container Network Interfaces (CNIs) Nitro Instances","title":"Encryption in transit"},{"location":"security/docs/network/#network-policy","text":"Within a Kubernetes cluster, all Pod to Pod communication is allowed by default. While this flexibility may help promote experimentation, it is not considered secure. Kubernetes network policies give you a mechanism to restrict network traffic between Pods (often referred to as East/West traffic) and between Pods and external services. Kubernetes network policies operate at layers 3 and 4 of the OSI model. Network policies use pod selectors and labels to identify source and destination pods, but can also include IP addresses, port numbers, protocol number, or a combination of these. Calico , is an open source policy engine from Tigera that works well with EKS. In addition to implementing the full set of Kubernetes network policy features, Calico supports extended network polices with a richer set of features, including support for layer 7 rules, e.g. HTTP, when integrated with Istio. Isovalent, the maintainers of Cilium , have also extended the network policies to include partial support for layer 7 rules, e.g. HTTP. Cilium also has support for DNS hostnames which can be useful for restricting traffic between Kubernetes Services/Pods and resources that run within or outside of your VPC. By contrast, Calico Enterprise includes a feature that allows you to map a Kubernetes network policy to an AWS security group, as well as DNS hostnames. Attention When you first provision an EKS cluster, the Calico policy engine is not installed by default. The manifests for installing Calico can be found in the VPC CNI repository at https://github.com/aws/amazon-vpc-cni-k8s/tree/master/config . Calico policies can be scoped to Namespaces, Pods, service accounts, or globally. When policies are scoped to a service account, it associates a set of ingress/egress rules with that service account. With the proper RBAC rules in place, you can prevent teams from overriding these rules, allowing IT security professionals to safely delegate administration of namespaces. You can find a list of common Kubernetes network policies at https://github.com/ahmetb/kubernetes-network-policy-recipes . A similar set of rules for Calico are available at https://docs.projectcalico.org/security/calico-network-policy .","title":"Network policy"},{"location":"security/docs/network/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/network/#create-a-default-deny-policy","text":"As with RBAC policies, network policies should adhere to the policy of least privileged access. Start by creating a deny all policy that restricts all inbound and outbound traffic from a namespace or create a global policy using Calico. Kubernetes network policy apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : default-deny namespace : default spec : podSelector : {} policyTypes : - Ingress - Egress Tip The image above was created by the network policy viewer from Tufin . Calico global network policy apiVersion : crd.projectcalico.org/v1 kind : GlobalNetworkPolicy metadata : name : default-deny spec : selector : all() types : - Ingress - Egress","title":"Create a default deny policy"},{"location":"security/docs/network/#create-a-rule-to-allow-dns-queries","text":"Once you have the default deny all rule in place, you can begin layering on additional rules, such as a global rule that allows pods to query CoreDNS for name resolution. You begin by labeling the namespace: kubectl label namespace kube-system name=kube-system Then add the network policy: apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : allow-dns-access namespace : default spec : podSelector : matchLabels : {} policyTypes : - Egress egress : - to : - namespaceSelector : matchLabels : name : kube-system ports : - protocol : UDP port : 53 Calico global policy equivalent apiVersion : crd.projectcalico.org/v1 kind : GlobalNetworkPolicy metadata : name : allow-dns-egress spec : selector : all() types : - Egress egress : - action : Allow protocol : UDP destination : namespaceSelector : name == \"kube-system\" ports : - 53 The following is an example of how to associate a network policy with a service account while preventing users associated with the readonly-sa-group from editing the service account my-sa in the default namespace: apiVersion : v1 kind : ServiceAccount metadata : name : my-sa namespace : default labels : name : my-sa --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : namespace : default name : readonly-sa-role rules : # Allows the subject to read a service account called my-sa - apiGroups : [ \"\" ] resources : [ \"serviceaccounts\" ] resourceNames : [ \"my-sa\" ] verbs : [ \"get\" , \"watch\" , \"list\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : namespace : default name : readonly-sa-rolebinding # Binds the readonly-sa-role to the RBAC group called readonly-sa-group. subjects : - kind : Group name : readonly-sa-group apiGroup : rbac.authorization.k8s.io roleRef : kind : Role name : readonly-sa-role apiGroup : rbac.authorization.k8s.io --- apiVersion : crd.projectcalico.org/v1 kind : NetworkPolicy metadata : name : netpol-sa-demo namespace : default # Allows all ingress traffic to services in the default namespace that reference # the service account called my-sa spec : ingress : - action : Allow source : serviceAccounts : selector : 'name == \"my-sa\"' selector : all()","title":"Create a rule to allow DNS queries"},{"location":"security/docs/network/#incrementally-add-rules-to-selectively-allow-the-flow-of-traffic-between-namespacespods","text":"Start by allowing Pods within a Namespace to communicate with each other and then add custom rules that further restrict Pod to Pod communication within that Namespace.","title":"Incrementally add rules to selectively allow the flow of traffic between namespaces/pods"},{"location":"security/docs/network/#log-network-traffic-metadata","text":"AWS VPC Flow Logs captures metadata about the traffic flowing through a VPC, such as source and destination IP address and port along with accepted/dropped packets. This information could be analyzed to look for suspicous or unusual activity between resources within the VPC, including Pods. However, since the IP addresses of pods frequently change as they are replaced, Flow Logs may not be sufficient on its own. Calico Enterprise extends the Flow Logs with pod labels and other metadata, making it easier to decipher the traffic flows between pods.","title":"Log network traffic metadata"},{"location":"security/docs/network/#use-encryption-with-aws-load-balancers","text":"The AWS Application Load Balancer (ALB) and Network Load Balancer (NLB) both have support for transport encryption (SSL and TLS). The alb.ingress.kubernetes.io/certificate-arn annotation for the ALB lets you to specify which certificates to add to the ALB. If you omit the annotation the controller will attempt to add certificates to listeners that require it by matching the available AWS Certificate Manager (ACM) certificates using the host field. Starting with EKS v1.15 you can use the service.beta.kubernetes.io/aws-load-balancer-ssl-cert annotation with the NLB as shown in the example below. apiVersion : v1 kind : Service metadata : name : demo-app namespace : default labels : app : demo-app annotations : service.beta.kubernetes.io/aws-load-balancer-type : \"nlb\" service.beta.kubernetes.io/aws-load-balancer-ssl-cert : \"<certificate ARN>\" service.beta.kubernetes.io/aws-load-balancer-ssl-ports : \"443\" service.beta.kubernetes.io/aws-load-balancer-backend-protocol : \"http\" spec : type : LoadBalancer ports : - port : 443 targetPort : 80 protocol : TCP selector : app : demo-app --- kind : Deployment apiVersion : apps/v1 metadata : name : nginx namespace : default labels : app : demo-app spec : replicas : 1 selector : matchLabels : app : demo-app template : metadata : labels : app : demo-app spec : containers : - name : nginx image : nginx ports : - containerPort : 443 protocol : TCP - containerPort : 80 protocol : TCP","title":"Use encryption with AWS load balancers"},{"location":"security/docs/network/#additional-resources","text":"Kubernetes & Tigera: Network Policies, Security, and Audit Calico Enterprise Cilium NetworkPolicy Editor an interactive policy editor from Cilium Kinvolk's Network Policy Advisor Suggests network policies based on an analysis of network traffic","title":"Additional Resources"},{"location":"security/docs/network/#security-groups","text":"EKS uses AWS VPC Security Groups (SGs) to control the traffic between the Kubernetes control plane and the cluster's worker nodes. Security groups are also used to control the traffic between worker nodes, and other VPC resources, and external IP addresses. When you provision an EKS cluster (with Kubernetes version 1.14-eks.3 or greater), a cluster security group is automatically created for you. This security group allows unfettered communication between the EKS control plane and the nodes from managed node groups. For simplicity, it is recommended that you add the cluster SG to all node groups, including unmanaged node groups. Prior to Kubernetes version 1.14 and EKS version eks.3, there were separate security groups configured for the EKS control plane and node groups. The minimum and suggested rules for the control plane and node group security groups can be found at https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html . The minimum rules for the control plane security group allows port 443 inbound from the worker node SG. This rule is what allows the kubelets to communicate with the Kubernetes API server. It also includes port 10250 for outbound traffic to the worker node SG; 10250 is the port that the kubelets listen on. Similarly, the minimum node group rules allow port 10250 inbound from the control plane SG and 443 outbound to the control plane SG. Finally there is a rule that allows unfettered communication between nodes within a node group. If you need to control communication between services that run within the cluster and service the run outside the cluster such as an RDS database, consider security groups for pods . With security groups for pods, you can assign an existing security group to a collection of pods. Warning If you reference a security group that does not exist prior to the creation of the pods, the pods will not get scheduled. You can control which pods are assigned to a security group by creating a SecurityGroupPolicy object and specifying a PodSelector or a ServiceAccountSelector . Setting the selectors to {} will assign the SGs referenced in the SecurityGroupPolicy to all pods in a namespace or all Service Accounts in a namespace. Be sure you've familiarized youself with all the considerations before implementing security groups for pods. Important If you use SGs for pods you must create SGs that allow port 53 outbound to the cluster security group. Similarly, you must update the cluster security group to accept port 53 inbound traffic from the pod security group. Important The limits for security groups still apply when using security groups for pods so use them judiciously. Important You must create rules for inbound traffic from the cluster security group (kubelet) for all of the probes configured for pod. Warning There is a bug that currently prevents the kubelet from communicating with pods that are assigned to SGs. The current workaround involves running sudo sysctl net.ipv4.tcp_early_demux=0 on the affected worker nodes. This is fixed in CNI v1.7.3, https://github.com/aws/amazon-vpc-cni-k8s/releases/tag/v1.7.3 . Important Security groups for pods relies on a feature known as ENI trunking which was created to increase the ENI density of an EC2 instance. When a pod is assigned to an SG, a VPC controller associates a branch ENI from the node group with the pod. If there aren't enough branch ENIs available in a node group at the time the pod is scheduled, the pod will stay in pending state. The number of branch ENIs an instance can support varies by instance type/family. See https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#supported-instance-types for further details. While security groups for pods offers an AWS-native way to control network traffic within and outside of your cluster without the overhead of a policy daemon, other options are available. For example, the Cilium policy engine allows you to reference a DNS name in a network policy. Calico Enterprise includes an option for mapping network policies to AWS security groups. If you've implemented a service mesh like Istio, you can use an egress gateway to restrict network egress to specific, fully qualified domains or IP addresses. For further infomration about this option, read the three part series on egress traffic control in Istio .","title":"Security groups"},{"location":"security/docs/network/#encryption-in-transit_1","text":"Applications that need to conform to PCI, HIPAA, or other regulations may need to encrypt data while it is in transit. Nowadays TLS is the de facto choice for encrypting traffic on the wire. TLS, like it's predecessor SSL, provides secure communications over a network using cryptographic protocols. TLS uses symmetric encryption where the keys to encrypt the data are generated based on a shared secret that is negotiated at the beginning of the session. The following are a few ways that you can encrypt data in a Kubernetes environment.","title":"Encryption in transit"},{"location":"security/docs/network/#nitro-instances","text":"Traffic exchanged between the following Nitro instance types C5n, G4, I3en, M5dn, M5n, P3dn, R5dn, and R5n, is automatically encrypted by default. When there's an intermediate hop, like a transit gateway or a load balancer, the traffic is not encrypted. See Encryption in transit and the following What's new announcement for further details.","title":"Nitro Instances"},{"location":"security/docs/network/#container-network-interfaces-cnis","text":"WeaveNet can be configured to automatically encrypt all traffic using NaCl encryption for sleeve traffic, and IPsec ESP for fast datapath traffic.","title":"Container Network Interfaces (CNIs)"},{"location":"security/docs/network/#service-mesh","text":"Encryption in transit can also be implemented with a service mesh like App Mesh, Linkerd v2, and Istio. AppMesh supports mTLS with X.509 certificates or Envoy's Secret Discovery Service(SDS). Linkerd and Istio both have support for mTLS. The aws-app-mesh-examples GitHub repository provides walkthroughs for configuring mTLS using X.509 certificates and SPIRE as SDS provider with your Envoy container: Configuring mTLS using X.509 certificates Configuring TLS using SPIRE (SDS) App Mesh also supports TLS encryption with a private certificate issued by AWS Certificate Manager (ACM) or a certificate stored on the local file system of the virtual node. The aws-app-mesh-examples GitHub repository provides walkthroughs for configuring TLS using certificates issued by ACM and certificates that are packaged with your Envoy container: + Configuring TLS with File Provided TLS Certificates + Configuring TLS with AWS Certificate Manager","title":"Service Mesh"},{"location":"security/docs/network/#ingress-controllers-and-load-balancers","text":"Ingress controllers are a way for you to intelligently route HTTP/S traffic that emanates from outside the cluster to services running inside the cluster. Oftentimes, these Ingresses are fronted by a layer 4 load balancer, like the Classic Load Balancer or the Network Load Balancer (NLB). Encrypted traffic can be terminated at different places within the network, e.g. at the load balancer, at the ingress resource, or the Pod. How and where you terminate your SSL connection will ultimately be dictated by your organization's network security policy. For instance, if you have a policy that requires end-to-end encryption, you will have to decrypt the traffic at the Pod. This will place additional burden on your Pod as it will have to spend cycles establishing the initial handshake. Overall SSL/TLS processing is very CPU intensive. Consequently, if you have the flexibility, try performing the SSL offload at the Ingress or the load balancer. An ingress controller can be configured to terminate SSL/TLS connections. An example for how to terminate SSL/TLS connections at the NLB appears above . Additional examples for SSL/TLS termination appear below. Securing EKS Ingress With Contour And Let\u2019s Encrypt The GitOps Way How do I terminate HTTPS traffic on Amazon EKS workloads with ACM? Attention Some Ingresses, like the ALB ingress controller, implement the SSL/TLS using Annotations instead of as part of the Ingress Spec.","title":"Ingress Controllers and Load Balancers"},{"location":"security/docs/network/#tooling","text":"Verifying Service Mesh TLS in Kubernetes, Using ksniff and Wireshark ksniff egress-operator An operator and DNS plugin to control egress traffic from your cluster without protocol inspection","title":"Tooling"},{"location":"security/docs/pods/","text":"Pod Security \u00b6 Pods have a variety of different settings that can strengthen or weaken your overall security posture. As a Kubernetes practitioner your chief concern should be preventing a process that\u2019s running in a container from escaping the isolation boundaries of Docker and gaining access to the underlying host. The reason for this is twofold. First, the processes that run within a container run under the context of the [Linux] root user by default. Although the actions of root within a container are partially constrained by the set of Linux capabilities that Docker assigns to the containers, these default privileges could allow an attacker to escalate their privileges and/or gain access to sensitive information bound to the host, including Secrets and ConfigMaps. Below is a list of the default capabilities assigned to Docker containers. For additional information about each capability, see http://man7.org/linux/man-pages/man7/capabilities.7.html . CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FOWNER, CAP_FSETID, CAP_KILL, CAP_SETGID, CAP_SETUID, CAP_SETPCAP, CAP_NET_BIND_SERVICE, CAP_NET_RAW, CAP_SYS_CHROOT, CAP_MKNOD, CAP_AUDIT_WRITE, CAP_SETFCAP Info EC2 and Fargate pods are assigned the aforementioned capabilites by default. Additionally, Linux capabilities can only be dropped from Fargate pods. Pods that are run as privileged, inherit all of the Linux capabilities associated with root on the host and should be avoided if possible. Second, all Kubernetes worker nodes use an authorization mode called the node authorizer. The node authorizer authorizes all API requests that originate from the kubelet and allows nodes to perform the following actions: Read operations: services endpoints nodes pods secrets, configmaps, persistent volume claims and persistent volumes related to pods bound to the kubelet\u2019s node Write operations: nodes and node status (enable the NodeRestriction admission plugin to limit a kubelet to modify its own node) pods and pod status (enable the NodeRestriction admission plugin to limit a kubelet to modify pods bound to itself) events Auth-related operations: Read/write access to the CertificateSigningRequest (CSR) API for TLS bootstrapping the ability to create TokenReview and SubjectAccessReview for delegated authentication/authorization checks EKS uses the node restriction admission controller which only allows the node to modify a limited set of node attributes and pod objects that are bound to the node. Nevertheless, an attacker who manages to get access to the host will still be able to glean sensitive information about the environment from the Kubernetes API that could allow them to move laterally within the cluster. Recommendations \u00b6 Restrict the containers that can run as privileged \u00b6 As mentioned, containers that run as privileged inherit all of the Linux capabilities assigned to root on the host. Seldom do containers need these types of privileges to function properly. You can reject pods with containers configured to run as privileged by creating a pod security policy . You can think of a pod security policy as a set of requirements that pods have to meet before they can be created. If you elect to use pod security policies, you will need to create a role binding that allows service accounts to read your pod security policies. Attention PSP are deprecated in Kubernetes version 1.21. You will have until version 1.25 or roughly 2 years to transition to an alternative. SIG-Security has proposed a replacement aptly called PSP Replacement which you can read about here . The community ultimately decided it would be eaiser to build a replacement for PSPs than to retrofit the current offering. The replacement will include features such as auditing, warn but allow, version pinning, and dry-run where you can see the impact of a policy before it is enforced. When you provision an EKS cluster, a pod security policy called eks.privileged is automatically created. The manifest for that policy appears below: apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : annotations : kubernetes.io/description : privileged allows full unrestricted access to pod features, as if the PodSecurityPolicy controller was not enabled. seccomp.security.alpha.kubernetes.io/allowedProfileNames : '*' labels : eks.amazonaws.com/component : pod-security-policy kubernetes.io/cluster-service : \"true\" name : eks.privileged spec : allowPrivilegeEscalation : true allowedCapabilities : - '*' fsGroup : rule : RunAsAny hostIPC : true hostNetwork : true hostPID : true hostPorts : - max : 65535 min : 0 privileged : true runAsUser : rule : RunAsAny seLinux : rule : RunAsAny supplementalGroups : rule : RunAsAny volumes : - '*' This PSP allows an authenticated user to run privileged containers across all namespaces within the cluster. While this may seem overly permissive at first, there are certain applications/plug-ins such as the AWS VPC CNI and kube-proxy that have to run as privileged because they are responsible for configuring the host\u2019s network settings. Furthermore, this policy provides backward compatibility with earlier versions of Kubernetes that lacked support for pod security policies. The binding shown below is what binds the ClusterRole eks:podsecuritypolicy:privileged to the system:authenticated RBAC group. apiVersion : rbac.authorization.k8s.io/v1 kind : ClusterRoleBinding metadata : annotations : kubernetes.io/description : Allow all authenticated users to create privileged labels : eks.amazonaws.com/component : pod-security-policy kubernetes.io/cluster-service : \"true\" name : eks:podsecuritypolicy:authenticated roleRef : apiGroup : rbac.authorization.k8s.io kind : ClusterRole name : eks:podsecuritypolicy:privileged subjects : - apiGroup : rbac.authorization.k8s.io kind : Group name : system:authenticated Lastly, the ClusterRole below allow all bindings that reference it to use the eks.privileged PodSecurityPolicy. apiVersion : rbac.authorization.k8s.io/v1 kind : ClusterRole metadata : labels : eks.amazonaws.com/component : pod-security-policy kubernetes.io/cluster-service : \"true\" name : eks:podsecuritypolicy:privileged rules : - apiGroups : - policy resourceNames : - eks.privileged resources : - podsecuritypolicies verbs : - use As a best practice we recommend that you scope the binding for privileged pods to service accounts within a particular namespace, e.g. kube-system, and limiting access to that namespace. For all other serviceaccounts/namespaces, we recommend implementing a more restrictive policy such as this: apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : name : restricted annotations : seccomp.security.alpha.kubernetes.io/allowedProfileNames : 'docker/default,runtime/default' apparmor.security.beta.kubernetes.io/allowedProfileNames : 'runtime/default' seccomp.security.alpha.kubernetes.io/defaultProfileName : 'runtime/default' apparmor.security.beta.kubernetes.io/defaultProfileName : 'runtime/default' spec : privileged : false # Required to prevent escalations to root. allowPrivilegeEscalation : false # This is redundant with non-root + disallow privilege escalation, # but we can provide it for defense in depth. requiredDropCapabilities : - ALL # Allow core volume types. volumes : - 'configMap' - 'emptyDir' - 'projected' - 'secret' - 'downwardAPI' # Assume that persistentVolumes set up by the cluster admin are safe to use. - 'persistentVolumeClaim' hostNetwork : false hostIPC : false hostPID : false runAsUser : # Require the container to run without root privileges. rule : 'MustRunAsNonRoot' seLinux : # This policy assumes the nodes are using AppArmor rather than SELinux. rule : 'RunAsAny' supplementalGroups : rule : 'MustRunAs' ranges : # Forbid adding the root group. - min : 1 max : 65535 fsGroup : rule : 'MustRunAs' ranges : # Forbid adding the root group. - min : 1 max : 65535 readOnlyRootFilesystem : false This policy prevents pods from running as privileged or escalating privileges. It also restricts the types of volumes that can be mounted and the root supplemental groups that can be added. Another, albeit similar, approach is to start with policy that locks everything down and incrementally add exceptions for applications that need looser restrictions such as logging agents which need the ability to mount a host path. You can learn more about this in a post on the Square engineering blog . Attention Fargate is a launch type that enables you to run \"serverless\" container(s) where the containers of a pod are run on infrastructure that AWS manages. With Fargate, you cannot run a privileged container or configure your pod to use hostNetwork or hostPort. Do not run processes in containers as root \u00b6 All containers run as root by default. This could be problematic if an attacker is able to exploit a vulnerability in the application and get shell access to the running container. You can mitigate this risk a variety of ways. First, by removing the shell from the container image. Second, adding the USER directive to your Dockerfile or running the containers in the pod as a non-root user. The Kubernetes podSpec includes a set of fields under spec.securityContext , that allow to let you specify the user and/or group to run your application as. These fields are runAsUser and runAsGroup respectively. You can mandate the use of these fields by creating a pod security policy. See https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups for further information on this topic. Never run Docker in Docker or mount the socket in the container \u00b6 While this conveniently lets you to build/run images in Docker containers, you're basically relinquishing complete control of the node to the process running in the container. If you need to build container images on Kubernetes use Kaniko , buildah , img , or a build service like CodeBuild instead. Restrict the use of hostPath or if hostPath is necessary restrict which prefixes can be used and configure the volume as read-only \u00b6 hostPath is a volume that mounts a directory from the host directly to the container. Rarely will pods need this type of access, but if they do, you need to be aware of the risks. By default pods that run as root will have write access to the file system exposed by hostPath. This could allow an attacker to modify the kubelet settings, create symbolic links to directories or files not directly exposed by the hostPath, e.g. /etc/shadow, install ssh keys, read secrets mounted to the host, and other malicious things. To mitigate the risks from hostPath, configure the spec.containers.volumeMounts as readOnly , for example: volumeMounts : - name : hostPath-volume readOnly : true mountPath : /host-path You should also use a pod security policy to restrict the directories that can be used by hostPath volumes. For example the following PSP excerpt only allows paths that begin with /foo . It will prevent containers from traversing the host file system from outside the prefix: allowedHostPaths : # This allows \"/foo\", \"/foo/\", \"/foo/bar\" etc., but # disallows \"/fool\", \"/etc/foo\" etc. # \"/foo/../\" is never valid. - pathPrefix : \"/foo\" readOnly : true # only allow read-only mounts For futher information about the dangers of privileged escalation, read Seth Art's blog Bad Pods: Kubernetes Pod Privilege Escalation . Set requests and limits for each container to avoid resource contention and DoS attacks \u00b6 A pod without requests or limits can theoretically consume all of the resources available on a host. As additional pods are scheduled onto a node, the node may experience CPU or memory pressure which can cause the Kubelet to terminate or evict pods from the node. While you can\u2019t prevent this from happening all together, setting requests and limits will help minimize resource contention and mitigate the risk from poorly written applications that consume an excessive amount of resources. The podSpec allows you to specify requests and limits for CPU and memory. CPU is considered a compressible resource because it can be oversubscribed. Memory is incompressible, i.e. it cannot be shared among multiple containers. When you specify requests for CPU or memory, you\u2019re essentially designating the amount of memory that containers are guaranteed to get. Kubernetes aggregates the requests of all the containers in a pod to determine which node to schedule the pod onto. If a container exceeds the requested amount of memory it may be subject to termination if there\u2019s memory pressure on the node. Limits are the maximum amount of CPU and memory resources that a container is allowed to consume and directly corresponds to the memory.limit_in_bytes value of the cgroup created for the container. A container that exceeds the memory limit will be OOM killed. If a container exceeds its CPU limit, it will be throttled. Kubernetes uses three Quality of Service (QoS) classes to prioritize the workloads running on a node. These include: guaranteed, burstable, and best-effort. If limits and requests are not set, the pod is configured as best-effort (lowest priority). Best-effort pods are the first to get killed when there is insufficient memory. If limits are set on all containers within the pod, or if the requests and limits are set to the same values and not equal to 0, the pod is configured as guaranteed (highest priority). Guaranteed pods will not be killed unless they exceed their configured memory limits. If the limits and requests are configured with different values and not equal to 0, or one container within the pod sets limits and the others don\u2019t or have limits set for different resources, the pods are configured as burstable (medium priority). These pods have some resource guarantees, but can be killed once they exceed their requested memory. Attention Requests don't affect the memory_limit_in_bytes value of the container's cgroup; the cgroup limit is set to the amount of memory available on the host. Nevertheless, setting the requests value too low could cause the pod to be targeted for termination by the kubelet if the node undergoes memory pressure. Class Priority Condition Kill Condition Guaranteed highest limit = request != 0 Only exceed memory limits Burstable medium limit != request != 0 Can be killed if exceed request memory Best-Effort lowest limit & request Not Set First to get killed when there's insufficient menory For additional information about resource QoS, please refer to the Kubernetes documentation . You can force the use of requests and limits by setting a resource quota on a namespace or by creating a limit range . A resource quota allows you to specify the total amount of resources, e.g. CPU and RAM, allocated to a namespace. When it\u2019s applied to a namespace, it forces you to specify requests and limits for all containers deployed into that namespace. By contrast, limit ranges give you more granular control of the allocation of resources. With limit ranges you can min/max for CPU and memory resources per pod or per container within a namespace. You can also use them to set default request/limit values if none are provided. Do not allow privileged escalation \u00b6 Privileged escalation allows a process to change the security context under which its running. Sudo is a good example of this as are binaries with the SUID or SGID bit. Privileged escalation is basically a way for users to execute a file with the permissions of another user or group. You can prevent a container from using privileged escalation by implementing a pod security policy that sets allowPriviledgedEscalation to false or by setting securityContext.allowPrivilegedEscalation in the podSpec . Pod Security Standards \u00b6 Pod Security Standards (PSSs) are part of the proposal to replace PSPs. They are an attempt to provide a set of standards for pod security that is independent of the enforcement mechanism. The standards define three policy types: Privileged: is the absence of a policy. This is good for applications such as logging agents, CNIs, storage drivers, and other system wide applications that need privileged access. Baseline: is a minimal set of restrictions to prevent privileged escalations. The baseline policy prohibits use of hostNetwork, hostPID, hostIPC, hostPath, hostPort, the inability to add Linux capabilities, along with several other restrictions. Restricted: inherits from the baseline and adds further restrictions such as the inability to run as root or a root-group. Restricted policies may impact an application's ability to function. They are primarily targeted at running security critical applications. Tools and Resources \u00b6 kube-psp-advisor is a tool that makes it easier to create K8s Pod Security Policies (PSPs) from either a live K8s environment or from a single .yaml file containing a pod specification (Deployment, DaemonSet, Pod, etc). open-policy-agent/gatekeeper-library: The OPA Gatekeeper policy library a library of OPA/Gatekeeper policies that you can use as a substitue for PSPs. A collection of common OPA and Kyverno policies for EKS. Policy based countermeasures: part 1 Policy based countermeasures: part 2","title":"Pod Security"},{"location":"security/docs/pods/#pod-security","text":"Pods have a variety of different settings that can strengthen or weaken your overall security posture. As a Kubernetes practitioner your chief concern should be preventing a process that\u2019s running in a container from escaping the isolation boundaries of Docker and gaining access to the underlying host. The reason for this is twofold. First, the processes that run within a container run under the context of the [Linux] root user by default. Although the actions of root within a container are partially constrained by the set of Linux capabilities that Docker assigns to the containers, these default privileges could allow an attacker to escalate their privileges and/or gain access to sensitive information bound to the host, including Secrets and ConfigMaps. Below is a list of the default capabilities assigned to Docker containers. For additional information about each capability, see http://man7.org/linux/man-pages/man7/capabilities.7.html . CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FOWNER, CAP_FSETID, CAP_KILL, CAP_SETGID, CAP_SETUID, CAP_SETPCAP, CAP_NET_BIND_SERVICE, CAP_NET_RAW, CAP_SYS_CHROOT, CAP_MKNOD, CAP_AUDIT_WRITE, CAP_SETFCAP Info EC2 and Fargate pods are assigned the aforementioned capabilites by default. Additionally, Linux capabilities can only be dropped from Fargate pods. Pods that are run as privileged, inherit all of the Linux capabilities associated with root on the host and should be avoided if possible. Second, all Kubernetes worker nodes use an authorization mode called the node authorizer. The node authorizer authorizes all API requests that originate from the kubelet and allows nodes to perform the following actions: Read operations: services endpoints nodes pods secrets, configmaps, persistent volume claims and persistent volumes related to pods bound to the kubelet\u2019s node Write operations: nodes and node status (enable the NodeRestriction admission plugin to limit a kubelet to modify its own node) pods and pod status (enable the NodeRestriction admission plugin to limit a kubelet to modify pods bound to itself) events Auth-related operations: Read/write access to the CertificateSigningRequest (CSR) API for TLS bootstrapping the ability to create TokenReview and SubjectAccessReview for delegated authentication/authorization checks EKS uses the node restriction admission controller which only allows the node to modify a limited set of node attributes and pod objects that are bound to the node. Nevertheless, an attacker who manages to get access to the host will still be able to glean sensitive information about the environment from the Kubernetes API that could allow them to move laterally within the cluster.","title":"Pod Security"},{"location":"security/docs/pods/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/pods/#restrict-the-containers-that-can-run-as-privileged","text":"As mentioned, containers that run as privileged inherit all of the Linux capabilities assigned to root on the host. Seldom do containers need these types of privileges to function properly. You can reject pods with containers configured to run as privileged by creating a pod security policy . You can think of a pod security policy as a set of requirements that pods have to meet before they can be created. If you elect to use pod security policies, you will need to create a role binding that allows service accounts to read your pod security policies. Attention PSP are deprecated in Kubernetes version 1.21. You will have until version 1.25 or roughly 2 years to transition to an alternative. SIG-Security has proposed a replacement aptly called PSP Replacement which you can read about here . The community ultimately decided it would be eaiser to build a replacement for PSPs than to retrofit the current offering. The replacement will include features such as auditing, warn but allow, version pinning, and dry-run where you can see the impact of a policy before it is enforced. When you provision an EKS cluster, a pod security policy called eks.privileged is automatically created. The manifest for that policy appears below: apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : annotations : kubernetes.io/description : privileged allows full unrestricted access to pod features, as if the PodSecurityPolicy controller was not enabled. seccomp.security.alpha.kubernetes.io/allowedProfileNames : '*' labels : eks.amazonaws.com/component : pod-security-policy kubernetes.io/cluster-service : \"true\" name : eks.privileged spec : allowPrivilegeEscalation : true allowedCapabilities : - '*' fsGroup : rule : RunAsAny hostIPC : true hostNetwork : true hostPID : true hostPorts : - max : 65535 min : 0 privileged : true runAsUser : rule : RunAsAny seLinux : rule : RunAsAny supplementalGroups : rule : RunAsAny volumes : - '*' This PSP allows an authenticated user to run privileged containers across all namespaces within the cluster. While this may seem overly permissive at first, there are certain applications/plug-ins such as the AWS VPC CNI and kube-proxy that have to run as privileged because they are responsible for configuring the host\u2019s network settings. Furthermore, this policy provides backward compatibility with earlier versions of Kubernetes that lacked support for pod security policies. The binding shown below is what binds the ClusterRole eks:podsecuritypolicy:privileged to the system:authenticated RBAC group. apiVersion : rbac.authorization.k8s.io/v1 kind : ClusterRoleBinding metadata : annotations : kubernetes.io/description : Allow all authenticated users to create privileged labels : eks.amazonaws.com/component : pod-security-policy kubernetes.io/cluster-service : \"true\" name : eks:podsecuritypolicy:authenticated roleRef : apiGroup : rbac.authorization.k8s.io kind : ClusterRole name : eks:podsecuritypolicy:privileged subjects : - apiGroup : rbac.authorization.k8s.io kind : Group name : system:authenticated Lastly, the ClusterRole below allow all bindings that reference it to use the eks.privileged PodSecurityPolicy. apiVersion : rbac.authorization.k8s.io/v1 kind : ClusterRole metadata : labels : eks.amazonaws.com/component : pod-security-policy kubernetes.io/cluster-service : \"true\" name : eks:podsecuritypolicy:privileged rules : - apiGroups : - policy resourceNames : - eks.privileged resources : - podsecuritypolicies verbs : - use As a best practice we recommend that you scope the binding for privileged pods to service accounts within a particular namespace, e.g. kube-system, and limiting access to that namespace. For all other serviceaccounts/namespaces, we recommend implementing a more restrictive policy such as this: apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : name : restricted annotations : seccomp.security.alpha.kubernetes.io/allowedProfileNames : 'docker/default,runtime/default' apparmor.security.beta.kubernetes.io/allowedProfileNames : 'runtime/default' seccomp.security.alpha.kubernetes.io/defaultProfileName : 'runtime/default' apparmor.security.beta.kubernetes.io/defaultProfileName : 'runtime/default' spec : privileged : false # Required to prevent escalations to root. allowPrivilegeEscalation : false # This is redundant with non-root + disallow privilege escalation, # but we can provide it for defense in depth. requiredDropCapabilities : - ALL # Allow core volume types. volumes : - 'configMap' - 'emptyDir' - 'projected' - 'secret' - 'downwardAPI' # Assume that persistentVolumes set up by the cluster admin are safe to use. - 'persistentVolumeClaim' hostNetwork : false hostIPC : false hostPID : false runAsUser : # Require the container to run without root privileges. rule : 'MustRunAsNonRoot' seLinux : # This policy assumes the nodes are using AppArmor rather than SELinux. rule : 'RunAsAny' supplementalGroups : rule : 'MustRunAs' ranges : # Forbid adding the root group. - min : 1 max : 65535 fsGroup : rule : 'MustRunAs' ranges : # Forbid adding the root group. - min : 1 max : 65535 readOnlyRootFilesystem : false This policy prevents pods from running as privileged or escalating privileges. It also restricts the types of volumes that can be mounted and the root supplemental groups that can be added. Another, albeit similar, approach is to start with policy that locks everything down and incrementally add exceptions for applications that need looser restrictions such as logging agents which need the ability to mount a host path. You can learn more about this in a post on the Square engineering blog . Attention Fargate is a launch type that enables you to run \"serverless\" container(s) where the containers of a pod are run on infrastructure that AWS manages. With Fargate, you cannot run a privileged container or configure your pod to use hostNetwork or hostPort.","title":"Restrict the containers that can run as privileged"},{"location":"security/docs/pods/#do-not-run-processes-in-containers-as-root","text":"All containers run as root by default. This could be problematic if an attacker is able to exploit a vulnerability in the application and get shell access to the running container. You can mitigate this risk a variety of ways. First, by removing the shell from the container image. Second, adding the USER directive to your Dockerfile or running the containers in the pod as a non-root user. The Kubernetes podSpec includes a set of fields under spec.securityContext , that allow to let you specify the user and/or group to run your application as. These fields are runAsUser and runAsGroup respectively. You can mandate the use of these fields by creating a pod security policy. See https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups for further information on this topic.","title":"Do not run processes in containers as root"},{"location":"security/docs/pods/#never-run-docker-in-docker-or-mount-the-socket-in-the-container","text":"While this conveniently lets you to build/run images in Docker containers, you're basically relinquishing complete control of the node to the process running in the container. If you need to build container images on Kubernetes use Kaniko , buildah , img , or a build service like CodeBuild instead.","title":"Never run Docker in Docker or mount the socket in the container"},{"location":"security/docs/pods/#restrict-the-use-of-hostpath-or-if-hostpath-is-necessary-restrict-which-prefixes-can-be-used-and-configure-the-volume-as-read-only","text":"hostPath is a volume that mounts a directory from the host directly to the container. Rarely will pods need this type of access, but if they do, you need to be aware of the risks. By default pods that run as root will have write access to the file system exposed by hostPath. This could allow an attacker to modify the kubelet settings, create symbolic links to directories or files not directly exposed by the hostPath, e.g. /etc/shadow, install ssh keys, read secrets mounted to the host, and other malicious things. To mitigate the risks from hostPath, configure the spec.containers.volumeMounts as readOnly , for example: volumeMounts : - name : hostPath-volume readOnly : true mountPath : /host-path You should also use a pod security policy to restrict the directories that can be used by hostPath volumes. For example the following PSP excerpt only allows paths that begin with /foo . It will prevent containers from traversing the host file system from outside the prefix: allowedHostPaths : # This allows \"/foo\", \"/foo/\", \"/foo/bar\" etc., but # disallows \"/fool\", \"/etc/foo\" etc. # \"/foo/../\" is never valid. - pathPrefix : \"/foo\" readOnly : true # only allow read-only mounts For futher information about the dangers of privileged escalation, read Seth Art's blog Bad Pods: Kubernetes Pod Privilege Escalation .","title":"Restrict the use of hostPath or if hostPath is necessary restrict which prefixes can be used and configure the volume as read-only"},{"location":"security/docs/pods/#set-requests-and-limits-for-each-container-to-avoid-resource-contention-and-dos-attacks","text":"A pod without requests or limits can theoretically consume all of the resources available on a host. As additional pods are scheduled onto a node, the node may experience CPU or memory pressure which can cause the Kubelet to terminate or evict pods from the node. While you can\u2019t prevent this from happening all together, setting requests and limits will help minimize resource contention and mitigate the risk from poorly written applications that consume an excessive amount of resources. The podSpec allows you to specify requests and limits for CPU and memory. CPU is considered a compressible resource because it can be oversubscribed. Memory is incompressible, i.e. it cannot be shared among multiple containers. When you specify requests for CPU or memory, you\u2019re essentially designating the amount of memory that containers are guaranteed to get. Kubernetes aggregates the requests of all the containers in a pod to determine which node to schedule the pod onto. If a container exceeds the requested amount of memory it may be subject to termination if there\u2019s memory pressure on the node. Limits are the maximum amount of CPU and memory resources that a container is allowed to consume and directly corresponds to the memory.limit_in_bytes value of the cgroup created for the container. A container that exceeds the memory limit will be OOM killed. If a container exceeds its CPU limit, it will be throttled. Kubernetes uses three Quality of Service (QoS) classes to prioritize the workloads running on a node. These include: guaranteed, burstable, and best-effort. If limits and requests are not set, the pod is configured as best-effort (lowest priority). Best-effort pods are the first to get killed when there is insufficient memory. If limits are set on all containers within the pod, or if the requests and limits are set to the same values and not equal to 0, the pod is configured as guaranteed (highest priority). Guaranteed pods will not be killed unless they exceed their configured memory limits. If the limits and requests are configured with different values and not equal to 0, or one container within the pod sets limits and the others don\u2019t or have limits set for different resources, the pods are configured as burstable (medium priority). These pods have some resource guarantees, but can be killed once they exceed their requested memory. Attention Requests don't affect the memory_limit_in_bytes value of the container's cgroup; the cgroup limit is set to the amount of memory available on the host. Nevertheless, setting the requests value too low could cause the pod to be targeted for termination by the kubelet if the node undergoes memory pressure. Class Priority Condition Kill Condition Guaranteed highest limit = request != 0 Only exceed memory limits Burstable medium limit != request != 0 Can be killed if exceed request memory Best-Effort lowest limit & request Not Set First to get killed when there's insufficient menory For additional information about resource QoS, please refer to the Kubernetes documentation . You can force the use of requests and limits by setting a resource quota on a namespace or by creating a limit range . A resource quota allows you to specify the total amount of resources, e.g. CPU and RAM, allocated to a namespace. When it\u2019s applied to a namespace, it forces you to specify requests and limits for all containers deployed into that namespace. By contrast, limit ranges give you more granular control of the allocation of resources. With limit ranges you can min/max for CPU and memory resources per pod or per container within a namespace. You can also use them to set default request/limit values if none are provided.","title":"Set requests and limits for each container to avoid resource contention and DoS attacks"},{"location":"security/docs/pods/#do-not-allow-privileged-escalation","text":"Privileged escalation allows a process to change the security context under which its running. Sudo is a good example of this as are binaries with the SUID or SGID bit. Privileged escalation is basically a way for users to execute a file with the permissions of another user or group. You can prevent a container from using privileged escalation by implementing a pod security policy that sets allowPriviledgedEscalation to false or by setting securityContext.allowPrivilegedEscalation in the podSpec .","title":"Do not allow privileged escalation"},{"location":"security/docs/pods/#pod-security-standards","text":"Pod Security Standards (PSSs) are part of the proposal to replace PSPs. They are an attempt to provide a set of standards for pod security that is independent of the enforcement mechanism. The standards define three policy types: Privileged: is the absence of a policy. This is good for applications such as logging agents, CNIs, storage drivers, and other system wide applications that need privileged access. Baseline: is a minimal set of restrictions to prevent privileged escalations. The baseline policy prohibits use of hostNetwork, hostPID, hostIPC, hostPath, hostPort, the inability to add Linux capabilities, along with several other restrictions. Restricted: inherits from the baseline and adds further restrictions such as the inability to run as root or a root-group. Restricted policies may impact an application's ability to function. They are primarily targeted at running security critical applications.","title":"Pod Security Standards"},{"location":"security/docs/pods/#tools-and-resources","text":"kube-psp-advisor is a tool that makes it easier to create K8s Pod Security Policies (PSPs) from either a live K8s environment or from a single .yaml file containing a pod specification (Deployment, DaemonSet, Pod, etc). open-policy-agent/gatekeeper-library: The OPA Gatekeeper policy library a library of OPA/Gatekeeper policies that you can use as a substitue for PSPs. A collection of common OPA and Kyverno policies for EKS. Policy based countermeasures: part 1 Policy based countermeasures: part 2","title":"Tools and Resources"},{"location":"security/docs/runtime/","text":"Runtime security \u00b6 Runtime security provides active protection for your containers while they're running. The idea is to detect and/or prevent malicious activity from occuring inside the container. With secure computing (seccomp) you can prevent a containerized application from making certain syscalls to the underlying host operating system's kernel. While the Linux operating system has a few hundred system calls, the lion's share of them are not necessary for running containers. By restricting what syscalls can be made by a container, you can effectively decrease your application's attack surface. To get started with seccomp, use strace to generate a stack trace to see which system calls your application is making, then use a tool such as syscall2seccomp to create a seccomp profile from the data gathered from the trace. Unlike SELinux, seccomp was not designed to isolate containers from each other, however, it will protect the host kernel from unauthorized syscalls. It works by intercepting syscalls and only allowing those that have been whitelisted to pass through. Docker has a default seccomp profile which is suitable for a majority of general purpose workloads. You can configure your container or Pod to use this profile by adding the following annotation to your container's or Pod's spec (pre-1.19): annotations : seccomp . security . alpha . kubernetes . io /pod: \"runtime/ default \" 1.19 and later: securityContext : seccompProfile : type : RuntimeDefault It's also possible to create your own profiles for things that require additional privileges. Caution seccomp profiles are a Kubelet alpha feature. You'll need to add the --seccomp-profile-root flag to the Kubelet arguments to make use of this feature. AppArmor is similar to seccomp, only it restricts an container's capabilities including accessing parts of the file system. It can be run in either enforcement or complain mode. Since building Apparmor profiles can be challenging, it is recommended you use a tool like bane instead. Attention Apparmor is only available Ubuntu/Debian distributions of Linux. Attention Kubernetes does not currently provide any native mechanisms for loading AppArmor or seccomp profiles onto Nodes. They either have to be loaded manually or installed onto Nodes when they are bootstrapped. This has to be done prior to referencing them in your Pods because the scheduler is unaware of which nodes have profiles. Recommendations \u00b6 Use a 3rd party solution for runtime defense \u00b6 Creating and managing seccomp and Apparmor profiles can be difficult if you're not familiar with Linux security. If you don't have the time to become proficient, consider using a commercial solution. A lot of them have moved beyond static profiles like Apparmor and seccomp and have begun using machine learning to block or alert on suspicious activity. A handful of these solutions can be found below in the tools section. Additional options can be found on the AWS Marketplace for Containers . Consider add/dropping Linux capabilities before writing seccomp policies \u00b6 Capabilities involve various checks in kernel functions reachable by syscalls. If the check fails, the syscall typically returns an error. The check can be done either right at the beginning of a specific syscall, or deeper in the kernel in areas that might be reachable through multiple different syscalls (such as writing to a specific privileged file). Seccomp, on the other hand, is a syscall filter which is applied to all syscalls before they are run. A process can set up a filter which allows them to revoke their right to run certain syscalls, or specific arguments for certain syscalls. Before using seccomp, consider whether adding/removing Linux capabilities gives you the control you need. See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container for further information. See whether you can accomplish your aims by using Pod Security Policies (PSPs) \u00b6 Pod Security Policies offer a lot of different ways to improve your security posture without introducing undue complexity. Explore the options available in PSPs before venturing into building seccomp and Apparmor profiles. Warning With the future propects of PSPs in doubt, you may want to look at implementing these controls using Pod security contexts or OPA/Gatekeeper. A collection of Gatekeeper constraints and constraint templates for implementing policies commonly found in PSPs can be pulled from the Gatekeeper library repository on GitHub. Additional Resources \u00b6 7 things you should know before you start AppArmor Loader Setting up nodes with profiles zaz A command-line tool to assist on assessing container security requirements and generating seccomp profiles seccomp-operator Is similar to the AppArmor Loader, only instead of AppArmor profiles, it creates a seccomp profiles on each host Tools \u00b6 Aqua Qualys Stackrox Sysdig Secure Twistlock","title":"Runtime Security"},{"location":"security/docs/runtime/#runtime-security","text":"Runtime security provides active protection for your containers while they're running. The idea is to detect and/or prevent malicious activity from occuring inside the container. With secure computing (seccomp) you can prevent a containerized application from making certain syscalls to the underlying host operating system's kernel. While the Linux operating system has a few hundred system calls, the lion's share of them are not necessary for running containers. By restricting what syscalls can be made by a container, you can effectively decrease your application's attack surface. To get started with seccomp, use strace to generate a stack trace to see which system calls your application is making, then use a tool such as syscall2seccomp to create a seccomp profile from the data gathered from the trace. Unlike SELinux, seccomp was not designed to isolate containers from each other, however, it will protect the host kernel from unauthorized syscalls. It works by intercepting syscalls and only allowing those that have been whitelisted to pass through. Docker has a default seccomp profile which is suitable for a majority of general purpose workloads. You can configure your container or Pod to use this profile by adding the following annotation to your container's or Pod's spec (pre-1.19): annotations : seccomp . security . alpha . kubernetes . io /pod: \"runtime/ default \" 1.19 and later: securityContext : seccompProfile : type : RuntimeDefault It's also possible to create your own profiles for things that require additional privileges. Caution seccomp profiles are a Kubelet alpha feature. You'll need to add the --seccomp-profile-root flag to the Kubelet arguments to make use of this feature. AppArmor is similar to seccomp, only it restricts an container's capabilities including accessing parts of the file system. It can be run in either enforcement or complain mode. Since building Apparmor profiles can be challenging, it is recommended you use a tool like bane instead. Attention Apparmor is only available Ubuntu/Debian distributions of Linux. Attention Kubernetes does not currently provide any native mechanisms for loading AppArmor or seccomp profiles onto Nodes. They either have to be loaded manually or installed onto Nodes when they are bootstrapped. This has to be done prior to referencing them in your Pods because the scheduler is unaware of which nodes have profiles.","title":"Runtime security"},{"location":"security/docs/runtime/#recommendations","text":"","title":"Recommendations"},{"location":"security/docs/runtime/#use-a-3rd-party-solution-for-runtime-defense","text":"Creating and managing seccomp and Apparmor profiles can be difficult if you're not familiar with Linux security. If you don't have the time to become proficient, consider using a commercial solution. A lot of them have moved beyond static profiles like Apparmor and seccomp and have begun using machine learning to block or alert on suspicious activity. A handful of these solutions can be found below in the tools section. Additional options can be found on the AWS Marketplace for Containers .","title":"Use a 3rd party solution for runtime defense"},{"location":"security/docs/runtime/#consider-adddropping-linux-capabilities-before-writing-seccomp-policies","text":"Capabilities involve various checks in kernel functions reachable by syscalls. If the check fails, the syscall typically returns an error. The check can be done either right at the beginning of a specific syscall, or deeper in the kernel in areas that might be reachable through multiple different syscalls (such as writing to a specific privileged file). Seccomp, on the other hand, is a syscall filter which is applied to all syscalls before they are run. A process can set up a filter which allows them to revoke their right to run certain syscalls, or specific arguments for certain syscalls. Before using seccomp, consider whether adding/removing Linux capabilities gives you the control you need. See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container for further information.","title":"Consider add/dropping Linux capabilities before writing seccomp policies"},{"location":"security/docs/runtime/#see-whether-you-can-accomplish-your-aims-by-using-pod-security-policies-psps","text":"Pod Security Policies offer a lot of different ways to improve your security posture without introducing undue complexity. Explore the options available in PSPs before venturing into building seccomp and Apparmor profiles. Warning With the future propects of PSPs in doubt, you may want to look at implementing these controls using Pod security contexts or OPA/Gatekeeper. A collection of Gatekeeper constraints and constraint templates for implementing policies commonly found in PSPs can be pulled from the Gatekeeper library repository on GitHub.","title":"See whether you can accomplish your aims by using Pod Security Policies (PSPs)"},{"location":"security/docs/runtime/#additional-resources","text":"7 things you should know before you start AppArmor Loader Setting up nodes with profiles zaz A command-line tool to assist on assessing container security requirements and generating seccomp profiles seccomp-operator Is similar to the AppArmor Loader, only instead of AppArmor profiles, it creates a seccomp profiles on each host","title":"Additional Resources"},{"location":"security/docs/runtime/#tools","text":"Aqua Qualys Stackrox Sysdig Secure Twistlock","title":"Tools"}]}